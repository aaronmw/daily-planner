{"version":3,"sources":["components/atoms/Icon.js","components/atoms/tokens.js","components/atoms/copy/motivational-descriptors.js","utils/preventWidows.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","utils/toInt.js","components/atoms/Button.js","components/atoms/GlobalStyles.js","components/atoms/Transition.js","hooks/useDrag.js","hooks/useDrop.js","hooks/useKeyboardShortcuts.js","components/ColorPicker.js","components/EditInPlace.js","components/ListCard.js","components/ListManager.js","components/TaskListToggleButton.js","components/ToolBar.js","components/Sidebar.js","components/OptionBar.js","components/TaskDetails.js","utils/minutesToHeight.js","components/TaskCard.js","components/TaskList.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/Trash.js","components/TrashedCard.js","components/TrashedLists.js","components/TrashedTasks.js","hooks/usePersistentState.js","index.js"],"names":["STYLE_PREFIX_MAP","solid","regular","light","duotone","brands","Icon","_ref","iconName","_ref$styleName","styleName","otherProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","SIDEBAR_DEFAULT_WIDTH","SIDEBAR_EXTENDED_WIDTH","DURATION_OPTIONS","GRID_UNIT","FONTS","NORMAL","LINE_HEIGHT","SIZE","LARGE","LIST_CARD_HEIGHT","LIST_CARD_SPACING","LIST_CARD_WIDTH","MIN_SLOT_HEIGHT","ROUTE_TRANSITION_ANIMATION_DURATION","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","BASICALLY","CREATE_NEW_TASK","DELETE_TASK","EDIT_TASK","MOVE_BETWEEN_LISTS","SELECT_NEXT_PREV_TASK","MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE","SETTING_DURATION","TOGGLE_TASK_LIST","TOGGLE_DARK_MODE","TOGGLE_LIST_MANAGER","PRIMARY_COLORS","range","map","num","adjustHue","INITIAL_LISTS","id","color_code","sample","isArchived","label","INITIAL_SELECTED_LIST_ID","INITIAL_TASKS","keys","TIPS","tipId","icon","list_id","isComplete","notes","scheduled","scheduled_minutes","scheduled_time","INITIAL_SELECTED_TASK_ID","buildPalette","Date","now","theme","arguments","length","undefined","colorCode","THEME","PRIMARY","luminanceOfPrimaryColor","getLuminance","BACKGROUND","SHADED","setLightness","TEXT","TEXT_FADED","BORDER","DOTTED_LINE","TIME_LINE_PRIMARY","TIME_LINE_SECONDARY","NEUTRAL_FOREGROUND","NEUTRAL_BACKGROUND","transparentize","HIGH_CONTRAST_BACKGROUND","HIGH_CONTRAST_TEXT","readableColor","SHADOW","TASK_BORDER","TASK_BORDER_HOVER","TASK_BORDER_ACTIVE","ICON_PACKS","EMOJI","COLOR_PICKER","DARK_MODE","END_ZONE","LEFT","LIGHT_MODE","LIST_MANAGER","RIGHT","TASK_DETAILS","TIP","FONT_AWESOME","ICON_WEIGHT_OVERRIDES","palette","forEach","key","ICON_NAME","atoms_Icon","ICONS","TASK_DEFAULT","buildStyles","propName","propValue","edges","edge","join","Container","styled","div","_ref$border","border","_ref$margin","margin","_ref$marginBottom","marginBottom","_ref$marginLeft","marginLeft","_ref$marginRight","marginRight","_ref$marginTop","marginTop","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingBottom","paddingBottom","_ref$paddingLeft","paddingLeft","_ref$paddingRight","paddingRight","_ref$paddingTop","paddingTop","_ref$paddingX","paddingX","_ref$paddingY","paddingY","_ref$isFlexible","isFlexible","_ref$isRounded","isRounded","_ref$isScrollable","isScrollable","_ref$onClick","onClick","Box","forwardRef","_ref2","ref","str","children","_ref2$preventWidows","preventWidows","trim","replace","String","fromCharCode","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","_ref$wrapped","wrapped","FlexBox","attrs","isDisabled","ContentContainer","_templateObject","ColumnHeader","AppColumn","_ref3","_ref3$disabledIf","disabledIf","some","condition","AppColumn_Container","PrimaryAppColumn","_ref4","SecondaryAppColumn","_ref5","isTargetedForDrop","toInt","parseInt","Button","forwardedAs","_ref$isInverted","isInverted","StyledGhostButton","animation","keyframes","Button_templateObject","TracerSVGElement","svg","_templateObject2","Tracer","rect","isAnimated","isResizing","css","_templateObject3","AnimatedTracer","targetElementRef","_useState","useState","_useState2","slicedToArray","setIsResizing","_useState3","width","height","_useState4","viewBoxDimensions","setViewBoxDimensions","useEffect","timer","setInterval","current","_targetElementRef$cur","offsetWidth","offsetHeight","clearInterval","setTimeout","clearTimeout","preserveAspectRatio","viewBox","xmlns","rx","x","y","GhostButton","_useState5","_useState6","setIsAnimated","buttonElementRef","useRef","onMouseEnter","bind","onMouseLeave","Button_AnimatedTracer","ToggleButton","_ref6","_templateObject4","createGlobalStyle","Transition","isTransitioning","useDrag","dataTypes","isDragging","setIsDragging","draggable","onDragEnd","onDragStart","evt","includes","document","activeElement","tagName","toLowerCase","preventDefault","dataType","dataTransfer","setData","useDrop","dataTypeHandlers","setIsTargetedForDrop","targetedElement","droppable","onDragEnter","target","onDragOver","onDragLeave","onDrop","data","getData","payload","isNaN","parseFloat","dataTypeHandler","INPUT_TAG_NAMES","isInput","node","useKeyboardShortcuts","keyMap","onKeyDown","scopedToElementRef","keysDown","ctrlKey","push","shiftKey","metaKey","currentKeySequence","uniq","keyDown","sort","mapKeys","handler","sequence","shortcutKeySequence","split","scopedToElement","scopedElement","scopedToAnInput","firedOnAnInput","stopPropagation","buildKeyboardShortcutHandler","addEventListener","removeEventListener","ColorPicker_templateObject","StyledWindowShader","ColorPicker_templateObject2","WindowShader","ReactDOM","createPortal","body","StyledColorPaletteContainer","ColorPaletteContainer","ColorChip","ColorPicker_templateObject3","onPickColor","isPickingColor","setIsPickingColor","ColorPicker_Container","Fragment","ColorPicker_ColorPaletteContainer","color","style","backgroundColor","ColorPicker_WindowShader","ColorPicker_templateObject4","isEditable","isEditing","tracerColor","StyledTextarea","textarea","Canvas","isEmpty","memo","_ref4$canvasStyles","canvasStyles","_ref4$doubleClickToEd","doubleClickToEdit","_ref4$isEditable","_ref4$isMultiLine","isMultiLine","_ref4$isRemotelyActiv","isRemotelyActivated","_ref4$placeholder","placeholder","_ref4$render","render","value","_ref4$tracerColor","_ref4$value","_ref4$onSave","onSave","setIsEditing","bufferedValue","setBufferedValue","measuringElementHeight","setMeasuringElementHeight","containerElementRef","inputRef","measuringElementRef","isSingleLine","select","focus","el","handleClick","useCallback","textareaKeyMap","useMemo","saveAndClose","close","handleIndentation","options","outdent","selectionEnd","_getIndentedSelection","newBuffer","newSelectionStart","newSelectionEnd","selectionStart","tabString","_ref5$outdent","tabSize","textBeforeSelection","substring","textAfterSelection","textWithinSelection","trimmedTextWithinSelection","trimStart","textBeforeTrimmedSelection","getIndentedSelection","console","log","cmd + escape","shift + escape","cmd + enter","shift + enter","tab","shift + tab","escape","enter","EditInPlace_Container","tabIndex","onDoubleClick","objectSpread2","position","pointerEvents","opacity","whiteSpace","disabled","rows","onBlur","onChange","isActive","GhostListCard","ListCard_templateObject","ListCardContainer","ListCard","appActions","appData","listId","_ref3$isEditable","onUpdateList","onUpdateTask","isCreatingList","lists","selectedListId","tasks","list","find","listPalette","tasksInList","filter","task","listCardElementRef","_useDrag","list-id","dragProps","_useDrop","task-id","taskId","targetListId","currentTarget","dataset","dropProps","triggerClick","click","space","styled_components_browser_esm","ListCard_Container","data-list-id","title","components_EditInPlace","alignSelf","flexGrow","flexShrink","newLabel","fontSize","components_ColorPicker","ListManager","onCreateList","onSelectList","CREATE_LIST_LABEL","components_ListCard","TaskListToggleButton","isSidebarOpen","onChangeIsSidebarOpen","ToolBar","_ref$isCollapsed","isCollapsed","Sidebar","onChangeTheme","isShowingTrashContents","isTaskListForcedOpen","setIsTaskListForcedOpen","selectedList","sidebarDropProps","LABEL_FOR_TRASHED_TASKS","components_ToolBar","components_TaskListToggleButton","OptionButton","isSelected","OptionBar","_ref2$renderOption","renderOption","option","_ref2$renderSelectedO","renderSelectedOption","selectedOption","optionIndex","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","role","TaskDetails_templateObject2","DurationOptionBar","TaskDetails","_ref3$appActions","_ref3$appData","isCreatingTask","selectedTaskId","activeTask","handleUpdateTask","field","[object Object]","handleSaveDuration","newDuration","handleSaveIcon","newNotes","handleSaveLabel","handleSaveNotes","EMPTY_LABEL","EMPTY_NOTES","rawNotes","dangerouslySetInnerHTML","__html","marked","bottom","left","overflow","right","top","minutesToHeight","minutes","duration","CardLabel","isMouseOver","Math","min","CardIcon","TaskCardContainer","TaskCard_templateObject","setIsMouseOver","onImmediatelySelectTask","onTransitionToTask","isShowingListManager","listColorCode","cardPalette","toggleIsMouseOver","TaskCard_Container","data-task-id","onChangeTaskPosition","onCreateTask","incompleteTasks","unscheduledTasks","droppedOnTaskId","droppedOnTaskIndex","findIndex","taskCardDropProps","Button_GhostButton","CREATE_TASK_LABEL","components_TaskCard","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","floor","TimelineDropZone","totalMinutes","TimelineDropZone_Container","LABEL_FOR_TIMELINE","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","from","to","onClickTask","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isDraggingTask","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","getHours","getMinutes","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","DROP_ZONE_SIZE","pulsingAnimation","Trash_templateObject","AnimatedContainer","Trash_templateObject2","TrashDropZone","TrashIconContainer","Trash","onChangeIsShowingTrashContents","deleteTask","firstUnarchivedList","TrashedCard_templateObject2","random","minOpacity","translationDistance","TrashedCard_templateObject","RestoreButton","TrashedCard","restoreButtonTitle","onRestore","TrashedCard_Container","deletedLists","hasDeletedLists","handleRestoreList","EMPTY_TRASHED_LISTS","components_TrashedCard","LABEL_FOR_RESTORING_LIST","deletedTasks","hasDeletedTasks","handleRestoreTask","EMPTY_TRASHED_TASKS","LABEL_FOR_RESTORING_TASK","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","isShowingSidebar","setIsShowingSidebar","_usePersistentState3","_usePersistentState4","setLists","_usePersistentState5","_usePersistentState6","setSelectedListId","_usePersistentState7","_usePersistentState8","setIsShowingListManager","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","setSelectedTaskId","_usePersistentState13","_usePersistentState14","themeName","setThemeName","setIsCreatingList","setIsCreatingTask","setIsDraggingTask","_useState7","_useState8","setIsShowingTrashContents","_useState9","_useState10","setIsTransitioning","unarchivedLists","sortBy","currentListIndex","primaryColorCode","handleDragOver","handleDragEnd","overrides","newListId","randomColorCode","currentLists","MOTIVATIONAL_DESCRIPTORS","NEW_LIST_LABEL","updates","prevLists","firstTaskIdInList","querySelector","prevTasks","newTaskId","currentTasks","NEW_TASK_LABEL","NEW_TASK_NOTES","onSelectTask","selectTaskByRelativeIndex","relativeIndex","numTasksInList","indexOfCurrentTask","taskAtRelativeIndex","abs","selectListByRelativeIndex","numLists","totalSteps","listAtRelativeIndex","selectByRelativeIndex","isVertical","isListCard","transition","callback","onChangeIsShowingListManager","newIsShowingListManager","firstUnarchivedTask","newIndex","tasksMinusTarget","slice","moveTaskToTimeline","moveTaskToTaskList","setTaskDuration","toggleTaskListVisibility","toggleDarkMode","toggleIsEditingCurrentTask","toggleIsShowingListManager","createNewTask","deleteCurrentTask","goBack","withPreventDefault","func","e","reduce","acc","index","cmd + arrowRight","cmd + arrowLeft","cmd + shift + arrowRight","cmd + shift + arrowLeft","cmd + shift + ]","cmd + shift + [","b","d","l","n","t","arrowUp","arrowDown","arrowLeft","arrowRight","columnWidths","sidebar","listManager","taskDetails","timeline","disableVendorPrefixes","GlobalStyles","components_Trash","poop","components_Sidebar","components_TrashedTasks","components_TaskList","LABEL_FOR_TRASHED_LISTS","LABEL_FOR_LIST_MANAGER","LABEL_FOR_TASK_DETAILS","atoms_Transition","components_TrashedLists","components_ListManager","components_TaskDetails","components_Timeline","rootElement","getElementById"],"mappings":"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","file":"static/js/main.0e2d8d2c.chunk.js","sourcesContent":["import React from 'react';\n\nconst STYLE_PREFIX_MAP = {\n    solid: 'fas',\n    regular: 'far',\n    light: 'fal',\n    duotone: 'fad',\n    brands: 'fab',\n};\n\nconst Icon = ({ iconName, styleName = 'solid', ...otherProps }) => (\n    <i\n        className={`${STYLE_PREFIX_MAP[styleName]} fa-${iconName}`}\n        {...otherProps}\n    />\n);\n\nexport default Icon;\n","import range from 'lodash/range';\nimport sample from 'lodash/sample';\nimport {\n    adjustHue,\n    getLuminance,\n    readableColor,\n    setLightness,\n    transparentize,\n} from 'polished';\nimport React from 'react';\nimport MOTIVATIONAL_DESCRIPTORS from './copy/motivational-descriptors';\nimport Icon from './Icon';\n\nconst SIDEBAR_DEFAULT_WIDTH = '30vw';\nconst SIDEBAR_EXTENDED_WIDTH = '40vw';\nconst BORDER_RADIUS = '3px';\nconst BORDER_WIDTH = '1px';\nconst BULLET_SIZE = '10px';\nconst DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nconst GRID_UNIT = '25px';\nconst FONTS = {\n    NORMAL: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.5)` },\n    LARGE: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.75)` },\n};\nconst HOURS_PER_SCREEN = 10;\nconst LIST_CARD_HEIGHT = `calc(${GRID_UNIT} * 8)`;\nconst LIST_CARD_SPACING = `calc(${GRID_UNIT} * 0.5)`;\nconst LIST_CARD_WIDTH = `calc((100% - (${LIST_CARD_SPACING} * 2)) / 3)`;\nconst MIN_SLOT_HEIGHT = GRID_UNIT;\nconst ROUTE_TRANSITION_ANIMATION_DURATION = 250;\nconst TIMELINE_FROM = '6:00';\nconst TIMELINE_TO = '30:00';\nconst UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.MOTIVATIONAL_DESCRIPTORS = MOTIVATIONAL_DESCRIPTORS;\nCOPY.EMPTY_LABEL = '...label?';\nCOPY.EMPTY_NOTES = '...notes?';\nCOPY.EMPTY_TRASHED_LISTS = 'No Trashed Lists';\nCOPY.EMPTY_TRASHED_TASKS = 'No Trashed Tasks';\nCOPY.LABEL_FOR_LIST_MANAGER = 'Switch Lists';\nCOPY.LABEL_FOR_RESTORING_LIST = 'Restore this List';\nCOPY.LABEL_FOR_RESTORING_TASK = 'Restore this Task';\nCOPY.LABEL_FOR_TASK_DETAILS = 'Back to Task';\nCOPY.LABEL_FOR_TIMELINE = \"Today's Schedule\";\nCOPY.LABEL_FOR_TRASHED_LISTS = 'Trashed Lists';\nCOPY.LABEL_FOR_TRASHED_TASKS = 'Trashed Tasks';\nCOPY.CREATE_LIST_LABEL = 'Create List';\nCOPY.CREATE_TASK_LABEL = 'Create Task';\nCOPY.NEW_LIST_LABEL = 'New List';\nCOPY.NEW_TASK_LABEL = `New Task`;\nCOPY.NEW_TASK_NOTES = '';\nCOPY.TIPS = {\n    BASICALLY:\n        'Make lists of tasks. Every day, schedule your most important ones',\n    CREATE_NEW_TASK: 'Press [N] to create a [N]ew task in the current list',\n    DELETE_TASK: 'Press [T] to move the selected task to the [T]rash',\n    EDIT_TASK: 'Press [E] to edit the selected task',\n    MOVE_BETWEEN_LISTS:\n        'Press [⌘]+[SHIFT]+[LEFT or RIGHT] to move between your lists',\n    SELECT_NEXT_PREV_TASK:\n        'Press [UP] or [DOWN] to select the previous and next unscheduled tasks in the active list',\n    MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE:\n        'Press [⌘]+[LEFT or RIGHT] to move the selected task to the TaskList or Timeline, respectively',\n    SETTING_DURATION:\n        'Press keys [1] to [6] to quickly adjust your time estimate for the selected task',\n    TOGGLE_TASK_LIST:\n        'Press [B] to show / hide the side[B]ar of unscheduled tasks',\n    TOGGLE_DARK_MODE: 'Press [D] to toggle [D]ark Mode',\n    TOGGLE_LIST_MANAGER: 'Press [L] to see your [L]ists',\n};\n\nexport { COPY };\n\nconst PRIMARY_COLORS = [];\n\nconst NUM_COLORS = 10;\nrange(NUM_COLORS).map(\n    num =>\n        (PRIMARY_COLORS[num] = adjustHue((360 / NUM_COLORS) * num, '#D72127'))\n);\n\nconst INITIAL_LISTS = [\n    {\n        id: 1,\n        color_code: sample(PRIMARY_COLORS),\n        isArchived: false,\n        label: 'User Manual',\n    },\n    // ...PRIMARY_COLORS.map((primaryColor, index) => ({\n    //     id: index + 2,\n    //     color_code: primaryColor,\n    //     isArchived: false,\n    //     label: primaryColor,\n    // })),\n];\nconst INITIAL_SELECTED_LIST_ID = (INITIAL_LISTS[0] || {}).id;\n\nconst INITIAL_TASKS = Object.keys(COPY.TIPS).map(tipId => {\n    const label = COPY.TIPS[tipId];\n\n    return {\n        icon: '☝️',\n        id: tipId,\n        list_id: INITIAL_SELECTED_LIST_ID,\n        label: label,\n        isComplete: false,\n        notes: '',\n        scheduled: false,\n        scheduled_minutes: 30,\n        scheduled_time: '9:00',\n    };\n});\n\nconst INITIAL_SELECTED_TASK_ID = (INITIAL_TASKS[0] || {}).id;\n\nconst DEFAULT_LIST_PROPS = {\n    id: Date.now(),\n    color_code: '#FF0000',\n    isArchived: false,\n    label: 'New List',\n};\n\nconst buildPalette = (theme = 'LIGHT', colorCode = '#FF0000') => {\n    const THEME = {};\n\n    THEME.PRIMARY = colorCode;\n\n    const luminanceOfPrimaryColor = getLuminance(THEME.PRIMARY);\n\n    if (theme === 'DARK') {\n        THEME.BACKGROUND = '#000000';\n        THEME.SHADED = setLightness(0.1, THEME.PRIMARY);\n        THEME.TEXT = setLightness(0.95, THEME.PRIMARY);\n        THEME.TEXT_FADED = setLightness(0.75, THEME.PRIMARY);\n        THEME.BORDER = setLightness(0.2, THEME.PRIMARY);\n        THEME.DOTTED_LINE = setLightness(0.8, THEME.PRIMARY);\n        THEME.TIME_LINE_PRIMARY = THEME.TEXT_FADED;\n        THEME.TIME_LINE_SECONDARY = THEME.TEXT_FADED;\n        THEME.NEUTRAL_FOREGROUND = '#ffffff';\n        THEME.NEUTRAL_BACKGROUND = '#000000';\n    }\n\n    if (theme === 'LIGHT') {\n        THEME.PRIMARY = setLightness(\n            luminanceOfPrimaryColor < 0.5 ? 0.6 : 0.4,\n            THEME.PRIMARY\n        );\n\n        THEME.BACKGROUND = '#ffffff';\n        THEME.SHADED = setLightness(0.975, THEME.PRIMARY);\n        THEME.TEXT = setLightness(0.05, THEME.PRIMARY);\n        THEME.TEXT_FADED = setLightness(0.4, THEME.PRIMARY);\n        THEME.BORDER = setLightness(\n            luminanceOfPrimaryColor < 0.5 ? 0.85 : 0.6,\n            THEME.PRIMARY\n        );\n        THEME.DOTTED_LINE = setLightness(\n            luminanceOfPrimaryColor < 0.5 ? 0.8 : 0.45,\n            THEME.PRIMARY\n        );\n        THEME.TIME_LINE_PRIMARY = transparentize(0.5, THEME.TEXT_FADED);\n        THEME.TIME_LINE_SECONDARY = transparentize(0.5, THEME.TEXT_FADED);\n        THEME.NEUTRAL_FOREGROUND = '#000000';\n        THEME.NEUTRAL_BACKGROUND = '#ffffff';\n    }\n\n    THEME.HIGH_CONTRAST_BACKGROUND = setLightness(\n        // luminanceOfPrimaryColor < 0.5 ? 0.75 : 0.65,\n        0.7,\n        THEME.PRIMARY\n    );\n    THEME.HIGH_CONTRAST_TEXT = readableColor(THEME.HIGH_CONTRAST_BACKGROUND);\n    THEME.SHADOW = transparentize(0.9, '#000000');\n    THEME.TASK_BORDER = transparentize(0.5, THEME.PRIMARY);\n    THEME.TASK_BORDER_HOVER = transparentize(0.5, THEME.PRIMARY);\n    THEME.TASK_BORDER_ACTIVE = THEME.PRIMARY;\n\n    return THEME;\n};\n\nconst ICON_PACKS = {\n    EMOJI: {\n        COLOR_PICKER: '🎨',\n        DARK_MODE: '🌚',\n        END_ZONE: '🗑',\n        LEFT: '👈',\n        LIGHT_MODE: '🌞',\n        LIST_MANAGER: '📚',\n        RIGHT: '👉',\n        TASK_DETAILS: '📌',\n        TIP: '☝️',\n    },\n    FONT_AWESOME: {\n        COLOR_PICKER: 'palette',\n        DARK_MODE: 'moon-stars',\n        END_ZONE: 'trash-alt',\n        LEFT: 'long-arrow-left',\n        LIGHT_MODE: 'sun',\n        LIST_MANAGER: 'book',\n        RIGHT: 'long-arrow-right',\n        TASK_DETAILS: 'thumbtack',\n        TIP: 'gem',\n    },\n};\n\nconst ICON_WEIGHT_OVERRIDES = {\n    palette: 'light',\n};\n\nObject.keys(ICON_PACKS.FONT_AWESOME).forEach(key => {\n    const ICON_NAME = ICON_PACKS.FONT_AWESOME[key];\n    ICON_PACKS.FONT_AWESOME[key] = (\n        <Icon\n            iconName={ICON_NAME}\n            styleName={ICON_WEIGHT_OVERRIDES[ICON_NAME] || 'solid'}\n        />\n    );\n});\n\nconst ICONS = ICON_PACKS.FONT_AWESOME;\n\nICONS.TASK_DEFAULT = '📌';\n\nexport {\n    BORDER_RADIUS,\n    BORDER_WIDTH,\n    buildPalette,\n    BULLET_SIZE,\n    DEFAULT_LIST_PROPS,\n    DURATION_OPTIONS,\n    FONTS,\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    MIN_SLOT_HEIGHT,\n    PRIMARY_COLORS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    SIDEBAR_DEFAULT_WIDTH,\n    SIDEBAR_EXTENDED_WIDTH,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n    UNIFIED_TRANSITION,\n};\n","export default [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\n","export default str => {\n    return typeof str === 'string'\n        ? str.trim().replace(/\\s([^ ]*)$/m, `${String.fromCharCode(160)}$1`)\n        : str;\n};\n","import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { BORDER_RADIUS, GRID_UNIT } from './tokens';\nimport preventWidowsFunction from '../../utils/preventWidows';\n\nconst buildStyles = (propName = '', propValue = null, edges = []) => {\n    if (propValue !== null) {\n        return edges\n            .map(\n                edge =>\n                    `${propName}-${edge}: calc(${propValue} * ${GRID_UNIT});`\n            )\n            .join('');\n    }\n\n    return '';\n};\n\nconst Container = styled.div(\n    ({\n        border = false,\n        margin = null,\n        marginBottom = null,\n        marginLeft = null,\n        marginRight = null,\n        marginTop = null,\n        marginX = null,\n        marginY = null,\n        padding = null,\n        paddingBottom = null,\n        paddingLeft = null,\n        paddingRight = null,\n        paddingTop = null,\n        paddingX = null,\n        paddingY = null,\n        theme,\n        isFlexible = false,\n        isRounded = false,\n        isScrollable = false,\n        onClick = null,\n    }) => `\n        align-self: stretch;\n        border-radius: ${isRounded ? BORDER_RADIUS : ''};\n        box-shadow: ${border ? `0 0 0 1px ${theme.BORDER}` : 'none'};\n        cursor: ${onClick ? 'pointer' : ''};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        overflow: ${isScrollable ? 'auto' : ''};\n\n        ${[\n            buildStyles('margin', margin, ['top', 'right', 'bottom', 'left']),\n            buildStyles('margin', marginBottom, ['bottom']),\n            buildStyles('margin', marginLeft, ['left']),\n            buildStyles('margin', marginRight, ['right']),\n            buildStyles('margin', marginTop, ['top']),\n            buildStyles('margin', marginX, ['right', 'left']),\n            buildStyles('margin', marginY, ['top', 'bottom']),\n            buildStyles('padding', padding, ['top', 'right', 'bottom', 'left']),\n            buildStyles('padding', paddingBottom, ['bottom']),\n            buildStyles('padding', paddingLeft, ['left']),\n            buildStyles('padding', paddingRight, ['right']),\n            buildStyles('padding', paddingTop, ['top']),\n            buildStyles('padding', paddingX, ['right', 'left']),\n            buildStyles('padding', paddingY, ['top', 'bottom']),\n        ].join('')}\n    `\n);\n\nconst Box = forwardRef(\n    ({ children, preventWidows = false, ...otherProps }, ref) => (\n        <Container ref={ref} {...otherProps}>\n            {preventWidows ? preventWidowsFunction(children) : children}\n        </Container>\n    )\n);\n\nexport default Box;\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        justify = 'stretch',\n        spacing = 0,\n        wrapped = false,\n    }) => `\n        align-items: ${align};\n        align-content: ${wrapped ? align : ''};\n        display: flex;\n        flex-direction: ${direction};\n        flex-wrap: ${wrapped ? 'wrap' : 'nowrap'};\n        justify-content: ${justify};\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { BORDER_WIDTH, GRID_UNIT, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isDisabled, theme }) => `\n        position: relative;\n        \n        &:before {\n            background-color: ${theme.BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isDisabled ? 0.25 : 0};\n            pointer-events: ${isDisabled ? 'all' : 'none'};\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 200;\n        }\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})`\n    height: calc(100vh - ${GRID_UNIT});\n    overflow: auto;\n    position: relative;\n    ${UNIFIED_TRANSITION};\n\n    & > * {\n        align-self: stretch;\n    }\n`;\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${theme.BACKGROUND};\n        color: ${theme.TEXT_FADED};\n        border-bottom:\n            ${BORDER_WIDTH} solid ${theme.BORDER};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({\n    children,\n    disabledIf = [false],\n    label,\n    ...otherProps\n}) => {\n    const isDisabled =\n        disabledIf.length && disabledIf.some(condition => condition === true);\n\n    return (\n        <Container isDisabled={isDisabled}>\n            <ColumnHeader>{label}</ColumnHeader>\n            <ContentContainer {...otherProps}>{children}</ContentContainer>\n        </Container>\n    );\n};\n\nexport const PrimaryAppColumn = styled(AppColumn)(\n    ({ theme }) => `\n        box-shadow: 0 0 10px 10px ${theme.SHADOW};\n        border-left: ${BORDER_WIDTH} solid ${theme.BORDER};\n        border-right: \n            ${BORDER_WIDTH} solid ${theme.BORDER};\n        overflow: unset;\n        z-index: 11;\n    `\n);\n\nexport const SecondaryAppColumn = styled(AppColumn)(\n    ({ isTargetedForDrop, theme }) => `\n        background-color: ${theme.SHADED};\n        flex-grow: 1;\n        overflow: auto;\n        position: relative;\n        \n        &:before {\n            box-shadow: ${\n                isTargetedForDrop\n                    ? `0 0 0 5px ${theme.TASK_BORDER_HOVER} inset`\n                    : 'initial'\n            };\n            bottom: 0;\n            content: '';\n            left: 0;\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 1000;\n        }\n    `\n);\n\nexport default AppColumn;\n","export default str => parseInt(str, 10);\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport toInt from '../../utils/toInt';\nimport FlexBox from './FlexBox';\nimport { BORDER_RADIUS, BORDER_WIDTH, UNIFIED_TRANSITION } from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    forwardedAs: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ isInverted = false, theme }) => `\n        align-self: unset;\n        background-color: ${\n            theme[isInverted ? 'BACKGROUND' : 'HIGH_CONTRAST_BACKGROUND']\n        };\n        border: 2px solid transparent;\n        border-radius: ${BORDER_RADIUS};\n        color: ${theme[isInverted ? 'TEXT_FADED' : 'HIGH_CONTRAST_TEXT']};\n        cursor: pointer;\n        transform: translateY(0);\n        ${UNIFIED_TRANSITION};\n        transition-property: border, color;\n        \n        &:focus,\n        &:hover {\n            border-color: ${theme[isInverted ? 'PRIMARY' : 'BACKGROUND']};\n        }\n        &:active {\n            transform: translateY(2px);\n        }\n    `\n);\n\nconst StyledGhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        color: ${theme.TEXT_FADED};\n        position: relative;\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            color: ${theme.TEXT};\n            border-color: transparent;\n        }\n    `\n);\n\nconst animation = keyframes`\n    from {\n        stroke-dashoffset: 0;\n    }\n    to {\n        stroke-dashoffset: 12px;\n    }\n`;\n\nconst TracerSVGElement = styled.svg`\n    overflow: visible;\n    position: absolute;\n`;\n\nconst Tracer = styled.rect(\n    ({ isAnimated, isResizing, theme }) => css`\n        animation-name: ${animation};\n        animation-duration: 0.5s;\n        animation-direction: normal;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-play-state: ${isAnimated ? 'running' : 'paused'};\n        fill: none;\n        stroke: ${isResizing\n            ? 'transparent'\n            : theme[isAnimated ? 'BORDER' : 'DOTTED_LINE']};\n        stroke-width: calc(${BORDER_WIDTH} * 2);\n        stroke-dasharray: 6px, 6px;\n        position: relative;\n        z-index: 1000;\n    `\n);\n\nconst AnimatedTracer = ({ isAnimated, targetElementRef, ...otherProps }) => {\n    const [isResizing, setIsResizing] = useState(true);\n    const [viewBoxDimensions, setViewBoxDimensions] = useState({\n        width: 0,\n        height: 0,\n    });\n\n    useEffect(() => {\n        const measureTracer = () => {\n            if (targetElementRef.current) {\n                const { offsetWidth, offsetHeight } = targetElementRef.current;\n                const { width, height } = viewBoxDimensions;\n\n                if (offsetWidth !== width || offsetHeight !== height) {\n                    setViewBoxDimensions({\n                        width: offsetWidth,\n                        height: offsetHeight,\n                    });\n                }\n            }\n        };\n\n        const timer = setInterval(measureTracer, 100);\n\n        return () => clearInterval(timer);\n    }, [targetElementRef, viewBoxDimensions]);\n\n    useEffect(() => {\n        setIsResizing(true);\n\n        const onComplete = () => setIsResizing(false);\n\n        const timer = setTimeout(onComplete, 100);\n\n        return () => clearTimeout(timer);\n    }, [viewBoxDimensions]);\n\n    return (\n        <TracerSVGElement\n            preserveAspectRatio=\"none\"\n            viewBox={`0 0 ${viewBoxDimensions.width} ${viewBoxDimensions.height}`}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            {...otherProps}\n        >\n            <Tracer\n                width={viewBoxDimensions.width}\n                height={viewBoxDimensions.height}\n                isAnimated={isAnimated}\n                isResizing={isResizing}\n                rx={toInt(BORDER_RADIUS) * 2}\n                x={0}\n                y={0}\n            />\n        </TracerSVGElement>\n    );\n};\n\nexport const GhostButton = ({ children, ...otherProps }) => {\n    const [isAnimated, setIsAnimated] = useState(false);\n\n    const buttonElementRef = useRef(null);\n\n    return (\n        <StyledGhostButton\n            ref={buttonElementRef}\n            onMouseEnter={setIsAnimated.bind(null, true)}\n            onMouseLeave={setIsAnimated.bind(null, false)}\n            {...otherProps}\n        >\n            <AnimatedTracer\n                isAnimated={isAnimated}\n                targetElementRef={buttonElementRef}\n            />\n            {children}\n        </StyledGhostButton>\n    );\n};\n\nexport const ToggleButton = styled(Button).attrs(({ isInverted }) => ({\n    isInverted: !isInverted,\n}))``;\n\nexport default Button;\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, FONTS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: ${FONTS.NORMAL.LINE_HEIGHT};\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${theme.BACKGROUND};\n            color: ${theme.TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: ${FONTS.NORMAL.SIZE};\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        ::placeholder {\n            color: ${theme.PRIMARY};\n            opacity: 1;\n        }\n        ::selection {\n            color: ${theme.HIGH_CONTRAST_TEXT};\n            background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        }\n\n        .markdown {\n            & > * + *,\n            ul > *,\n            ol > * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n\n            h1 {\n                color: ${theme.TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${theme.TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n            }\n\n            * + h1 {\n                margin-top: ${GRID_UNIT};\n            }\n\n            blockquote {\n                border-left: 2px dotted ${theme.TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n\n            code {\n                color: ${theme.PRIMARY};\n                background-color: ${theme.SHADED};\n                display: inline-block;\n                border-radius: 4px;\n                padding: 0 calc(${GRID_UNIT} * 0.25);\n            }\n\n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n\n                // Bullet, centered by line height\n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: calc((${\n                        FONTS.NORMAL.LINE_HEIGHT\n                    } / 2) - (${BULLET_SIZE} / 2));\n                    left: 0;\n                    border: 2px dotted ${theme.TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n\n                li:after {\n                    content: '';\n                    position: absolute;\n                    top: calc(${GRID_UNIT} * -0.5);\n                    bottom: 0;\n                    left: calc((${GRID_UNIT} * -1) + (${BULLET_SIZE} / 2) - 1px);\n                    border-left: 2px solid ${theme.BORDER};\n                    opacity: 0.5;\n                }\n            }\n        }\n    `\n);\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport {\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Transition = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isTransitioning }) => `\n        opacity: ${isTransitioning ? 0 : 1};\n        ${UNIFIED_TRANSITION};\n        transition-duration: ${ROUTE_TRANSITION_ANIMATION_DURATION / 2}ms;\n    `\n);\n\nexport default Transition;\n","import { useState } from 'react';\n\nconst useDrag = dataTypes => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        if (\n            ['input', 'textarea'].includes(\n                document.activeElement.tagName.toLowerCase()\n            )\n        ) {\n            evt.preventDefault();\n            return;\n        }\n\n        Object.keys(dataTypes).map(dataType => {\n            evt.dataTransfer.setData(dataType, dataTypes[dataType]);\n            return dataType;\n        });\n\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import { useRef, useState } from 'react';\n\nconst useDrop = dataTypeHandlers => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        Object.keys(dataTypeHandlers).map(dataType => {\n            const data = evt.dataTransfer.getData(dataType);\n            const payload =\n                data.length === 0\n                    ? null\n                    : isNaN(data)\n                    ? data\n                    : parseFloat(data);\n\n            if (payload !== null) {\n                const dataTypeHandler = dataTypeHandlers[dataType];\n                dataTypeHandler(payload, evt);\n            }\n\n            return dataType;\n        });\n\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import { useEffect } from 'react';\nimport mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nconst buildKeyboardShortcutHandler = (keyMap, scopedToElementRef) => evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    const currentKeySequence = uniq(keysDown)\n        .map(keyDown => keyDown.toLowerCase())\n        .sort()\n        .join('+');\n\n    mapKeys(keyMap, (handler, sequence) => {\n        const shortcutKeySequence = sequence\n            .split('+')\n            .map(key => key.trim().toLowerCase())\n            .sort()\n            .join('+');\n\n        if (currentKeySequence === shortcutKeySequence) {\n            const scopedToElement = scopedToElementRef !== null;\n            const scopedElement = scopedToElement && scopedToElementRef.current;\n            const scopedToAnInput = scopedElement && isInput(scopedElement);\n            const firedOnAnInput = isInput(evt.target);\n\n            if (\n                (scopedElement && evt.target === scopedElement) ||\n                (firedOnAnInput && !scopedToAnInput)\n            ) {\n                evt.stopPropagation();\n            }\n\n            if (\n                (firedOnAnInput && !scopedToAnInput) ||\n                (scopedToElement && !scopedElement)\n            ) {\n                return false;\n            }\n\n            return handler(evt);\n        }\n    });\n};\n\nconst useKeyboardShortcuts = (keyMap, targetElementRef = null) => {\n    useEffect(() => {\n        const onKeyDown = buildKeyboardShortcutHandler(\n            keyMap,\n            targetElementRef\n        );\n\n        document.addEventListener('keydown', onKeyDown);\n\n        return () => document.removeEventListener('keydown', onKeyDown);\n    }, [keyMap, targetElementRef]);\n};\n\nexport default useKeyboardShortcuts;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport Box from './atoms/Box';\nimport { ToggleButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    GRID_UNIT,\n    ICONS,\n    PRIMARY_COLORS,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'flex-end',\n    paddingX: 0.25,\n    paddingY: 0.25,\n})``;\n\nconst StyledWindowShader = styled.div`\n    bottom: 0;\n    left: 0;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1099;\n`;\n\nconst WindowShader = ({ children, ...otherProps }) => {\n    return ReactDOM.createPortal(\n        <StyledWindowShader {...otherProps}>{children}</StyledWindowShader>,\n        document.body\n    );\n};\n\nconst StyledColorPaletteContainer = styled(FlexBox).attrs({\n    isRounded: true,\n    paddingX: 0.5,\n    paddingY: 0.5,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${theme.BACKGROUND};\n        box-shadow: 0 0 10px 10px ${theme.SHADOW};\n        position: fixed;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        z-index: 1100;\n\n        &:before {\n            background-color: ${theme.SHADOW};\n            position: fixed;\n            width: 100vw;\n            height: 100vh;\n        }\n    `\n);\n\nconst ColorPaletteContainer = ({ children, ...otherProps }) => {\n    return ReactDOM.createPortal(\n        <StyledColorPaletteContainer {...otherProps}>\n            {children}\n        </StyledColorPaletteContainer>,\n        document.body\n    );\n};\n\nconst ColorChip = styled(Box).attrs({ isFlexible: true })`\n    border-radius: ${BORDER_RADIUS};\n    height: calc(${GRID_UNIT} * 2);\n    transform: scale(1);\n    width: calc(${GRID_UNIT} * 2);\n    ${UNIFIED_TRANSITION};\n\n    &:hover {\n        transform: scale(1.1);\n    }\n`;\n\nconst ColorPicker = ({ palette, onPickColor, ...otherProps }) => {\n    const [isPickingColor, setIsPickingColor] = useState(false);\n\n    const showPicker = () => {\n        setIsPickingColor(true);\n    };\n\n    const hidePicker = () => {\n        setIsPickingColor(false);\n    };\n\n    return (\n        <Container {...otherProps}>\n            <ToggleButton isInverted={!isPickingColor} onClick={showPicker}>\n                {ICONS.COLOR_PICKER}\n            </ToggleButton>\n            {isPickingColor && (\n                <>\n                    <ColorPaletteContainer>\n                        {PRIMARY_COLORS.map(color => {\n                            return (\n                                <ColorChip\n                                    key={color}\n                                    style={{\n                                        backgroundColor: color,\n                                    }}\n                                    onClick={onPickColor.bind(null, color)}\n                                />\n                            );\n                        })}\n                    </ColorPaletteContainer>\n                    <WindowShader onClick={hidePicker} />\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default styled(ColorPicker)``;\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport { BORDER_RADIUS, GRID_UNIT, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditable, isEditing, theme, tracerColor }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n\n        // Tracing element\n        &:before {\n            border:\n                ${\n                    isEditing\n                        ? 'none'\n                        : `2px dashed ${tracerColor || theme.DOTTED_LINE}`\n                };\n            box-shadow:\n                ${\n                    isEditing\n                        ? `0 0 0 2px ${tracerColor || theme.PRIMARY}`\n                        : `0 0 0 0 ${tracerColor || theme.PRIMARY}`\n                };\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.25 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.25 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n        }\n\n        &:focus,\n        &:hover {\n            &:before {\n                opacity: ${isEditable ? 1 : 0};\n            }\n        }\n    `\n);\n\nconst StyledTextarea = styled.textarea(\n    ({ theme }) => `\n        display: block;\n        height: 100%;\n        width: 100%;\n\n        ::selection {\n            background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n            color: white;\n        }\n    `\n);\n\nconst Canvas = styled(Box)(\n    ({ isEmpty }) => `\n        opacity: ${isEmpty ? 0.6 : 1};\n    `\n);\n\nconst EditInPlace = ({\n    canvasStyles = {},\n    doubleClickToEdit = false,\n    isEditable = true,\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    tracerColor = null,\n    value = '',\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const containerElementRef = useRef(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(\n        () => {\n            setBufferedValue(value);\n        },\n        [value]\n    );\n\n    useEffect(\n        () => {\n            if (isEditing && inputRef.current) {\n                inputRef.current.select();\n                inputRef.current.focus();\n            }\n        },\n        [inputRef, isEditing]\n    );\n\n    useEffect(\n        () => {\n            const el = measuringElementRef.current;\n            if (el) {\n                setMeasuringElementHeight(el.offsetHeight);\n            }\n        },\n        [bufferedValue, isEditing, measuringElementRef]\n    );\n\n    const handleClick = useCallback(\n        () => {\n            if (isEditable && !isEditing) {\n                setBufferedValue(value);\n                setIsEditing(true);\n            }\n        },\n        [isEditable, isEditing, setBufferedValue, setIsEditing, value]\n    );\n\n    useEffect(\n        () => {\n            if (isRemotelyActivated === true) {\n                handleClick();\n            }\n        },\n        [handleClick, isRemotelyActivated]\n    );\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const textareaKeyMap = useMemo(\n        () => {\n            const saveAndClose = () => {\n                onSave(bufferedValue);\n                setIsEditing(false);\n            };\n\n            const close = () => {\n                setBufferedValue(value);\n                setIsEditing(false);\n            };\n\n            const getIndentedSelection = ({\n                selectionStart,\n                selectionEnd,\n                tabString,\n                outdent = false,\n            }) => {\n                const tabSize = tabString.length;\n                const textBeforeSelection = bufferedValue.substring(\n                    0,\n                    selectionStart\n                );\n                const textAfterSelection = bufferedValue.substring(\n                    selectionEnd\n                );\n                const textWithinSelection = bufferedValue.substring(\n                    selectionStart,\n                    selectionEnd\n                );\n\n                let newBuffer, newSelectionStart, newSelectionEnd;\n\n                if (outdent) {\n                    const trimmedTextWithinSelection = textWithinSelection.trimStart();\n                    const textBeforeTrimmedSelection = bufferedValue.substring(\n                        0,\n                        selectionEnd - trimmedTextWithinSelection.length\n                    );\n                    const tailSample = textBeforeTrimmedSelection.substring(\n                        textBeforeTrimmedSelection.length - tabSize\n                    );\n                    const isIndented = tailSample === tabString;\n\n                    if (!isIndented) {\n                        return {\n                            newBuffer: bufferedValue,\n                            newSelectionStart: selectionStart,\n                            newSelectionEnd: selectionEnd,\n                        };\n                    }\n\n                    newBuffer =\n                        textBeforeTrimmedSelection.substring(\n                            0,\n                            textBeforeTrimmedSelection.length - tabSize\n                        ) +\n                        trimmedTextWithinSelection +\n                        textAfterSelection;\n\n                    newSelectionStart =\n                        selectionEnd -\n                        trimmedTextWithinSelection.length -\n                        tabSize;\n\n                    newSelectionEnd =\n                        newSelectionStart + trimmedTextWithinSelection.length;\n                } else {\n                    newBuffer =\n                        textBeforeSelection +\n                        tabString +\n                        textWithinSelection +\n                        textAfterSelection;\n\n                    newSelectionStart = selectionStart + tabSize;\n                    newSelectionEnd = selectionEnd + tabSize;\n                }\n\n                return {\n                    newBuffer,\n                    newSelectionStart,\n                    newSelectionEnd,\n                };\n            };\n\n            const handleIndentation = (evt, options = { outdent: false }) => {\n                if (!isSingleLine) {\n                    const el = evt.target;\n                    const { selectionEnd, selectionStart } = el;\n\n                    const tabString = '  ';\n\n                    const {\n                        newBuffer,\n                        newSelectionStart,\n                        newSelectionEnd,\n                    } = getIndentedSelection({\n                        selectionStart,\n                        selectionEnd,\n                        tabString,\n                        outdent: options.outdent,\n                    });\n\n                    console.log({\n                        newBuffer,\n                        newSelectionStart,\n                        newSelectionEnd,\n                    });\n\n                    setBufferedValue(newBuffer);\n\n                    el.selectionStart = newSelectionStart;\n                    el.selectionEnd = newSelectionEnd;\n                }\n            };\n\n            return {\n                'cmd + escape': close,\n                'shift + escape': close,\n                'cmd + enter': saveAndClose,\n                'shift + enter': saveAndClose,\n                tab: evt => {\n                    if (!isSingleLine) {\n                        evt.preventDefault();\n                        handleIndentation(evt);\n                    }\n                },\n                'shift + tab': evt => {\n                    if (!isSingleLine) {\n                        evt.preventDefault();\n                        handleIndentation(evt, { outdent: true });\n                    }\n                },\n                escape: saveAndClose,\n                enter: evt => {\n                    if (\n                        evt.target.tagName.toLowerCase() === 'textarea' &&\n                        isSingleLine\n                    ) {\n                        saveAndClose();\n                        evt.preventDefault();\n                        return false;\n                    }\n                },\n            };\n        },\n        [bufferedValue, onSave, isSingleLine, value]\n    );\n\n    useKeyboardShortcuts(textareaKeyMap, inputRef);\n\n    const keyMap = useMemo(\n        () => {\n            const enterEditMode = evt => {\n                if (evt.target === containerElementRef.current) {\n                    evt.preventDefault();\n                    handleClick();\n                }\n            };\n\n            return {\n                enter: enterEditMode,\n            };\n        },\n        [handleClick, containerElementRef]\n    );\n\n    useKeyboardShortcuts(keyMap, containerElementRef);\n\n    return (\n        <Container\n            isEditable={isEditable}\n            isEditing={isEditing}\n            ref={containerElementRef}\n            tabIndex={0}\n            tracerColor={tracerColor}\n            onClick={!doubleClickToEdit ? handleClick : null}\n            onDoubleClick={doubleClickToEdit ? handleClick : null}\n            {...otherProps}\n        >\n            <Canvas isEmpty={isEmpty} style={{ ...canvasStyles }}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <StyledTextarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                height: `${measuringElementHeight}px`,\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Canvas>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React, { useCallback, useMemo, useRef } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    buildPalette,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport ColorPicker from './ColorPicker';\nimport EditInPlace from './EditInPlace';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    direction: 'column',\n    justify: 'flex-start',\n    spacing: 0.5,\n})(\n    ({ isActive, isTargetedForDrop, theme }) => `\n        background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 2px ${isActive ? theme.SHADED : 'transparent'},\n            0 0 0 4px ${\n                isActive\n                    ? theme[\n                          isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                      ]\n                    : 'transparent'\n            };\n        color: ${theme.HIGH_CONTRAST_TEXT};\n        cursor: pointer;\n        overflow: hidden;\n        position: relative;\n        transform: scale(${isTargetedForDrop ? 1.1 : 1});\n        width: 100%;\n        height: 100%;\n        ${UNIFIED_TRANSITION};\n        \n        &:hover {\n            box-shadow:\n                0 0 0 2px ${theme.SHADED},\n                0 0 0 4px ${\n                    theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER']\n                };\n        }\n        \n        &:focus {\n            box-shadow:\n                0 0 0 2px ${theme.SHADED},\n                0 0 0 4px ${theme.TASK_BORDER_ACTIVE};\n        }\n        \n        &:active {\n            box-shadow:\n                0 0 0 2px ${theme.SHADED},\n                0 0 0 4px ${theme.TASK_BORDER_ACTIVE};\n        }\n    `\n);\n\nexport const GhostListCard = styled(GhostButton).attrs({\n    align: 'center',\n    justify: 'center',\n})`\n    height: ${LIST_CARD_HEIGHT};\n    margin-bottom: ${LIST_CARD_SPACING};\n    width: ${LIST_CARD_WIDTH};\n`;\n\nexport const ListCardContainer = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n    justify: 'flex-start',\n    padding: 1,\n    spacing: LIST_CARD_SPACING,\n    wrapped: true,\n})(\n    ({ theme }) => `\n        align-content: flex-start;\n        background-color: ${theme.SHADED};\n        height: 100%;\n        overflow: auto;\n        padding-bottom: calc(${GRID_UNIT} * 1.5);\n        \n        & > * {\n            height: ${LIST_CARD_HEIGHT};\n            margin-bottom: ${LIST_CARD_SPACING};\n            margin-left: ${LIST_CARD_SPACING};\n            width: ${LIST_CARD_WIDTH};\n            \n            :nth-child(3n + 1) {\n                margin-left: 0;\n            }\n        }\n    `\n);\n\nconst ListCard = ({\n    appActions,\n    appData,\n    listId,\n    isEditable = true,\n    ...otherProps\n}) => {\n    const { onUpdateList, onUpdateTask } = appActions;\n\n    const { isCreatingList, lists, selectedListId, tasks, theme } = appData;\n\n    const list = lists.find(list => list.id === listId);\n\n    const listPalette = buildPalette(theme, list.color_code);\n\n    const tasksInList = tasks.filter(\n        task => task.list_id === listId && !task.isComplete\n    );\n\n    const isActive = listId === selectedListId;\n\n    const listCardElementRef = useRef(null);\n\n    const [dragProps] = useDrag({ 'list-id': listId });\n\n    const [dropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const targetListId = toInt(evt.currentTarget.dataset.listId);\n            if (targetListId) {\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    list_id: targetListId,\n                });\n            }\n        },\n    });\n\n    const triggerClick = useCallback(evt => {\n        evt.preventDefault();\n        evt.target.click();\n    }, []);\n\n    const setListColor = colorCode =>\n        onUpdateList(listId, { color_code: colorCode });\n\n    const keyMap = useMemo(\n        () => ({\n            enter: triggerClick,\n            space: triggerClick,\n        }),\n        [triggerClick]\n    );\n\n    useKeyboardShortcuts(keyMap, listCardElementRef);\n\n    return (\n        <ThemeProvider theme={listPalette}>\n            <Container\n                data-list-id={listId}\n                isActive={isActive}\n                ref={listCardElementRef}\n                tabIndex={0}\n                title={COPY.TIPS.MOVE_BETWEEN_LISTS}\n                {...dragProps}\n                {...dropProps}\n                {...otherProps}\n            >\n                <EditInPlace\n                    isEditable={isEditable}\n                    isRemotelyActivated={\n                        isCreatingList && selectedListId === listId\n                    }\n                    marginX={0.75}\n                    marginTop={0.5}\n                    style={{\n                        alignSelf: 'stretch',\n                        flexGrow: 0,\n                        flexShrink: 0,\n                    }}\n                    tracerColor={listPalette.HIGH_CONTRAST_TEXT}\n                    value={list.label}\n                    onSave={newLabel => {\n                        onUpdateList(listId, { label: newLabel });\n                    }}\n                />\n                <FlexBox\n                    direction=\"column\"\n                    isFlexible\n                    isScrollable\n                    spacing={0.25}\n                >\n                    {tasksInList.map(task => (\n                        <FlexBox\n                            key={task.id}\n                            align=\"flex-start\"\n                            paddingX={0.25}\n                            spacing={0.25}\n                            style={{\n                                fontSize: `calc(${FONTS.NORMAL.SIZE} / 2)`,\n                            }}\n                        >\n                            <span>{task.icon}</span>\n                            <span>{task.label}</span>\n                        </FlexBox>\n                    ))}\n                </FlexBox>\n                <ColorPicker listId={listId} onPickColor={setListColor} />\n            </Container>\n        </ThemeProvider>\n    );\n};\n\nexport default ListCard;\n","import React from 'react';\nimport { COPY } from './atoms/tokens';\nimport ListCard, { GhostListCard, ListCardContainer } from './ListCard';\n\nconst ListManager = ({ appActions, appData, lists }) => {\n    const { onCreateList, onSelectList } = appActions;\n\n    return (\n        <ListCardContainer>\n            <GhostListCard onClick={() => onCreateList()}>\n                {COPY.CREATE_LIST_LABEL}\n            </GhostListCard>\n            {lists.map(list => (\n                <ListCard\n                    key={list.id}\n                    appActions={appActions}\n                    appData={appData}\n                    listId={list.id}\n                    onClick={() => onSelectList(list.id)}\n                />\n            ))}\n        </ListCardContainer>\n    );\n};\n\nexport default ListManager;\n","import React from 'react';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\n\nconst TaskListToggleButton = ({ isSidebarOpen, onChangeIsSidebarOpen }) => (\n    <ToggleButton\n        isActive={isSidebarOpen}\n        title={COPY.TIPS.TOGGLE_TASK_LIST}\n        onClick={() => onChangeIsSidebarOpen(!isSidebarOpen)}\n    >\n        {isSidebarOpen ? ICONS.LEFT : ICONS.RIGHT}\n    </ToggleButton>\n);\n\nexport default TaskListToggleButton;\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs(({ isCollapsed = false }) => ({\n    align: 'center',\n    justify: isCollapsed ? 'center' : 'space-between',\n    paddingX: isCollapsed ? 0 : 0.5,\n    spacing: 0.5,\n}))(\n    ({ theme }) => `\n        background-color: ${theme.BACKGROUND};\n        color: ${theme.TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${theme.TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React, { useEffect, useState } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport { SecondaryAppColumn } from './AppColumn';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\nimport SidebarToggleButton from './TaskListToggleButton';\nimport ToolBar from './ToolBar';\n\nconst Sidebar = ({ appActions, appData, children, ...otherProps }) => {\n    const { onChangeIsSidebarOpen, onChangeTheme, onUpdateTask } = appActions;\n\n    const {\n        isShowingTrashContents,\n        isSidebarOpen,\n        lists,\n        selectedListId,\n        theme,\n    } = appData;\n\n    const [isTaskListForcedOpen, setIsTaskListForcedOpen] = useState(false);\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const [sidebarDropProps] = useDrop({\n        'task-id': taskId => {\n            onUpdateTask(taskId, {\n                list_id: selectedListId,\n                scheduled: false,\n            });\n        },\n    });\n\n    useEffect(() => {\n        if (!isSidebarOpen && sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(true);\n            onChangeIsSidebarOpen(true);\n            return;\n        }\n\n        if (isTaskListForcedOpen && !sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(false);\n            onChangeIsSidebarOpen(false);\n        }\n    }, [\n        sidebarDropProps.isTargetedForDrop,\n        isTaskListForcedOpen,\n        isSidebarOpen,\n        setIsTaskListForcedOpen,\n        onChangeIsSidebarOpen,\n    ]);\n\n    return (\n        <SecondaryAppColumn\n            label={\n                !isSidebarOpen\n                    ? ''\n                    : isShowingTrashContents\n                    ? COPY.LABEL_FOR_TRASHED_TASKS\n                    : selectedList.label\n            }\n            {...sidebarDropProps}\n            {...otherProps}\n        >\n            {!isSidebarOpen ? (\n                <ToolBar isCollapsed>\n                    <SidebarToggleButton\n                        isSidebarOpen={isSidebarOpen}\n                        onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                    />\n                </ToolBar>\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={COPY.TIPS.TOGGLE_DARK_MODE}\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT'\n                                ? ICONS.DARK_MODE\n                                : ICONS.LIGHT_MODE}\n                        </ToggleButton>\n                        <SidebarToggleButton\n                            isSidebarOpen={isSidebarOpen}\n                            onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                        />\n                    </ToolBar>\n\n                    {children}\n                </>\n            )}\n        </SecondaryAppColumn>\n    );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected, theme }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0.75};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n     \n        &:hover {\n            border-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map((option, optionIndex) => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(\n                              renderOption(option, optionIndex),\n                              optionIndex\n                          )\n                        : renderOption(option, optionIndex)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COPY,\n    ICONS,\n    DURATION_OPTIONS,\n    FONTS,\n    BORDER_WIDTH,\n} from './atoms/tokens';\n\nconst TaskHeader = styled(FlexBox).attrs({\n    forwardedAs: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${theme.SHADED};\n        font-size: ${FONTS.LARGE.SIZE};\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    align-self: center;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst DurationOptionBar = styled(OptionBar)(\n    ({ theme }) => `\n        background-color: ${theme.SHADED};\n        border-top: ${BORDER_WIDTH} solid ${theme.BACKGROUND};\n    `\n);\n\nconst TaskDetails = ({ appActions = {}, appData = {} }) => {\n    const { onUpdateTask } = appActions;\n    const { isCreatingTask, selectedTaskId, tasks } = appData;\n    const activeTask = tasks.find(task => task.id === selectedTaskId) || {};\n    const { icon, id, label, notes, scheduled_minutes } = activeTask;\n    const isEmpty = !activeTask.id;\n\n    const handleUpdateTask = useCallback(\n        (field, value) => onUpdateTask(id, { [field]: value }),\n        [id, onUpdateTask]\n    );\n\n    const handleSaveDuration = useCallback(\n        newDuration => handleUpdateTask('scheduled_minutes', newDuration),\n        [handleUpdateTask]\n    );\n\n    const handleSaveIcon = useCallback(\n        newNotes => handleUpdateTask('icon', newNotes),\n        [handleUpdateTask]\n    );\n\n    const handleSaveLabel = useCallback(\n        newLabel => handleUpdateTask('label', newLabel),\n        [handleUpdateTask]\n    );\n\n    const handleSaveNotes = useCallback(\n        newNotes => handleUpdateTask('notes', newNotes),\n        [handleUpdateTask]\n    );\n\n    return (\n        !isEmpty && (\n            <>\n                <TaskHeader>\n                    <TaskHeaderLabel>\n                        <EditInPlace\n                            isRemotelyActivated={isCreatingTask}\n                            placeholder={COPY.EMPTY_LABEL}\n                            value={label}\n                            onSave={handleSaveLabel}\n                        />\n                    </TaskHeaderLabel>\n                    <TaskHeaderIcon>\n                        <EditInPlace\n                            placeholder={ICONS.TASK_DEFAULT}\n                            value={icon}\n                            onSave={handleSaveIcon}\n                        />\n                    </TaskHeaderIcon>\n                </TaskHeader>\n\n                <EditInPlace\n                    isFlexible\n                    isMultiLine\n                    margin={1}\n                    placeholder={COPY.EMPTY_NOTES}\n                    render={rawNotes => (\n                        <div\n                            className=\"markdown\"\n                            dangerouslySetInnerHTML={{\n                                __html: marked(rawNotes),\n                            }}\n                        />\n                    )}\n                    canvasStyles={{\n                        bottom: 0,\n                        fontSize: FONTS.LARGE.SIZE,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                    value={notes}\n                    onSave={handleSaveNotes}\n                />\n\n                <DurationOptionBar\n                    options={DURATION_OPTIONS}\n                    renderSelectedOption={option => <span>{option} mins</span>}\n                    selectedOption={scheduled_minutes}\n                    title={COPY.TIPS.SETTING_DURATION}\n                    onChange={handleSaveDuration}\n                />\n            </>\n        )\n    );\n};\n\nexport default TaskDetails;\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","import React, { memo, useState } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    buildPalette,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, theme }) => `\n        background-color: ${theme.BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 ${isActive ? 2 : 1}px\n            ${theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER']};\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        width: 100%;\n        z-index: ${isActive ? 100 : 10};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n            \n        & ::selection {\n            color: ${theme.HIGH_CONTRAST_BACKGROUND};\n            background-color: ${theme.HIGH_CONTRAST_TEXT};\n        }\n\n        &:before {\n            background-color: ${theme.PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${\n                theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER']\n            };\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${theme.TASK_BORDER_ACTIVE};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${theme.TASK_BORDER_ACTIVE} inset;\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n})(\n    ({ duration, isActive, isMouseOver, theme }) => `\n        color: ${theme[isActive || isMouseOver ? 'TEXT' : 'TEXT_FADED']};\n        min-height: ${minutesToHeight(Math.min(30, duration))};\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ duration }) => `\n        font-size: ${duration <= 15 ? FONTS.NORMAL.SIZE : FONTS.LARGE.SIZE};\n        height: ${minutesToHeight(Math.min(30, duration))};\n        width: auto;\n    `\n);\n\nexport const TaskCardContainer = styled(FlexBox).attrs({\n    isFlexible: true,\n    justify: 'flex-start',\n    direction: 'column',\n    spacing: 0.5,\n    padding: 1,\n})`\n    height: 100%;\n`;\n\nconst TaskCard = ({ appActions, appData, task, ...otherProps }) => {\n    const [isMouseOver, setIsMouseOver] = useState(false);\n\n    const { onImmediatelySelectTask, onTransitionToTask } = appActions;\n\n    const { isShowingListManager, lists, selectedTaskId, theme } = appData;\n\n    const { icon, id, label, list_id, scheduled_minutes } = task;\n\n    const listColorCode = lists.find(list => list.id === list_id).color_code;\n\n    const cardPalette = buildPalette(theme, listColorCode);\n\n    const isActive = task.id === selectedTaskId;\n\n    const [dragProps] = useDrag({ 'task-id': id });\n\n    const handleClick = () => {\n        if (isShowingListManager) {\n            onImmediatelySelectTask(id);\n            return;\n        }\n\n        onTransitionToTask(id);\n    };\n\n    const toggleIsMouseOver = () => setIsMouseOver(!isMouseOver);\n\n    return (\n        <ThemeProvider theme={cardPalette}>\n            <Container\n                data-task-id={id}\n                duration={scheduled_minutes}\n                isActive={isActive}\n                tabIndex={0}\n                title={COPY.TIPS.MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE}\n                onClick={handleClick}\n                onMouseEnter={toggleIsMouseOver}\n                onMouseLeave={toggleIsMouseOver}\n                {...dragProps}\n                {...otherProps}\n            >\n                <CardLabel\n                    duration={scheduled_minutes}\n                    isActive={isActive}\n                    isMouseOver={isMouseOver}\n                >\n                    {label}\n                </CardLabel>\n                <CardIcon duration={scheduled_minutes}>{icon}</CardIcon>\n            </Container>\n        </ThemeProvider>\n    );\n};\n\nexport default memo(TaskCard);\n","import React, { memo } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\n\nconst TaskList = ({ appActions, appData, ...otherProps }) => {\n    const { onChangeTaskPosition, onCreateTask } = appActions;\n\n    const { incompleteTasks, lists, selectedListId } = appData;\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const unscheduledTasks = incompleteTasks.filter(\n        task =>\n            !task.scheduled &&\n            task.list_id === selectedListId &&\n            !selectedList.isArchived\n    );\n\n    const [taskCardDropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n            const droppedOnTaskIndex = appData.tasks.findIndex(\n                task => task.id === droppedOnTaskId\n            );\n            onChangeTaskPosition(taskId, droppedOnTaskIndex);\n        },\n    });\n\n    return (\n        <TaskCardContainer {...otherProps}>\n            <GhostButton\n                style={{\n                    height: minutesToHeight(30),\n                }}\n                title={COPY.TIPS.CREATE_NEW_TASK}\n                onClick={() => onCreateTask()}\n            >\n                {COPY.CREATE_TASK_LABEL}\n            </GhostButton>\n            {unscheduledTasks.map(task => (\n                <TaskCard\n                    key={task.id}\n                    appActions={appActions}\n                    appData={appData}\n                    task={task}\n                    {...taskCardDropProps}\n                />\n            ))}\n        </TaskCardContainer>\n    );\n};\n\nexport default memo(TaskList);\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${isTargetedForDrop ? `4px dotted ${theme.PRIMARY}` : ''};\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop({\n            'task-id': taskId =>\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    scheduled: true,\n                    scheduled_time: newTime,\n                }),\n        });\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COPY, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: COPY.LABEL_FOR_TIMELINE,\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${theme.TASK_BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, theme.TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${theme.BORDER};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            opacity: ${isFaded ? 0.5 : 1};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop({ 'task-id': () => {} });\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY, GRID_UNIT, ICONS, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst DROP_ZONE_SIZE = `calc(${GRID_UNIT} * 4)`;\n\nconst pulsingAnimation = ({ from, to }) => keyframes`\n    0% {\n        transform: scale(${from});\n    }\n    100% {\n        transform: scale(${to});\n    }\n`;\n\nconst AnimatedContainer = styled(FlexBox)(\n    ({ isDraggingTask, isTargetedForDrop }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop\n            ? pulsingAnimation({ from: 1.6, to: 2.4 })\n            : isDraggingTask\n            ? pulsingAnimation({ from: 1, to: 1.6 })\n            : 'unset'};\n        animation-timing-function: ease-in-out;\n        bottom: 0;\n        height: ${DROP_ZONE_SIZE};\n        position: fixed;\n        right: 0;\n        transform-origin: bottom right;\n        transform: scale(${isDraggingTask ? 1.5 : 1});\n        width: ${DROP_ZONE_SIZE};\n        z-index: 1000;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst TrashDropZone = styled(AnimatedContainer)(\n    ({ isDraggingTask }) => `\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n    `\n);\n\nconst TrashIconContainer = styled(AnimatedContainer).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 1,\n})(\n    ({ isDraggingTask, isShowingTrashContents, isTargetedForDrop, theme }) => `\n        color: ${\n            isTargetedForDrop\n                ? '#FF0000'\n                : theme[\n                      isDraggingTask || isShowingTrashContents\n                          ? 'PRIMARY'\n                          : 'TEXT_FADED'\n                  ]\n        };\n        cursor: pointer;\n        font-size: 3rem;\n        opacity: ${!isTargetedForDrop && !isDraggingTask ? 0.6 : 1};\n        \n        &:hover {\n            color: ${theme.PRIMARY};\n        }\n    `\n);\n\nconst Trash = ({ appActions, appData, ...otherProps }) => {\n    const {\n        onChangeIsShowingTrashContents,\n        deleteTask,\n        onSelectList,\n        onUpdateList,\n    } = appActions;\n\n    const {\n        isDraggingTask,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n    } = appData;\n\n    const [dropProps] = useDrop({\n        'list-id': listId => {\n            if (selectedListId === listId) {\n                const firstUnarchivedList = lists.find(\n                    list => list.id !== listId && !list.isArchived\n                );\n\n                if (firstUnarchivedList) {\n                    onSelectList(firstUnarchivedList.id);\n                }\n            }\n\n            onUpdateList(listId, {\n                isArchived: true,\n            });\n        },\n        'task-id': deleteTask,\n    });\n\n    const handleClick = () =>\n        onChangeIsShowingTrashContents(!isShowingTrashContents);\n\n    return (\n        <>\n            <TrashIconContainer\n                isDraggingTask={isDraggingTask}\n                isShowingTrashContents={isShowingTrashContents}\n                isTargetedForDrop={dropProps.isTargetedForDrop}\n                title={COPY.TIPS.DELETE_TASK}\n                onClick={handleClick}\n            >\n                {ICONS.END_ZONE}\n            </TrashIconContainer>\n            <TrashDropZone\n                isDraggingTask={isDraggingTask}\n                {...dropProps}\n                {...otherProps}\n            />\n        </>\n    );\n};\n\nexport default Trash;\n","import random from 'lodash/random';\nimport React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport Icon from './atoms/Icon';\nimport { GRID_UNIT } from './atoms/tokens';\n\nconst animation = ({ minOpacity, translationDistance }) => keyframes`\n    0% {\n        transform: translateY(-${translationDistance}px);\n        opacity: ${minOpacity};\n    }\n    100% {\n        transform: translateY(${translationDistance}px);\n        opacity: 1;\n    }\n`;\n\nconst Container = styled.div(\n    () => css`\n        animation-direction: alternate;\n        animation-duration: ${random(300, 400)}ms;\n        animation-iteration-count: infinite;\n        animation-name: ${animation({\n            translationDistance: random(0.5, 2),\n            minOpacity: random(0.75, 0.9),\n        })};\n        animation-timing-function: ease-in-out;\n        position: relative;\n\n        & > * {\n            width: 100%;\n        }\n    `\n);\n\nconst RestoreButton = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 0.25,\n})(\n    ({ theme }) => `\n        background-color: ${theme.NEUTRAL_BACKGROUND};\n        border: 2px solid ${theme.NEUTRAL_FOREGROUND};\n        border-radius: 100px;\n        color: ${theme.NEUTRAL_FOREGROUND};\n        cursor: pointer;\n        height: calc(${GRID_UNIT});\n        position: absolute;\n        right: 0;\n        top: 0;\n        transform: translate(50%, -50%);\n        width: calc(${GRID_UNIT});\n        z-index: 1000;\n        \n        &:hover {\n            background-color: ${theme.NEUTRAL_FOREGROUND};\n            border-color: ${theme.NEUTRAL_BACKGROUND};\n            color: ${theme.NEUTRAL_BACKGROUND};\n        }\n    `\n);\n\nconst TrashedCard = ({\n    children,\n    restoreButtonTitle,\n    onRestore,\n    ...otherProps\n}) => (\n    <Container {...otherProps}>\n        <RestoreButton title={restoreButtonTitle} onClick={onRestore}>\n            <Icon iconName=\"reply\" />\n        </RestoreButton>\n        {children}\n    </Container>\n);\n\nexport default TrashedCard;\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY, LIST_CARD_WIDTH } from './atoms/tokens';\nimport ListCard, { ListCardContainer } from './ListCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedLists = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateList } = appActions;\n\n    const { lists } = appData;\n\n    const deletedLists = lists.filter(list => list.isArchived);\n\n    const hasDeletedLists = deletedLists.length;\n\n    const handleRestoreList = listId =>\n        onUpdateList(listId, { isArchived: false });\n\n    return (\n        <>\n            {!hasDeletedLists && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_LISTS}\n                </FlexBox>\n            )}\n            {!!hasDeletedLists && (\n                <ListCardContainer {...otherProps}>\n                    {deletedLists.map(list => (\n                        <TrashedCard\n                            key={list.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_LIST}\n                            style={{ width: LIST_CARD_WIDTH }}\n                            onRestore={handleRestoreList.bind(this, list.id)}\n                        >\n                            <ListCard\n                                appActions={appActions}\n                                appData={appData}\n                                isEditable={false}\n                                listId={list.id}\n                                style={{ marginLeft: 0 }}\n                            />\n                        </TrashedCard>\n                    ))}\n                </ListCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedLists);\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedTasks = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateTask } = appData;\n\n    const { tasks } = appData;\n\n    const deletedTasks = tasks.filter(task => task.isComplete);\n\n    const hasDeletedTasks = deletedTasks.length;\n\n    const handleRestoreTask = taskId =>\n        onUpdateTask(taskId, { isComplete: false });\n\n    return (\n        <>\n            {!hasDeletedTasks && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_TASKS}\n                </FlexBox>\n            )}\n            {!!hasDeletedTasks && (\n                <TaskCardContainer {...otherProps}>\n                    {deletedTasks.map(task => (\n                        <TrashedCard\n                            key={task.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_TASK}\n                            style={{ width: '100%' }}\n                            onRestore={handleRestoreTask.bind(this, task.id)}\n                        >\n                            <TaskCard\n                                appActions={appActions}\n                                appData={appData}\n                                isActive\n                                task={task}\n                            />\n                        </TrashedCard>\n                    ))}\n                </TaskCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedTasks);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                ![null, 'undefined'].includes(savedState)\n                    ? JSON.parse(savedState)\n                    : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import sample from 'lodash/sample';\nimport sortBy from 'lodash/sortBy';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { StyleSheetManager, ThemeProvider } from 'styled-components';\nimport { PrimaryAppColumn } from './components/AppColumn';\nimport { ToggleButton } from './components/atoms/Button';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport {\n    buildPalette,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    PRIMARY_COLORS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    SIDEBAR_DEFAULT_WIDTH,\n    SIDEBAR_EXTENDED_WIDTH,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\nimport Transition from './components/atoms/Transition';\nimport ListManager from './components/ListManager';\nimport Sidebar from './components/Sidebar';\nimport TaskDetails from './components/TaskDetails';\nimport TaskList from './components/TaskList';\nimport Timeline from './components/Timeline';\nimport ToolBar from './components/ToolBar';\nimport Trash from './components/Trash';\nimport TrashedLists from './components/TrashedLists';\nimport TrashedTasks from './components/TrashedTasks';\nimport useKeyboardShortcuts from './hooks/useKeyboardShortcuts';\nimport usePersistentState from './hooks/usePersistentState';\n\nfunction App() {\n    const [isShowingSidebar, setIsShowingSidebar] = usePersistentState(\n        'is-showing-sidebar',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        INITIAL_SELECTED_LIST_ID\n    );\n    const [isShowingListManager, setIsShowingListManager] = usePersistentState(\n        'is-showing-list-manager',\n        true\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        INITIAL_SELECTED_TASK_ID\n    );\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingList, setIsCreatingList] = useState(false);\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const [isShowingTrashContents, setIsShowingTrashContents] = useState(false);\n    const [isTransitioning, setIsTransitioning] = useState(false);\n    const unarchivedLists = useMemo(\n        () =>\n            sortBy(lists.filter(list => !list.isArchived), [\n                list => list.label,\n            ]),\n        [lists]\n    );\n\n    const currentListIndex = unarchivedLists.findIndex(\n        list => list.id === selectedListId\n    );\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const primaryColorCode = selectedList.color_code\n        ? selectedList.color_code\n        : PRIMARY_COLORS[0]\n            ? PRIMARY_COLORS[0]\n            : '#FF0000';\n\n    const palette = buildPalette(themeName, primaryColorCode);\n\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n\n    const hasUnarchivedList = lists.filter(list => !list.isArchived).length;\n\n    const isSidebarOpen = hasUnarchivedList && isShowingSidebar;\n\n    useEffect(() => {\n        const handleDragOver = () => setIsDraggingTask(true);\n        const handleDragEnd = () => setIsDraggingTask(false);\n        document.addEventListener('dragover', handleDragOver);\n        document.addEventListener('dragend', handleDragEnd);\n        document.addEventListener('drop', handleDragEnd);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n            document.removeEventListener('dragend', handleDragEnd);\n            document.removeEventListener('drop', handleDragEnd);\n        };\n    }, []);\n\n    const onCreateList = useCallback(\n        (overrides = {}) => {\n            const newListId = Date.now();\n            const randomColorCode = sample(PRIMARY_COLORS);\n\n            setLists(currentLists =>\n                currentLists.concat([\n                    {\n                        id: newListId,\n                        color_code: randomColorCode,\n                        isArchived: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_LIST_LABEL\n                        }`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedListId(newListId);\n\n            setIsCreatingList(true);\n\n            setTimeout(() => setIsCreatingList(false), 1000);\n        },\n        [setSelectedListId, setLists]\n    );\n\n    const onUpdateList = useCallback(\n        (listId, updates) => {\n            setLists(prevLists =>\n                prevLists.map(list => {\n                    if (list.id === listId) {\n                        return {\n                            ...list,\n                            ...updates,\n                        };\n                    }\n                    return list;\n                })\n            );\n        },\n        [setLists]\n    );\n\n    const onSelectList = useCallback(\n        listId => {\n            setSelectedListId(listId);\n            const firstTaskIdInList = incompleteTasks.find(\n                task => task.list_id === listId\n            );\n            if (firstTaskIdInList) {\n                setSelectedTaskId(firstTaskIdInList.id);\n            }\n            setIsShowingSidebar(true);\n            setIsShowingTrashContents(false);\n            setIsShowingListManager(true);\n\n            document.querySelector(`[data-list-id=\"${listId}\"]`).focus();\n        },\n        [\n            incompleteTasks,\n            setSelectedListId,\n            setSelectedTaskId,\n            setIsShowingSidebar,\n            setIsShowingTrashContents,\n            setIsShowingListManager,\n        ]\n    );\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                [\n                    {\n                        icon: ICONS.TASK_DEFAULT,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_TASK_LABEL\n                        }`,\n                        notes: COPY.NEW_TASK_NOTES,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ].concat(currentTasks)\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingTask(true);\n\n            setIsShowingListManager(false);\n        },\n        [selectedListId, setIsShowingListManager, setSelectedTaskId, setTasks]\n    );\n\n    useEffect(\n        () => {\n            if (isCreatingTask) {\n                setIsShowingListManager(false);\n                const timer = setTimeout(() => setIsCreatingTask(false), 100);\n                return () => clearTimeout(timer);\n            }\n        },\n        [isCreatingTask, setIsCreatingTask, setIsShowingListManager]\n    );\n\n    const onSelectTask = useCallback(\n        taskId => {\n            const task = tasks.find(task => task.id === taskId);\n\n            setSelectedListId(task.list_id);\n\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            setSelectedTaskId(taskId);\n\n            document.querySelector(`[data-task-id=\"${taskId}\"]`).focus();\n        },\n        [\n            isShowingListManager,\n            tasks,\n            setIsShowingListManager,\n            setSelectedTaskId,\n            setSelectedListId,\n        ]\n    );\n\n    const selectTaskByRelativeIndex = useCallback(\n        relativeIndex => {\n            const tasksInList = tasks.filter(\n                task =>\n                    task.list_id === selectedListId &&\n                    !task.isComplete &&\n                    !task.scheduled\n            );\n\n            const numTasksInList = tasksInList.length;\n\n            const indexOfCurrentTask = tasksInList.findIndex(\n                task => task.id === selectedTaskId\n            );\n\n            const totalSteps =\n                relativeIndex >= 0\n                    ? relativeIndex\n                    : Math.abs(relativeIndex) * (numTasksInList - 1);\n\n            const targetIndex =\n                (indexOfCurrentTask + totalSteps) % numTasksInList;\n\n            const taskAtRelativeIndex = tasksInList[targetIndex];\n\n            if (taskAtRelativeIndex) {\n                onSelectTask(taskAtRelativeIndex.id);\n            }\n        },\n        [onSelectTask, selectedListId, selectedTaskId, tasks]\n    );\n\n    const selectListByRelativeIndex = useCallback(\n        relativeIndex => {\n            const numLists = unarchivedLists.length;\n\n            const totalSteps =\n                relativeIndex >= 0\n                    ? relativeIndex\n                    : Math.abs(relativeIndex) * (numLists - 1);\n\n            const targetIndex = (currentListIndex + totalSteps) % numLists;\n\n            const listAtRelativeIndex = unarchivedLists[targetIndex];\n\n            if (listAtRelativeIndex) {\n                onSelectList(listAtRelativeIndex.id);\n            }\n        },\n        [currentListIndex, onSelectList, unarchivedLists]\n    );\n\n    const selectByRelativeIndex = useCallback(\n        (relativeIndex, isVertical = false) => {\n            const elementWithFocus = document.activeElement;\n            const isListCard = !!elementWithFocus.dataset.listId;\n\n            const selectionFunc = isListCard\n                ? selectListByRelativeIndex\n                : selectTaskByRelativeIndex;\n\n            const offset =\n                isVertical && isListCard\n                    ? relativeIndex >= 0\n                        ? 3\n                        : -3\n                    : relativeIndex;\n\n            selectionFunc(offset);\n        },\n        [selectListByRelativeIndex, selectTaskByRelativeIndex]\n    );\n\n    const transition = useCallback(\n        callback => {\n            setIsTransitioning(true);\n            setTimeout(() => {\n                callback();\n                setIsTransitioning(false);\n            }, ROUTE_TRANSITION_ANIMATION_DURATION / 2);\n        },\n        [setIsTransitioning]\n    );\n\n    const onImmediatelySelectTask = useCallback(\n        taskId => {\n            onSelectTask(taskId);\n        },\n        [onSelectTask]\n    );\n\n    const onTransitionToTask = useCallback(\n        taskId => {\n            transition(() => onSelectTask(taskId));\n        },\n        [onSelectTask, transition]\n    );\n\n    const onChangeIsSidebarOpen = setIsShowingSidebar;\n\n    const onChangeIsShowingListManager = useCallback(\n        newIsShowingListManager => {\n            transition(() => {\n                setIsShowingListManager(newIsShowingListManager);\n\n                if (newIsShowingListManager) {\n                    setIsShowingSidebar(true);\n                }\n\n                setIsShowingTrashContents(false);\n            });\n        },\n        [\n            setIsShowingSidebar,\n            setIsShowingListManager,\n            setIsShowingTrashContents,\n            transition,\n        ]\n    );\n\n    const onChangeIsShowingTrashContents = useCallback(\n        () => {\n            if (!isShowingSidebar) {\n                setIsShowingSidebar(true);\n            }\n            if (!isShowingListManager) {\n                setIsShowingListManager(true);\n            }\n            setIsShowingTrashContents(!isShowingTrashContents);\n        },\n        [\n            isShowingListManager,\n            isShowingSidebar,\n            isShowingTrashContents,\n            setIsShowingListManager,\n            setIsShowingSidebar,\n            setIsShowingTrashContents,\n        ]\n    );\n\n    const deleteTask = useCallback(\n        taskId => {\n            if (selectedTaskId === taskId) {\n                const firstUnarchivedTask = tasks.find(\n                    task =>\n                        task.id !== taskId &&\n                        task.list_id === selectedListId &&\n                        !task.isComplete\n                );\n\n                if (firstUnarchivedTask) {\n                    onImmediatelySelectTask(firstUnarchivedTask.id);\n                } else {\n                    onChangeIsShowingListManager(true);\n                }\n            }\n\n            onUpdateTask(taskId, {\n                isComplete: true,\n            });\n        },\n        [\n            onChangeIsShowingListManager,\n            onImmediatelySelectTask,\n            onUpdateTask,\n            selectedListId,\n            tasks,\n            selectedTaskId,\n        ]\n    );\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const moveTaskToTimeline = useCallback(\n        () => {\n            onUpdateTask(selectedTaskId, {\n                scheduled: true,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const moveTaskToTaskList = useCallback(\n        () => {\n            onUpdateTask(selectedTaskId, {\n                scheduled: false,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const setTaskDuration = useCallback(\n        duration => {\n            onUpdateTask(selectedTaskId, {\n                scheduled_minutes: duration,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const toggleTaskListVisibility = useCallback(\n        () => {\n            if (isShowingSidebar) {\n                setIsShowingTrashContents(false);\n            }\n\n            onChangeIsSidebarOpen(!isShowingSidebar);\n        },\n        [isShowingSidebar, onChangeIsSidebarOpen]\n    );\n\n    const toggleDarkMode = useCallback(\n        () => {\n            onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n        },\n        [onChangeTheme, themeName]\n    );\n\n    const toggleIsEditingCurrentTask = useCallback(\n        () => {\n            setIsCreatingTask(true);\n        },\n        [setIsCreatingTask]\n    );\n\n    const toggleIsShowingListManager = useCallback(\n        () => {\n            onChangeIsShowingListManager(!isShowingListManager);\n        },\n        [isShowingListManager, onChangeIsShowingListManager]\n    );\n\n    const createNewTask = useCallback(\n        () => {\n            onCreateTask();\n        },\n        [onCreateTask]\n    );\n\n    const deleteCurrentTask = useCallback(\n        () => {\n            deleteTask(selectedTaskId);\n        },\n        [deleteTask, selectedTaskId]\n    );\n\n    const goBack = useCallback(\n        () => {\n            setIsShowingTrashContents(current => {\n                if (current) {\n                    return false;\n                }\n            });\n\n            setIsShowingListManager(current => !current);\n        },\n        [setIsShowingListManager, setIsShowingTrashContents]\n    );\n\n    const keyMap = useMemo(\n        () => {\n            const withPreventDefault = func => e => {\n                e.preventDefault();\n                func();\n            };\n\n            return {\n                ...[15, 30, 45, 60, 90, 120].reduce((acc, duration, index) => {\n                    return {\n                        ...acc,\n                        [index + 1]: () => setTaskDuration(duration),\n                    };\n                }, {}),\n                'cmd + arrowRight': withPreventDefault(moveTaskToTimeline),\n                'cmd + arrowLeft': withPreventDefault(moveTaskToTaskList),\n                'cmd + shift + arrowRight': withPreventDefault(() =>\n                    selectListByRelativeIndex(1)\n                ),\n                'cmd + shift + arrowLeft': withPreventDefault(() =>\n                    selectListByRelativeIndex(-1)\n                ),\n                'cmd + shift + ]': withPreventDefault(() =>\n                    selectListByRelativeIndex(1)\n                ),\n                'cmd + shift + [': withPreventDefault(() =>\n                    selectListByRelativeIndex(-1)\n                ),\n                b: withPreventDefault(toggleTaskListVisibility),\n                d: withPreventDefault(toggleDarkMode),\n                e: withPreventDefault(toggleIsEditingCurrentTask),\n                escape: withPreventDefault(goBack),\n                l: withPreventDefault(toggleIsShowingListManager),\n                n: withPreventDefault(createNewTask),\n                t: withPreventDefault(deleteCurrentTask),\n                arrowUp: withPreventDefault(() =>\n                    selectByRelativeIndex(-1, true)\n                ),\n                arrowDown: withPreventDefault(() =>\n                    selectByRelativeIndex(1, true)\n                ),\n                arrowLeft: withPreventDefault(() =>\n                    selectListByRelativeIndex(-1)\n                ),\n                arrowRight: withPreventDefault(() =>\n                    selectListByRelativeIndex(1)\n                ),\n            };\n        },\n        [\n            createNewTask,\n            deleteCurrentTask,\n            goBack,\n            moveTaskToTaskList,\n            moveTaskToTimeline,\n            selectByRelativeIndex,\n            selectListByRelativeIndex,\n            setTaskDuration,\n            toggleTaskListVisibility,\n            toggleDarkMode,\n            toggleIsEditingCurrentTask,\n            toggleIsShowingListManager,\n        ]\n    );\n\n    useKeyboardShortcuts(keyMap);\n\n    const appActions = {\n        onChangeIsSidebarOpen,\n        onChangeTaskPosition,\n        onChangeIsShowingListManager,\n        onChangeIsShowingTrashContents,\n        onChangeTheme,\n        onCreateList,\n        onCreateTask,\n        deleteTask,\n        onSelectList,\n        onImmediatelySelectTask,\n        onTransitionToTask,\n        onUpdateList,\n        onUpdateTask,\n    };\n\n    const appData = {\n        incompleteTasks,\n        isSidebarOpen,\n        isCreatingList,\n        isCreatingTask,\n        isDraggingTask,\n        isShowingListManager,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    const columnWidths = isSidebarOpen\n        ? {\n              sidebar: SIDEBAR_DEFAULT_WIDTH,\n              listManager: '40vw',\n              taskDetails: '40vw',\n              timeline: SIDEBAR_DEFAULT_WIDTH,\n          }\n        : {\n              sidebar: `calc(${GRID_UNIT} * 2)`,\n              listManager: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              taskDetails: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              timeline: SIDEBAR_EXTENDED_WIDTH,\n          };\n\n    return (\n        <StyleSheetManager disableVendorPrefixes>\n            <ThemeProvider theme={palette}>\n                <GlobalStyle />\n                <Trash appActions={appActions} appData={appData} />\n                <FlexBox align=\"stretch\" poop=\"poop\">\n                    <Sidebar\n                        appActions={appActions}\n                        appData={appData}\n                        style={{\n                            width: columnWidths.sidebar,\n                        }}\n                    >\n                        {isShowingTrashContents ? (\n                            <TrashedTasks\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : (\n                            <TaskList\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        )}\n                    </Sidebar>\n\n                    <PrimaryAppColumn\n                        label={\n                            isShowingTrashContents\n                                ? COPY.LABEL_FOR_TRASHED_LISTS\n                                : isShowingListManager\n                                    ? COPY.LABEL_FOR_LIST_MANAGER\n                                    : COPY.LABEL_FOR_TASK_DETAILS\n                        }\n                        style={{\n                            width: isShowingListManager\n                                ? columnWidths.listManager\n                                : columnWidths.taskDetails,\n                        }}\n                    >\n                        <ToolBar>\n                            <ToggleButton\n                                isActive={isShowingListManager}\n                                title={COPY.TIPS.TOGGLE_LIST_MANAGER}\n                                onClick={() =>\n                                    onChangeIsShowingListManager(\n                                        !isShowingListManager\n                                    )\n                                }\n                            >\n                                {isShowingListManager ? (\n                                    <FlexBox spacing={0.25}>\n                                        {ICONS.TASK_DETAILS}\n                                        <span>\n                                            {COPY.LABEL_FOR_TASK_DETAILS}\n                                        </span>\n                                    </FlexBox>\n                                ) : (\n                                    <FlexBox spacing={0.25}>\n                                        {ICONS.LIST_MANAGER}\n                                        <span>\n                                            {COPY.LABEL_FOR_LIST_MANAGER}\n                                        </span>\n                                    </FlexBox>\n                                )}\n                            </ToggleButton>\n                        </ToolBar>\n                        <Transition\n                            isTransitioning={isTransitioning}\n                            style={{ height: '100%' }}\n                        >\n                            {isShowingTrashContents ? (\n                                <TrashedLists\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            ) : isShowingListManager ? (\n                                <ListManager\n                                    appActions={appActions}\n                                    appData={appData}\n                                    lists={unarchivedLists}\n                                />\n                            ) : (\n                                <TaskDetails\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            )}\n                        </Transition>\n                    </PrimaryAppColumn>\n\n                    <Timeline\n                        appActions={appActions}\n                        appData={appData}\n                        selectedTaskId={selectedTaskId}\n                        from={TIMELINE_FROM}\n                        style={{\n                            width: columnWidths.timeline,\n                        }}\n                        tasks={incompleteTasks}\n                        to={TIMELINE_TO}\n                    />\n                </FlexBox>\n            </ThemeProvider>\n        </StyleSheetManager>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}