{"version":3,"sources":["components/atoms/tokens.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","components/atoms/Button.js","components/atoms/Transition.js","hooks/useDrop.js","utils/minutesToHeight.js","utils/toInt.js","hooks/useDrag.js","components/TaskCard.js","components/ToolBar.js","components/Backlog.js","components/Trash.js","hooks/useKeyboardShortcuts.js","components/EditInPlace.js","components/ListManager.js","components/OptionBar.js","components/TaskDetails.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/atoms/GlobalStyles.js","hooks/usePersistentState.js","index.js"],"names":["DURATION_OPTIONS","GRID_UNIT","FONTS","NORMAL","LINE_HEIGHT","SIZE","concat","LARGE","INITIAL_LISTS","id","isArchived","label","INITIAL_SELECTED_LIST_ID","INITIAL_TASKS","INITIAL_SELECTED_TASK_ID","MIN_SLOT_HEIGHT","ROUTE_TRANSITION_ANIMATION_DURATION","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","CREATE_NEW_TASK","DELETE_TASK","MOVE_TASK_BETWEEN_BACKLOG_AND_TIMELINE","MOVE_BETWEEN_LISTS","PREFIX","SETTING_DURATION","TOGGLE_BACKLOG","TOGGLE_DARK_MODE","TOGGLE_LIST_MANAGER","DARK","PRIMARY_FADED","darken","PRIMARY","BACKGROUND","HIGH_CONTRAST_BACKGROUND","HIGH_CONTRAST_TEXT","BORDER_HOVER","setLightness","BORDER_IDLE","SHADED","lighten","SHADOW","transparentize","TEXT","TEXT_FADED","BORDER_NEUTRAL","LIGHT","rgba","COLORS","ICONS","DARK_MODE","END_ZONE","LEFT","LIGHT_MODE","LIST_MANAGER","RIGHT","TASK_DEFAULT","TASK_DETAILS","styled","div","_ref","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","name","Box","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","_ref$wrapped","wrapped","Container","FlexBox","attrs","ContentContainer","_ref2","ColumnHeader","_ref3","AppColumn","_ref4","children","otherProps","Object","objectWithoutProperties","react_default","a","createElement","PrimaryAppColumn","_ref5","Button","as","GhostButton","ToggleButton","isActive","Transition","isTransitioning","useDrop","dataTypeHandlers","_useState","useState","_useState2","slicedToArray","isTargetedForDrop","setIsTargetedForDrop","targetedElement","useRef","droppable","onDragEnter","evt","preventDefault","current","target","onDragOver","onDragLeave","onDrop","keys","map","dataType","data","dataTransfer","getData","payload","length","isNaN","parseFloat","dataTypeHandler","minutesToHeight","minutes","toInt","str","parseInt","useDrag","dataTypes","isDragging","setIsDragging","draggable","onDragEnd","onDragStart","setData","duration","CardLabel","Math","min","CardIcon","memo","appActions","appData","task","onImmediatelySelectTask","onTransitionToTask","isShowingListManager","icon","scheduled_minutes","_useDrag","task-id","dragProps","TaskCard_Container","assign","data-task-id","tabIndex","title","TIPS","onClick","ToolBar","hasTasks","BacklogDropZone","BacklogToggleButton","isBacklogVisible","onChangeIsShowingBacklog","CreateFirstTaskTip","_templateObject","onChangeTaskPosition","onChangeTheme","onCreateTask","onUpdateTask","incompleteTasks","lists","selectedListId","selectedTaskId","selectedList","find","list","unscheduledTasks","filter","scheduled","list_id","_useDrop","taskId","backlogDropProps","_useDrop3","droppedOnTaskId","currentTarget","dataset","droppedOnTaskIndex","tasks","findIndex","taskCardDropProps","Backlog_Container","Fragment","components_ToolBar","Backlog_BacklogToggleButton","style","bottom","left","overflow","position","right","top","width","role","aria-label","height","CREATE_TASK_LABEL","components_TaskCard","key","DROP_ZONE_RADIUS","pulsingAnimation","from","to","keyframes","Trash_templateObject","isDraggingTask","css","_templateObject2","Trash","onDeleteTask","onSelectList","onUpdateList","list-id","listId","firstUnarchivedList","dropProps","Trash_Container","INPUT_TAG_NAMES","isInput","node","tagName","toLowerCase","includes","useGlobalKeyboardShortcuts","keyMap","targetElementRef","arguments","undefined","useEffect","onKeyDown","scopedToElementRef","keysDown","ctrlKey","push","shiftKey","metaKey","currentKeySequence","uniq","keyDown","sort","join","mapKeys","handler","sequence","shortcutKeySequence","split","trim","scopedElement","scopedToAnInput","elementWithFocusIsAnInput","document","activeElement","stopPropagation","buildKeyboardShortcutHandler","addEventListener","removeEventListener","isEditing","isEmpty","_ref$tracingElementSt","tracingElementStyles","StyledTextarea","textarea","_ref3$doubleClickToEd","doubleClickToEdit","_ref3$isMultiLine","isMultiLine","_ref3$isRemotelyActiv","isRemotelyActivated","_ref3$placeholder","placeholder","_ref3$render","render","value","_ref3$tracingElementS","_ref3$value","_ref3$wrapperStyles","wrapperStyles","_ref3$onSave","onSave","setIsEditing","_useState3","_useState4","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","inputRef","measuringElementRef","isSingleLine","select","focus","el","offsetHeight","handleClick","useCallback","useMemo","saveAndClose","close","cmd + escape","shift + escape","cmd + enter","shift + enter","escape","enter","EditInPlace_Container","onDoubleClick","objectSpread2","opacity","ref","pointerEvents","whiteSpace","disabled","rows","onBlur","onChange","LIST_CARD_HEIGHT","LIST_CARD_SPACING","LIST_CARD_WIDTH","StyledListCard","ListCardTaskIconContainer","ListCard","targetListId","data-list-id","GhostListCard","ListManager_templateObject","ListManager","onCreateList","isCreatingList","unarchivedLists","sortedLists","sortBy","ListManager_Container","CREATE_LIST_LABEL","tasksInList","ListManager_ListCard","components_EditInPlace","alignSelf","flexGrow","flexShrink","newLabel","OptionButton","isSelected","OptionBar","options","_ref2$renderOption","renderOption","option","_ref2$renderSelectedO","renderSelectedOption","selectedOption","optionIndex","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","TaskDetails_templateObject2","DurationOptionBar","TaskDetails","_ref3$appActions","_ref3$appData","isCreatingTask","activeTask","notes","handleUpdateTask","field","[object Object]","handleSaveDuration","newDuration","handleSaveIcon","newNotes","handleSaveLabel","handleSaveNotes","EMPTY_LABEL","EMPTY_NOTES","rawNotes","className","dangerouslySetInnerHTML","__html","marked","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","floor","scheduled_time","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","onClickTask","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","createGlobalStyle","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","isShowingBacklog","setIsShowingBacklog","_usePersistentState3","_usePersistentState4","setLists","_usePersistentState5","_usePersistentState6","setSelectedListId","_usePersistentState7","_usePersistentState8","setIsShowingListManager","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","setSelectedTaskId","_usePersistentState13","_usePersistentState14","themeName","setThemeName","setIsCreatingList","setIsCreatingTask","setIsDraggingTask","_useState7","_useState8","setIsTransitioning","currentListIndex","isComplete","hasIncompleteTasks","handleDragOver","handleDragEnd","overrides","newListId","currentLists","sample","MOTIVATIONAL_DESCRIPTORS","NEW_LIST_LABEL","setTimeout","updates","prevLists","prevTasks","newTaskId","currentTasks","NEW_TASK_LABEL","NEW_TASK_NOTES","clearTimeout","transition","callback","onChangeIsShowingListManager","newIsShowingListManager","firstUnarchivedTask","newIndex","tasksMinusTarget","slice","reduce","acc","index","cmd + arrowRight","cmd + arrowLeft","cmd + shift + arrowRight","nextListIndex","nextIndex","cmd + shift + arrowLeft","prevListIndex","prevIndex","b","d","e","l","n","t","columnWidths","backlog","listManager","taskDetails","timeline","styled_components_browser_esm","GlobalStyles","components_Trash","components_Timeline","NAME_OF_LIST_MANAGER","NAME_OF_TASK_DETAILS","atoms_Transition","components_ListManager","components_TaskDetails","components_Backlog","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.82051961.chunk.js","sourcesContent":["import { darken, lighten, rgba, setLightness, transparentize } from 'polished';\n\nexport const BORDER_RADIUS = '3px';\nexport const BORDER_WIDTH = '1px';\nexport const BULLET_SIZE = '10px';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '30px';\nexport const FONTS = {\n    NORMAL: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.5)` },\n    LARGE: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.75)` },\n};\nexport const HOURS_PER_SCREEN = 10;\nexport const INITIAL_LISTS = [\n    {\n        id: 1,\n        isArchived: false,\n        label: 'Default List',\n    },\n];\nexport const INITIAL_SELECTED_LIST_ID = (INITIAL_LISTS[0] || {}).id;\nexport const INITIAL_TASKS = [];\nexport const INITIAL_SELECTED_TASK_ID = (INITIAL_TASKS[0] || {}).id;\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const ROUTE_TRANSITION_ANIMATION_DURATION = 250;\nexport const TIMELINE_FROM = '8:00';\nexport const TIMELINE_TO = '20:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.MOTIVATIONAL_DESCRIPTORS = [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\nCOPY.EMPTY_LABEL = '...label?';\nCOPY.EMPTY_NOTES = '...notes?';\nCOPY.NAME_OF_LIST_MANAGER = 'All Lists';\nCOPY.NAME_OF_TASK_DETAILS = 'Task Deets';\nCOPY.CREATE_LIST_LABEL = 'Create List';\nCOPY.CREATE_TASK_LABEL = 'Create Task';\nCOPY.NEW_LIST_LABEL = 'New List';\nCOPY.NEW_TASK_LABEL = `New Task`;\nCOPY.NEW_TASK_NOTES = '';\nCOPY.TIPS = {\n    CREATE_NEW_TASK: 'Press [N] to create a [N]ew task in the current list',\n    DELETE_TASK: 'Press [T] to move the selected task to the [T]rash',\n    MOVE_TASK_BETWEEN_BACKLOG_AND_TIMELINE:\n        'Press [⌘]+[LEFT or RIGHT] to move the selected task to the Backlog or Timeline, respectively',\n    MOVE_BETWEEN_LISTS:\n        'Press [⌘]+[SHIFT]+[LEFT or RIGHT] to move between your lists',\n    PREFIX: 'Tip ☝️: ',\n    SETTING_DURATION:\n        'Press keys [1] to [6] to quickly adjust your time estimate for the selected task',\n    TOGGLE_BACKLOG:\n        'Press [B] to show / hide the side[B]ar of unscheduled tasks',\n    TOGGLE_DARK_MODE: 'Press [D] to toggle [D]ark Mode',\n    TOGGLE_LIST_MANAGER: 'Press [L] to see your [L]ists',\n};\n\nexport { COPY };\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = PRIMARY;\nDARK.PRIMARY_FADED = darken(0.2, DARK.PRIMARY);\nDARK.BACKGROUND = '#000209';\nDARK.HIGH_CONTRAST_BACKGROUND = DARK.PRIMARY;\nDARK.HIGH_CONTRAST_TEXT = '#FFFFFF';\nDARK.BORDER_HOVER = setLightness(0.5, PRIMARY);\nDARK.BORDER_IDLE = setLightness(0.3, PRIMARY);\nDARK.SHADED = lighten(0.1, DARK.BACKGROUND);\nDARK.SHADOW = transparentize(0.95, DARK.BACKGROUND);\nDARK.TEXT = setLightness(0.85, DARK.PRIMARY);\nDARK.TEXT_FADED = setLightness(0.4, DARK.TEXT);\nDARK.BORDER_NEUTRAL = setLightness(0.15, DARK.TEXT);\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.PRIMARY_FADED = lighten(0.2, LIGHT.PRIMARY);\nLIGHT.BACKGROUND = '#FFFFFF';\nLIGHT.HIGH_CONTRAST_BACKGROUND = LIGHT.PRIMARY;\nLIGHT.HIGH_CONTRAST_TEXT = LIGHT.BACKGROUND;\nLIGHT.BORDER_HOVER = rgba('#0094FF', 0.5);\nLIGHT.BORDER_IDLE = rgba('#0094FF', 0.3);\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.SHADOW = transparentize(0.8, setLightness(0.25, LIGHT.PRIMARY));\nLIGHT.TEXT = setLightness(0.15, LIGHT.PRIMARY);\nLIGHT.TEXT_FADED = transparentize(0.5, LIGHT.TEXT);\nLIGHT.BORDER_NEUTRAL = transparentize(0.75, LIGHT.TEXT);\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\n\nexport const ICONS = {\n    DARK_MODE: '🌚',\n    END_ZONE: '🗑',\n    LEFT: '👈',\n    LIGHT_MODE: '🌞',\n    LIST_MANAGER: '📚',\n    RIGHT: '👉',\n    TASK_DEFAULT: '📌',\n    TASK_DETAILS: '📌',\n};\n","import styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from './tokens';\n\nexport default styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = 0,\n        marginX = 0,\n        marginY = 0,\n        padding = 0,\n        paddingX = 0,\n        paddingY = 0,\n        theme,\n    }) => `\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER_NEUTRAL}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        isFlexible = false,\n        justify = 'stretch',\n        spacing = 0,\n        wrapped = false,\n    }) => `\n        align-items: ${align};\n        display: flex;\n        flex-direction: ${direction};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        flex-wrap: ${wrapped ? 'wrap' : 'nowrap'}; \n        justify-content: ${justify};\n        width: 100%;\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_WIDTH,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})(\n    ({ theme }) => `\n        height: calc(100vh - ${GRID_UNIT});\n        overflow: auto;\n        position: relative;\n        ${UNIFIED_TRANSITION};\n        \n        & > * {\n            align-self: stretch;\n        }\n    `\n);\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        border-bottom:\n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({ children, label, ...otherProps }) => (\n    <Container>\n        <ColumnHeader>{label}</ColumnHeader>\n        <ContentContainer {...otherProps}>{children}</ContentContainer>\n    </Container>\n);\n\nexport const PrimaryAppColumn = styled(AppColumn)(\n    ({ theme }) => `\n        box-shadow: 0 0 10px 10px ${COLORS[theme.name].SHADOW};\n        border-left: ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        border-right: \n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        overflow: unset;\n        z-index: 11;\n    `\n);\n\nexport default AppColumn;\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport { BORDER_RADIUS, COLORS, UNIFIED_TRANSITION } from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    as: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].PRIMARY};\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].TEXT};\n        cursor: pointer;\n        transform: scale(1);\n        ${UNIFIED_TRANSITION};\n        \n        &:focus,\n        &:hover {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY};\n        }\n        &:active {\n            transform: scale(0.9);\n            filter: hue-rotate(20deg);\n        }\n    `\n);\n\nexport const GhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        border: 2px dashed ${COLORS[theme.name].BORDER_NEUTRAL};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            border-color: ${COLORS[theme.name].BORDER_HOVER};\n        }\n    `\n);\n\nexport const ToggleButton = styled(Button)(\n    ({ isActive, theme }) => `\n        background: unset;\n        width: auto;\n    `\n);\n\nexport default Button;\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport {\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Transition = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isTransitioning }) => `\n        opacity: ${isTransitioning ? 0 : 1};\n        ${UNIFIED_TRANSITION};\n        transition-duration: ${ROUTE_TRANSITION_ANIMATION_DURATION / 2}ms;\n    `\n);\n\nexport default Transition;\n","import { useRef, useState } from 'react';\n\nconst useDrop = dataTypeHandlers => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        Object.keys(dataTypeHandlers).map(dataType => {\n            const data = evt.dataTransfer.getData(dataType);\n            const payload =\n                data.length === 0\n                    ? null\n                    : isNaN(data)\n                    ? data\n                    : parseFloat(data);\n\n            if (payload !== null) {\n                const dataTypeHandler = dataTypeHandlers[dataType];\n                dataTypeHandler(payload, evt);\n            }\n\n            return dataType;\n        });\n\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","export default str => parseInt(str, 10);\n","import { useState } from 'react';\n\nconst useDrag = dataTypes => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        Object.keys(dataTypes).map(dataType => {\n            evt.dataTransfer.setData(dataType, dataTypes[dataType]);\n            return dataType;\n        });\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow: 0 0 0 2px ${\n            COLORS[theme.name][isActive ? 'PRIMARY' : 'BORDER_IDLE']\n        };\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        width: 100%;\n        z-index: ${isActive ? 100 : 10};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].BORDER_HOVER};\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY} inset;\n        }\n        \n        ${CardLabel} {\n            color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n            min-height: ${minutesToHeight(Math.min(30, duration))};\n        }\n\n        ${CardIcon} {\n            height: ${minutesToHeight(Math.min(30, duration))};\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'center',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ duration, theme }) => `\n        font-size: ${duration <= 15 ? FONTS.NORMAL.SIZE : FONTS.LARGE.SIZE};\n        width: auto;\n    `\n);\n\nconst TaskCard = ({ appActions, appData, isActive, task, ...otherProps }) => {\n    const { onImmediatelySelectTask, onTransitionToTask } = appActions;\n    const { isShowingListManager } = appData;\n    const { icon, id, label, scheduled_minutes } = task;\n    const [dragProps] = useDrag({ 'task-id': id });\n\n    const handleClick = () => {\n        if (isShowingListManager) {\n            onImmediatelySelectTask(id);\n            return;\n        }\n\n        onTransitionToTask(id);\n    };\n\n    return (\n        <Container\n            data-task-id={id}\n            duration={scheduled_minutes}\n            isActive={isActive}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_TASK_BETWEEN_BACKLOG_AND_TIMELINE}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <CardLabel>{label}</CardLabel>\n            <CardIcon duration={scheduled_minutes}>{icon}</CardIcon>\n        </Container>\n    );\n};\n\nexport default memo(TaskCard);\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'space-between',\n    paddingX: 0.5,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport AppColumn from './AppColumn';\nimport Box from './atoms/Box';\nimport { GhostButton, ToggleButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport TaskCard from './TaskCard';\nimport { COLORS, COPY, GRID_UNIT, ICONS } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst Container = styled(AppColumn)(\n    ({ hasTasks, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        flex-grow: 1;\n        overflow: ${hasTasks ? 'auto' : 'visible'};\n    `\n);\n\nconst BacklogDropZone = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isTargetedForDrop, theme }) => `\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].BORDER_HOVER} inset`\n                : 'initial'\n        };\n        position: relative;\n    `\n);\n\nconst BacklogToggleButton = ({\n    isBacklogVisible,\n    onChangeIsShowingBacklog,\n}) => (\n    <ToggleButton\n        isActive={isBacklogVisible}\n        title={COPY.TIPS.TOGGLE_BACKLOG}\n        onClick={() => onChangeIsShowingBacklog(!isBacklogVisible)}\n    >\n        {isBacklogVisible ? ICONS.LEFT : ICONS.RIGHT}\n    </ToggleButton>\n);\n\nconst CreateFirstTaskTip = styled(Box)`\n    position: absolute;\n    left: calc(100% + ${GRID_UNIT} * 2);\n    top: 50%;\n    transform: translateY(-50%);\n    white-space: nowrap;\n`;\n\nconst Backlog = ({ appActions, appData, ...otherProps }) => {\n    const {\n        onChangeIsShowingBacklog,\n        onChangeTaskPosition,\n        onChangeTheme,\n        onCreateTask,\n        onUpdateTask,\n    } = appActions;\n    const {\n        incompleteTasks,\n        isBacklogVisible,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        theme,\n    } = appData;\n    const selectedList = lists.find(list => list.id === selectedListId);\n    const unscheduledTasks = incompleteTasks.filter(\n        task =>\n            !task.scheduled &&\n            task.list_id === selectedListId &&\n            !selectedList.isArchived\n    );\n    const hasTasks = unscheduledTasks.length;\n\n    const [backlogDropProps] = useDrop({\n        'task-id': taskId => {\n            onUpdateTask(taskId, {\n                list_id: selectedListId,\n                scheduled: false,\n            });\n        },\n    });\n\n    const [taskCardDropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n            const droppedOnTaskIndex = appData.tasks.findIndex(\n                task => task.id === droppedOnTaskId\n            );\n            onChangeTaskPosition(taskId, droppedOnTaskIndex);\n        },\n    });\n\n    return (\n        <Container\n            label={!isBacklogVisible ? '' : selectedList.label}\n            {...otherProps}\n        >\n            {!isBacklogVisible ? (\n                <BacklogToggleButton\n                    isBacklogVisible={isBacklogVisible}\n                    onChangeIsShowingBacklog={onChangeIsShowingBacklog}\n                />\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={COPY.TIPS.TOGGLE_DARK_MODE}\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT'\n                                ? ICONS.DARK_MODE\n                                : ICONS.LIGHT_MODE}\n                        </ToggleButton>\n                        <BacklogToggleButton\n                            isBacklogVisible={isBacklogVisible}\n                            onChangeIsShowingBacklog={onChangeIsShowingBacklog}\n                        />\n                    </ToolBar>\n                    <BacklogDropZone {...backlogDropProps}>\n                        <FlexBox\n                            justify=\"flex-start\"\n                            direction=\"column\"\n                            spacing={0.5}\n                            padding={1}\n                            style={{\n                                bottom: 0,\n                                left: 0,\n                                overflow: hasTasks ? 'auto' : 'visible',\n                                position: 'absolute',\n                                right: 0,\n                                top: 0,\n                            }}\n                        >\n                            <div\n                                style={{ position: 'relative', width: '100%' }}\n                            >\n                                {!hasTasks && (\n                                    <CreateFirstTaskTip>\n                                        <span\n                                            role=\"img\"\n                                            aria-label=\"left-pointing hand\"\n                                        >\n                                            {ICONS.LEFT}\n                                        </span>{' '}\n                                        Create your first task\n                                    </CreateFirstTaskTip>\n                                )}\n                                <GhostButton\n                                    style={{\n                                        height: minutesToHeight(30),\n                                    }}\n                                    title={COPY.TIPS.CREATE_NEW_TASK}\n                                    onClick={() => onCreateTask()}\n                                >\n                                    {COPY.CREATE_TASK_LABEL}\n                                </GhostButton>\n                            </div>\n                            {unscheduledTasks.map(task => (\n                                <TaskCard\n                                    key={task.id}\n                                    appActions={appActions}\n                                    appData={appData}\n                                    isActive={selectedTaskId === task.id}\n                                    task={task}\n                                    {...taskCardDropProps}\n                                />\n                            ))}\n                        </FlexBox>\n                    </BacklogDropZone>\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default memo(Backlog);\n","import React from 'react';\nimport { transparentize } from 'polished';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport {\n    COLORS,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst DROP_ZONE_RADIUS = `calc(${GRID_UNIT} * 3.5)`;\n\nconst pulsingAnimation = ({ from, to }) => keyframes`\n    0% {\n        transform: scale(${from});\n    }\n    100% {\n        transform: scale(${to});\n    }\n`;\n\nconst Container = styled.div(\n    ({ isDraggingTask, isTargetedForDrop, theme }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop\n            ? pulsingAnimation({ from: 1.6, to: 2.4 })\n            : isDraggingTask\n            ? pulsingAnimation({ from: 1, to: 1.6 })\n            : 'unset'};\n        animation-timing-function: ease-in-out;\n        background: ${transparentize(\n            isTargetedForDrop || isDraggingTask ? 1 : 0.75,\n            COLORS[theme.name].PRIMARY\n        )};\n        bottom: calc(${DROP_ZONE_RADIUS} * -1);\n        border-radius: calc(${DROP_ZONE_RADIUS} * 2);\n        height: calc(${DROP_ZONE_RADIUS} * 2);\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n        position: fixed;\n        right: calc(${DROP_ZONE_RADIUS} * -1);\n        transform: scale(${isDraggingTask ? 1.5 : 1});\n        width: calc(${DROP_ZONE_RADIUS} * 2);\n        z-index: 100;\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            align-items: center;\n            content: '${ICONS.END_ZONE}';\n            display: flex;\n            font-size: 3rem;\n            justify-content: center;\n            height: calc(${DROP_ZONE_RADIUS} * 1.25);\n            left: 0;\n            position: absolute;\n            top: 0;\n            width: calc(${DROP_ZONE_RADIUS} * 1.25);\n        }\n    `\n);\n\nconst Trash = ({ appActions, appData, ...otherProps }) => {\n    const { onDeleteTask, onSelectList, onUpdateList } = appActions;\n    const { isDraggingTask, lists, selectedListId } = appData;\n    const [dropProps] = useDrop({\n        'list-id': listId => {\n            if (selectedListId === listId) {\n                const firstUnarchivedList = lists.find(\n                    list => list.id !== listId && !list.isArchived\n                );\n\n                if (firstUnarchivedList) {\n                    onSelectList(firstUnarchivedList.id);\n                }\n            }\n\n            onUpdateList(listId, {\n                isArchived: true,\n            });\n        },\n        'task-id': onDeleteTask,\n    });\n\n    return (\n        <Container\n            isDraggingTask={isDraggingTask}\n            title={COPY.TIPS.DELETE_TASK}\n            {...dropProps}\n            {...otherProps}\n        />\n    );\n};\n\nexport default Trash;\n","import { useEffect } from 'react';\nimport mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nconst buildKeyboardShortcutHandler = (keyMap, scopedToElementRef) => evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    const currentKeySequence = uniq(keysDown)\n        .map(keyDown => keyDown.toLowerCase())\n        .sort()\n        .join('+');\n\n    mapKeys(keyMap, (handler, sequence) => {\n        const shortcutKeySequence = sequence\n            .split('+')\n            .map(key => key.trim().toLowerCase())\n            .sort()\n            .join('+');\n\n        if (currentKeySequence === shortcutKeySequence) {\n            const scopedElement = scopedToElementRef.current;\n            const scopedToAnInput = scopedElement && isInput(scopedElement);\n            const elementWithFocusIsAnInput = isInput(document.activeElement);\n\n            if (scopedToAnInput) {\n                evt.stopPropagation();\n            }\n\n            if (!scopedToAnInput && elementWithFocusIsAnInput) {\n                return false;\n            }\n\n            return handler(evt);\n        }\n    });\n};\n\nconst useGlobalKeyboardShortcuts = (\n    keyMap,\n    targetElementRef = { current: null }\n) => {\n    useEffect(() => {\n        const onKeyDown = buildKeyboardShortcutHandler(\n            keyMap,\n            targetElementRef\n        );\n\n        document.addEventListener('keydown', onKeyDown);\n\n        return () => document.removeEventListener('keydown', onKeyDown);\n    }, [keyMap, targetElementRef]);\n};\n\nexport default useGlobalKeyboardShortcuts;\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useGlobalKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditing, isEmpty, theme, tracingElementStyles = () => {} }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border: 2px dashed ${COLORS[theme.name].BORDER_HOVER};\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.25 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.25 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n            ${tracingElementStyles(theme)}\n        }\n        \n        &:focus,\n        &:hover {\n            &:before {\n                opacity: 1;\n            }\n        }\n    `\n);\n\nconst StyledTextarea = styled.textarea(\n    ({ theme }) => `\n        display: block;\n        height: 100%;\n        width: 100%;\n    `\n);\n\nconst EditInPlace = ({\n    doubleClickToEdit = false,\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    tracingElementStyles = () => {},\n    value = '',\n    wrapperStyles = {},\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = useCallback(() => {\n        if (!isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    }, [isEditing, setBufferedValue, setIsEditing, value]);\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [handleClick, isRemotelyActivated]);\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const keyMap = useMemo(() => {\n        const saveAndClose = () => {\n            onSave(bufferedValue);\n            setIsEditing(false);\n        };\n\n        const close = () => {\n            setBufferedValue(value);\n            setIsEditing(false);\n        };\n\n        return {\n            'cmd + escape': close,\n            'shift + escape': close,\n            'cmd + enter': saveAndClose,\n            'shift + enter': saveAndClose,\n            'escape': saveAndClose,\n            'enter': evt => {\n                if (isSingleLine) {\n                    saveAndClose();\n                    evt.preventDefault();\n                    return false;\n                }\n            },\n        };\n    }, [bufferedValue, onSave, isSingleLine, value]);\n\n    useGlobalKeyboardShortcuts(keyMap, inputRef);\n\n    return (\n        <Container\n            isEditing={isEditing}\n            isEmpty={isEmpty}\n            tabIndex={0}\n            tracingElementStyles={tracingElementStyles}\n            onClick={!doubleClickToEdit ? handleClick : null}\n            onDoubleClick={doubleClickToEdit ? handleClick : null}\n            {...otherProps}\n        >\n            <Box style={{ ...wrapperStyles, opacity: isEmpty ? 0.5 : 1 }}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <StyledTextarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                height: `${measuringElementHeight}px`,\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Box>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React from 'react';\nimport styled from 'styled-components';\nimport sortBy from 'lodash/sortBy';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport EditInPlace from './EditInPlace';\n\nconst LIST_CARD_HEIGHT = `calc(${GRID_UNIT} * 8)`;\nconst LIST_CARD_SPACING = `calc(${GRID_UNIT} * 0.5)`;\nconst LIST_CARD_WIDTH = `calc((100% - (${LIST_CARD_SPACING} * 2)) / 3)`;\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n    justify: 'flex-start',\n    padding: 1,\n    wrapped: true,\n})(\n    ({ theme }) => `\n        align-content: flex-start;\n        background-color: ${COLORS[theme.name].SHADED};\n        height: 100%;\n        overflow: auto;\n        padding-bottom: calc(${GRID_UNIT} * 1.5);\n    `\n);\n\nconst StyledListCard = styled(FlexBox).attrs({\n    align: 'flex-start',\n    direction: 'column',\n    justify: 'space-between',\n    spacing: 0.5,\n})(\n    ({ isActive, isTargetedForDrop, theme }) => `\n        background-color: ${\n            COLORS[theme.name][\n                isActive ? 'HIGH_CONTRAST_BACKGROUND' : 'PRIMARY_FADED'\n            ]\n        };\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        cursor: pointer;\n        height: ${LIST_CARD_HEIGHT};\n        margin-bottom: ${LIST_CARD_SPACING};\n        margin-left: ${LIST_CARD_SPACING};\n        overflow: hidden;\n        position: relative;\n        transform: scale(${isTargetedForDrop ? 1.1 : 1});\n        width: ${LIST_CARD_WIDTH};\n        ${UNIFIED_TRANSITION};\n        \n        &:nth-child(3n+4) {\n            margin-left: 0;\n        }\n    `\n);\n\nconst ListCardTaskIconContainer = styled(FlexBox).attrs({\n    justify: 'flex-start',\n    paddingX: 0.25,\n    paddingY: 0.25,\n    wrapped: true,\n})(\n    ({ isActive }) => `\n        background-color: rgba(255, 255, 255, ${isActive ? 0.75 : 0.25});\n        border-radius: ${BORDER_RADIUS};\n        border-top-right-radius: 0;\n        border-top-left-radius: 0;\n        margin: 5px;\n        width: calc(100% - (5px * 2));\n    `\n);\n\nconst ListCard = ({ appActions, children, listId, ...otherProps }) => {\n    const { onUpdateTask } = appActions;\n\n    const [dragProps] = useDrag({ 'list-id': listId });\n\n    const [dropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const targetListId = toInt(evt.currentTarget.dataset.listId);\n            if (targetListId) {\n                onUpdateTask(taskId, {\n                    list_id: targetListId,\n                });\n            }\n        },\n    });\n\n    return (\n        <StyledListCard\n            data-list-id={listId}\n            title={COPY.TIPS.MOVE_BETWEEN_LISTS}\n            {...dragProps}\n            {...dropProps}\n            {...otherProps}\n        >\n            {children}\n        </StyledListCard>\n    );\n};\n\nconst GhostListCard = styled(GhostButton).attrs({\n    align: 'center',\n    justify: 'center',\n})`\n    height: ${LIST_CARD_HEIGHT};\n    margin-bottom: ${LIST_CARD_SPACING};\n    width: ${LIST_CARD_WIDTH};\n`;\n\nconst ListManager = ({ appActions, appData }) => {\n    const { onCreateList, onSelectList, onUpdateList } = appActions;\n    const { incompleteTasks, isCreatingList, lists, selectedListId } = appData;\n    const unarchivedLists = lists.filter(list => !list.isArchived);\n    const sortedLists = sortBy(unarchivedLists, [list => list.label]);\n\n    const tracingElementStyles = theme => `\n        border-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT}\n    `;\n\n    return (\n        <Container>\n            <GhostListCard onClick={() => onCreateList()}>\n                {COPY.CREATE_LIST_LABEL}\n            </GhostListCard>\n            {sortedLists.map(list => {\n                const isActive = selectedListId === list.id;\n                const tasksInList = incompleteTasks.filter(\n                    task => task.list_id === list.id\n                );\n\n                return (\n                    <ListCard\n                        key={list.id}\n                        appActions={appActions}\n                        isActive={isActive}\n                        listId={list.id}\n                        onClick={() => onSelectList(list.id)}\n                    >\n                        <EditInPlace\n                            isRemotelyActivated={\n                                isCreatingList && selectedListId === list.id\n                            }\n                            marginX={0.75}\n                            marginY={0.5}\n                            style={{\n                                alignSelf: 'stretch',\n                                flexGrow: 0,\n                                flexShrink: 0,\n                            }}\n                            tracingElementStyles={tracingElementStyles}\n                            value={list.label}\n                            onSave={newLabel => {\n                                onUpdateList(list.id, { label: newLabel });\n                            }}\n                        />\n                        {tasksInList.length >= 1 && (\n                            <ListCardTaskIconContainer isActive={isActive}>\n                                {tasksInList.map(task => (\n                                    <span key={task.id}>{task.icon}</span>\n                                ))}\n                            </ListCardTaskIconContainer>\n                        )}\n                    </ListCard>\n                );\n            })}\n        </Container>\n    );\n};\n\nexport default ListManager;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0.75};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map((option, optionIndex) => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(\n                              renderOption(option, optionIndex),\n                              optionIndex\n                          )\n                        : renderOption(option, optionIndex)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    ICONS,\n    DURATION_OPTIONS,\n    FONTS,\n    BORDER_WIDTH,\n} from './atoms/tokens';\n\nconst TaskHeader = styled(FlexBox).attrs({\n    as: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: ${FONTS.LARGE.SIZE};\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-self: stretch;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst DurationOptionBar = styled(OptionBar)(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        border-top: ${BORDER_WIDTH} solid ${COLORS[theme.name].BACKGROUND};\n    `\n);\n\nconst TaskDetails = ({ appActions = {}, appData = {} }) => {\n    const { onUpdateTask } = appActions;\n    const { isCreatingTask, selectedTaskId, tasks } = appData;\n    const activeTask = tasks.find(task => task.id === selectedTaskId) || {};\n    const { icon, id, label, notes, scheduled_minutes } = activeTask;\n    const isEmpty = !activeTask.id;\n\n    const handleUpdateTask = useCallback(\n        (field, value) => onUpdateTask(id, { [field]: value }),\n        [id, onUpdateTask]\n    );\n\n    const handleSaveDuration = useCallback(\n        newDuration => handleUpdateTask('scheduled_minutes', newDuration),\n        [handleUpdateTask]\n    );\n\n    const handleSaveIcon = useCallback(\n        newNotes => handleUpdateTask('icon', newNotes),\n        [handleUpdateTask]\n    );\n\n    const handleSaveLabel = useCallback(\n        newLabel => handleUpdateTask('label', newLabel),\n        [handleUpdateTask]\n    );\n\n    const handleSaveNotes = useCallback(\n        newNotes => handleUpdateTask('notes', newNotes),\n        [handleUpdateTask]\n    );\n\n    return (\n        !isEmpty && (\n            <>\n                <TaskHeader>\n                    <TaskHeaderLabel>\n                        <EditInPlace\n                            isRemotelyActivated={isCreatingTask}\n                            placeholder={COPY.EMPTY_LABEL}\n                            value={label}\n                            onSave={handleSaveLabel}\n                        />\n                    </TaskHeaderLabel>\n                    <TaskHeaderIcon>\n                        <EditInPlace\n                            placeholder={ICONS.TASK_DEFAULT}\n                            value={icon}\n                            onSave={handleSaveIcon}\n                        />\n                    </TaskHeaderIcon>\n                </TaskHeader>\n\n                <DurationOptionBar\n                    options={DURATION_OPTIONS}\n                    renderSelectedOption={option => <span>{option} mins</span>}\n                    selectedOption={scheduled_minutes}\n                    title={COPY.TIPS.SETTING_DURATION}\n                    onChange={handleSaveDuration}\n                />\n\n                <EditInPlace\n                    isFlexible\n                    isMultiLine\n                    margin={1}\n                    placeholder={COPY.EMPTY_NOTES}\n                    render={rawNotes => (\n                        <div\n                            className=\"markdown\"\n                            dangerouslySetInnerHTML={{\n                                __html: marked(rawNotes),\n                            }}\n                        />\n                    )}\n                    wrapperStyles={{\n                        bottom: 0,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                    value={notes}\n                    onSave={handleSaveNotes}\n                />\n            </>\n        )\n    );\n};\n\nexport default TaskDetails;\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop({\n            'task-id': taskId =>\n                onUpdateTask(taskId, {\n                    scheduled: true,\n                    scheduled_time: newTime,\n                }),\n        });\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: \"Today's Plan\",\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${COLORS[theme.name].BORDER_NEUTRAL};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            opacity: ${isFaded ? 0.25 : 1};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop({ 'task-id': () => {} });\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, COLORS, FONTS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: ${FONTS.NORMAL.LINE_HEIGHT};\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: ${FONTS.NORMAL.SIZE};\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        ::placeholder {\n            color: ${COLORS[theme.name].PRIMARY};\n            opacity: 1;\n        }\n        ::selection {\n            color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                ![null, 'undefined'].includes(savedState)\n                    ? JSON.parse(savedState)\n                    : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport sample from 'lodash/sample';\nimport { PrimaryAppColumn } from './components/AppColumn';\nimport { ToggleButton } from './components/atoms/Button';\nimport Transition from './components/atoms/Transition';\nimport Backlog from './components/Backlog';\nimport CompletedTasksDropZone from './components/Trash';\nimport ListManager from './components/ListManager';\nimport TaskDetails from './components/TaskDetails';\nimport Timeline from './components/Timeline';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport ToolBar from './components/ToolBar';\nimport useGlobalKeyboardShortcuts from './hooks/useKeyboardShortcuts';\nimport usePersistentState from './hooks/usePersistentState';\nimport {\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\n\nfunction App() {\n    const [isShowingBacklog, setIsShowingBacklog] = usePersistentState(\n        'is-backlog-visible',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        INITIAL_SELECTED_LIST_ID\n    );\n    const [isShowingListManager, setIsShowingListManager] = usePersistentState(\n        'is-showing-list-manager',\n        true\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        INITIAL_SELECTED_TASK_ID\n    );\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingList, setIsCreatingList] = useState(false);\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const [isTransitioning, setIsTransitioning] = useState(false);\n    const unarchivedLists = useMemo(\n        () => lists.filter(list => !list.isArchived),\n        [lists]\n    );\n    const currentListIndex = unarchivedLists.findIndex(\n        list => list.id === selectedListId\n    );\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n    const hasIncompleteTasks = incompleteTasks.length;\n    const hasUnarchivedList = lists.filter(list => !list.isArchived).length;\n    const isBacklogVisible =\n        hasUnarchivedList && (isShowingBacklog || isDraggingTask);\n\n    useEffect(() => {\n        const handleDragOver = () => setIsDraggingTask(true);\n        const handleDragEnd = () => setIsDraggingTask(false);\n        document.addEventListener('dragover', handleDragOver);\n        document.addEventListener('dragend', handleDragEnd);\n        document.addEventListener('drop', handleDragEnd);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n            document.removeEventListener('dragend', handleDragEnd);\n            document.removeEventListener('drop', handleDragEnd);\n        };\n    }, []);\n\n    const onCreateList = useCallback(\n        (overrides = {}) => {\n            const newListId = Date.now();\n\n            setLists(currentLists =>\n                currentLists.concat([\n                    {\n                        id: newListId,\n                        isArchived: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_LIST_LABEL\n                        }`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedListId(newListId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingList(true);\n\n            setTimeout(() => setIsCreatingList(false), 1000);\n        },\n        [setSelectedListId, setLists]\n    );\n\n    const onUpdateList = useCallback(\n        (listId, updates) => {\n            setLists(prevLists =>\n                prevLists.map(list => {\n                    if (list.id === listId) {\n                        return {\n                            ...list,\n                            ...updates,\n                        };\n                    }\n                    return list;\n                })\n            );\n        },\n        [setLists]\n    );\n\n    const onSelectList = listId => {\n        setSelectedListId(listId);\n        setIsShowingBacklog(true);\n    };\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                [\n                    {\n                        icon: ICONS.TASK_DEFAULT,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_TASK_LABEL\n                        }`,\n                        notes: COPY.NEW_TASK_NOTES,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ].concat(currentTasks)\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingTask(true);\n\n            setIsShowingListManager(false);\n        },\n        [selectedListId, setIsShowingListManager, setSelectedTaskId, setTasks]\n    );\n\n    useEffect(() => {\n        if (isCreatingTask) {\n            setIsShowingListManager(false);\n            const timer = setTimeout(() => setIsCreatingTask(false), 100);\n            return () => clearTimeout(timer);\n        }\n    }, [isCreatingTask, setIsCreatingTask, setIsShowingListManager]);\n\n    const transition = useCallback(\n        callback => {\n            setIsTransitioning(true);\n            setTimeout(() => {\n                callback();\n                setIsTransitioning(false);\n            }, ROUTE_TRANSITION_ANIMATION_DURATION / 2);\n        },\n        [setIsTransitioning]\n    );\n\n    const onImmediatelySelectTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            setSelectedTaskId(taskId);\n        },\n        [isShowingListManager, setIsShowingListManager, setSelectedTaskId]\n    );\n\n    const onTransitionToTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            transition(() => setSelectedTaskId(taskId));\n        },\n        [\n            isShowingListManager,\n            setIsShowingListManager,\n            setSelectedTaskId,\n            transition,\n        ]\n    );\n\n    const onChangeIsShowingBacklog = setIsShowingBacklog;\n\n    const onChangeIsShowingListManager = useCallback(\n        newIsShowingListManager => {\n            transition(() => {\n                setIsShowingListManager(newIsShowingListManager);\n\n                if (newIsShowingListManager) {\n                    setIsShowingBacklog(true);\n                }\n            });\n        },\n        [setIsShowingBacklog, setIsShowingListManager, transition]\n    );\n\n    const onDeleteTask = useCallback(\n        taskId => {\n            if (selectedTaskId === taskId) {\n                const firstUnarchivedTask = tasks.find(\n                    task =>\n                        task.id !== taskId &&\n                        task.list_id === selectedListId &&\n                        !task.isComplete\n                );\n\n                if (firstUnarchivedTask) {\n                    onImmediatelySelectTask(firstUnarchivedTask.id);\n                } else {\n                    onChangeIsShowingListManager(true);\n                }\n            }\n\n            onUpdateTask(taskId, {\n                isComplete: true,\n            });\n        },\n        [\n            onChangeIsShowingListManager,\n            onImmediatelySelectTask,\n            onUpdateTask,\n            selectedListId,\n            tasks,\n            selectedTaskId,\n        ]\n    );\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const keyMap = useMemo(\n        () => ({\n            ...[15, 30, 45, 60, 90, 120].reduce((acc, duration, index) => {\n                return {\n                    ...acc,\n                    [index + 1]: () => {\n                        onUpdateTask(selectedTaskId, {\n                            scheduled_minutes: duration,\n                        });\n                    },\n                };\n            }, {}),\n            'cmd + arrowRight': evt => {\n                evt.preventDefault();\n                onUpdateTask(selectedTaskId, {\n                    scheduled: true,\n                });\n            },\n            'cmd + arrowLeft': evt => {\n                evt.preventDefault();\n                onUpdateTask(selectedTaskId, {\n                    scheduled: false,\n                });\n            },\n            'cmd + shift + arrowRight': evt => {\n                evt.preventDefault();\n                const nextListIndex = currentListIndex + 1;\n                const nextIndex =\n                    nextListIndex > unarchivedLists.length - 1\n                        ? 0\n                        : nextListIndex;\n                setSelectedListId(unarchivedLists[nextIndex].id);\n            },\n            'cmd + shift + arrowLeft': evt => {\n                evt.preventDefault();\n                const prevListIndex = currentListIndex - 1;\n                const prevIndex =\n                    prevListIndex < 0\n                        ? unarchivedLists.length - 1\n                        : prevListIndex;\n                setSelectedListId(unarchivedLists[prevIndex].id);\n            },\n            'b': evt => {\n                evt.preventDefault();\n                onChangeIsShowingBacklog(!isShowingBacklog);\n            },\n            'd': evt => {\n                evt.preventDefault();\n                onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n            },\n            'e': evt => {\n                evt.preventDefault();\n                setIsCreatingTask(true);\n            },\n            'l': evt => {\n                evt.preventDefault();\n                onChangeIsShowingListManager(!isShowingListManager);\n            },\n            'n': evt => {\n                evt.preventDefault();\n                onCreateTask();\n            },\n            't': evt => {\n                evt.preventDefault();\n                onDeleteTask(selectedTaskId);\n            },\n        }),\n        [\n            currentListIndex,\n            isShowingBacklog,\n            isShowingListManager,\n            onChangeIsShowingBacklog,\n            onChangeIsShowingListManager,\n            onChangeTheme,\n            onCreateTask,\n            onDeleteTask,\n            onUpdateTask,\n            selectedTaskId,\n            setSelectedListId,\n            themeName,\n            unarchivedLists,\n        ]\n    );\n\n    useGlobalKeyboardShortcuts(keyMap);\n\n    const appActions = {\n        onChangeIsShowingBacklog,\n        onChangeTaskPosition,\n        onChangeIsShowingListManager,\n        onChangeTheme,\n        onCreateList,\n        onCreateTask,\n        onDeleteTask,\n        onSelectList,\n        onImmediatelySelectTask,\n        onTransitionToTask,\n        onUpdateList,\n        onUpdateTask,\n    };\n\n    const appData = {\n        incompleteTasks,\n        isBacklogVisible,\n        isCreatingList,\n        isCreatingTask,\n        isDraggingTask,\n        isShowingListManager,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    const columnWidths = isBacklogVisible\n        ? {\n              backlog: '30vw',\n              listManager: '40vw',\n              taskDetails: '40vw',\n              timeline: '30vw',\n          }\n        : {\n              backlog: `calc(${GRID_UNIT} * 2)`,\n              listManager: `calc(60vw - ${GRID_UNIT} * 2)`,\n              taskDetails: `calc(60vw - ${GRID_UNIT} * 2)`,\n              timeline: '40vw',\n          };\n\n    return (\n        <ThemeProvider theme={{ name: themeName }}>\n            <GlobalStyle />\n            <CompletedTasksDropZone appActions={appActions} appData={appData} />\n            <FlexBox align=\"stretch\" direction=\"row-reverse\">\n                <Timeline\n                    appActions={appActions}\n                    appData={appData}\n                    selectedTaskId={selectedTaskId}\n                    from={TIMELINE_FROM}\n                    style={{\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                        width: columnWidths.timeline,\n                        pointerEvents: hasIncompleteTasks ? 'all' : 'none',\n                    }}\n                    tasks={incompleteTasks}\n                    to={TIMELINE_TO}\n                />\n                <PrimaryAppColumn\n                    label={\n                        isShowingListManager\n                            ? COPY.NAME_OF_LIST_MANAGER\n                            : COPY.NAME_OF_TASK_DETAILS\n                    }\n                    style={{\n                        width: isShowingListManager\n                            ? columnWidths.listManager\n                            : columnWidths.taskDetails,\n                    }}\n                >\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={isShowingListManager}\n                            title={COPY.TIPS.TOGGLE_LIST_MANAGER}\n                            onClick={() =>\n                                onChangeIsShowingListManager(\n                                    !isShowingListManager\n                                )\n                            }\n                        >\n                            {isShowingListManager\n                                ? ICONS.TASK_DETAILS\n                                : ICONS.LIST_MANAGER}\n                        </ToggleButton>\n                    </ToolBar>\n                    <Transition isTransitioning={isTransitioning}>\n                        {isShowingListManager ? (\n                            <ListManager\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : (\n                            <TaskDetails\n                                appActions={appActions}\n                                appData={appData}\n                                style={{\n                                    opacity: hasIncompleteTasks ? 1 : 0.25,\n                                }}\n                            />\n                        )}\n                    </Transition>\n                </PrimaryAppColumn>\n                <Backlog\n                    appActions={appActions}\n                    appData={appData}\n                    style={{\n                        width: columnWidths.backlog,\n                    }}\n                />\n            </FlexBox>\n        </ThemeProvider>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}