{"version":3,"sources":["hooks/useDrop.js","components/atoms/tokens.js","utils/minutesToHeight.js","utils/toInt.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","components/atoms/Button.js","components/OptionBar.js","components/TaskCard.js","hooks/useDrag.js","components/Backlog.js","components/CompletedTasksDropZone.js","hooks/useKeyboardShortcuts.js","components/EditInPlace.js","components/TaskDetails.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/atoms/GlobalStyles.js","hooks/usePersistentState.js","index.js"],"names":["useDrop","type","callback","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","isTargetedForDrop","setIsTargetedForDrop","targetedElement","useRef","droppable","onDragEnter","evt","preventDefault","current","target","onDragOver","onDragLeave","onDrop","payload","dataTransfer","getData","isNaN","parseFloat","DEFAULT_TASK_ICON","DURATION_OPTIONS","INITIAL_LISTS","id","label","INITIAL_TASKS","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","DARK","HIGH_CONTRAST_BACKGROUND","PRIMARY","HIGH_CONTRAST_TEXT","BACKGROUND","BORDER_HOVER","setLightness","BORDER_IDLE","SHADED","lighten","TEXT","TEXT_FADED","BORDER_NEUTRAL","LIGHT","rgba","COLORS","minutesToHeight","minutes","concat","toInt","str","parseInt","styled","div","_ref","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","name","Box","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","Container","FlexBox","attrs","ContentContainer","_ref2","ColumnHeader","_ref3","AppColumn","_ref4","children","otherProps","objectWithoutProperties","react_default","a","createElement","Button","as","GhostButton","OptionButton","isSelected","OptionBar","options","_ref3$renderOption","renderOption","option","_ref3$renderSelectedO","renderSelectedOption","selectedOption","onChange","OptionBar_Container","map","key","onClick","duration","isActive","isDragging","isDraggingTask","Label","memo","appActions","appData","task","onSelectTask","icon","scheduled_minutes","_useDrag","setIsDragging","draggable","onDragEnd","onDragStart","setData","useDrag","dragProps","TaskCard_Container","assign","data-task-id","tabIndex","style","maxHeight","overflow","hasTasks","BacklogDropZone","CreateFirstTaskTip","_templateObject","selectedTaskId","tasks","onClickTask","onChangeTaskPosition","onChangeTheme","onCreateTask","onUpdateTask","_useDrop","taskId","scheduled","backlogDropProps","_useDrop3","stopPropagation","idOfTargetTask","currentTarget","dataset","indexOfTarget","findIndex","taskCardDropProps","unscheduledTasks","filter","Backlog_Container","components_OptionBar","toLowerCase","bottom","left","position","right","top","width","role","aria-label","height","components_TaskCard","pulsingAnimation","keyframes","CompletedTasksDropZone_templateObject","css","_templateObject2","transparentize","CompletedTaskDropZone","isComplete","currentSelectedTaskId","dropProps","CompletedTasksDropZone_Container","useKeyboardShortcuts","keyMap","keysPressed","shiftKey","push","metaKey","sortedKeysPressed","uniq","sort","mapKeys","handler","sequence","sequenceArray","split","trim","join","isEditing","isEmpty","_ref2$isMultiLine","isMultiLine","_ref2$isRemotelyActiv","isRemotelyActivated","_ref2$placeholder","placeholder","_ref2$render","render","value","_ref2$value","_ref2$wrapperStyles","wrapperStyles","_ref2$onSave","onSave","setIsEditing","_useState3","_useState4","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","inputRef","measuringElementRef","isSingleLine","useEffect","handleClick","select","focus","el","offsetHeight","saveAndClose","close","_useKeyboardShortcuts","cmd+escape","shift+escape","cmd+enter","shift+enter","escape","enter","ignoreKey","onKeyDown","EditInPlace_Container","Fragment","ref","pointerEvents","opacity","outline","whiteSpace","disabled","rows","display","onBlur","isLoading","ANIMATION_DURATION","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","TaskDetails_templateObject2","TaskDetails","_ref3$appActions","_ref3$isCreatingTask","isCreatingTask","_ref3$task","setIsLoading","notes","handleUpdateTask","field","[object Object]","useLayoutEffect","newTimer","setTimeout","clearTimeout","TaskDetails_Container","newDuration","components_EditInPlace","empty_label","newLabel","newNotes","empty_notes","rawNotes","className","dangerouslySetInnerHTML","__html","marked","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","Math","floor","scheduled_time","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","offsetMinutes","CurrentTimeMarker","_ref5","from","to","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","createGlobalStyle","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","lists","_usePersistentState3","_usePersistentState4","setTasks","_usePersistentState5","_usePersistentState6","themeName","setThemeName","_usePersistentState7","_usePersistentState8","selectedListId","_usePersistentState9","_usePersistentState10","setSelectedTaskId","setIsCreatingTask","setIsDraggingTask","selectedTask","useMemo","find","list","incompleteTasks","hasIncompleteTasks","handleDragEnd","useCallback","updates","prevTasks","objectSpread2","overrides","newTaskId","currentTasks","list_id","sample","motivational_descriptors","new_task_label","new_task_notes","getTaskById","newIndex","tasksMinusTarget","slice","styled_components_browser_esm","GlobalStyles","CompletedTasksDropZone","components_Timeline","components_TaskDetails","components_Backlog","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.b65ee8b7.chunk.js","sourcesContent":["import { useRef, useState } from 'react';\n\nconst useDrop = (type, callback = () => {}) => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        const payload = evt.dataTransfer.getData(type);\n        if (payload) {\n            callback(isNaN(payload) ? payload : parseFloat(payload), evt);\n        }\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import sample from 'lodash/sample';\nimport { lighten, rgba, setLightness } from 'polished';\n\nexport const BORDER_RADIUS = '3px';\nexport const BULLET_SIZE = '10px';\nexport const DEFAULT_TASK_ICON = '📌';\nexport const END_ZONE_ICON = '🗑';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '30px';\nexport const HOURS_PER_SCREEN = 8;\nexport const INITIAL_LISTS = [\n    {\n        id: 1,\n        label: 'Default List',\n    },\n];\nexport const INITIAL_TASKS = [];\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const TIMELINE_FROM = '7:00';\nexport const TIMELINE_TO = '24:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.motivational_descriptors = [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\nCOPY.empty_label = '...label?';\nCOPY.empty_notes = '...notes?';\nCOPY.new_task_label = `New Task`;\nCOPY.new_task_notes = '';\n\nexport { COPY };\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = PRIMARY;\nDARK.BACKGROUND = '#000209';\nDARK.HIGH_CONTRAST_BACKGROUND = DARK.PRIMARY;\nDARK.HIGH_CONTRAST_TEXT = DARK.BACKGROUND;\nDARK.BORDER_HOVER = setLightness(0.5, PRIMARY);\nDARK.BORDER_IDLE = setLightness(0.3, PRIMARY);\nDARK.SHADED = lighten(0.1, DARK.BACKGROUND);\nDARK.TEXT = setLightness(0.85, DARK.PRIMARY);\nDARK.TEXT_FADED = setLightness(0.4, DARK.TEXT);\nDARK.BORDER_NEUTRAL = setLightness(0.15, DARK.TEXT);\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.BACKGROUND = 'white';\nLIGHT.HIGH_CONTRAST_BACKGROUND = LIGHT.PRIMARY;\nLIGHT.HIGH_CONTRAST_TEXT = LIGHT.BACKGROUND;\nLIGHT.BORDER_HOVER = rgba('#0094FF', 0.5);\nLIGHT.BORDER_IDLE = rgba('#0094FF', 0.3);\nLIGHT.BORDER_NEUTRAL = setLightness(0.75, LIGHT.BACKGROUND);\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.TEXT = setLightness(0.15, LIGHT.PRIMARY);\nLIGHT.TEXT_FADED = LIGHT.BORDER_NEUTRAL;\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","export default str => parseInt(str, 10);\n","import styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from './tokens';\n\nexport default styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = 0,\n        marginX = 0,\n        marginY = 0,\n        padding = 0,\n        paddingX = 0,\n        paddingY = 0,\n        theme,\n    }) => `\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER_NEUTRAL}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        isFlexible = false,\n        justify = 'stretch',\n        spacing = 0,\n    }) => `\n        align-items: ${align};\n        display: flex;\n        flex-direction: ${direction};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        justify-content: ${justify};\n        width: 100%;\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n        \n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})(\n    ({ theme }) => `\n        height: calc(100vh - ${GRID_UNIT});\n        overflow: auto;\n        position: relative;\n        \n        & > * {\n            align-self: stretch;\n        }\n    `\n);\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n    paddingX: 0.5,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        border-bottom: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({ children, label, ...otherProps }) => (\n    <Container>\n        <ColumnHeader>{label}</ColumnHeader>\n        <ContentContainer {...otherProps}>{children}</ContentContainer>\n    </Container>\n);\n\nexport default AppColumn;\n","import styled from 'styled-components';\nimport { BORDER_RADIUS, COLORS, UNIFIED_TRANSITION } from './tokens';\nimport FlexBox from './FlexBox';\n\nconst Button = styled(FlexBox).attrs({\n    as: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].PRIMARY};\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].TEXT};\n        cursor: pointer;\n        transform: scale(1);\n        ${UNIFIED_TRANSITION};\n        \n        &:focus,\n        &:hover {\n            transform: scale(1.1);\n        }\n        &:active {\n            transform: scale(0.9);\n            filter: hue-rotate(20deg);\n        }\n    `\n);\n\nexport const GhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        border-radius: ${BORDER_RADIUS};\n        border: 2px dashed ${COLORS[theme.name].BORDER_IDLE};\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            border-color: ${COLORS[theme.name].BORDER_HOVER};\n        }\n    `\n);\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    justify: 'space-between',\n    paddingX: 1,\n    paddingY: 0.25,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        width: 100%;\n        z-index: 10;\n        \n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst OptionButton = styled(Button)(\n    ({ isSelected, theme }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <Container {...otherProps}>\n        {options.map(option => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(renderOption(option))\n                        : renderOption(option)}\n                </OptionButton>\n            );\n        })}\n    </Container>\n);\n\nexport default OptionBar;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n})(\n    ({ duration, isActive, isDragging, isDraggingTask, theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow: ${`0 0 0 2px ${\n            COLORS[theme.name][isActive ? 'PRIMARY' : 'BORDER_IDLE']\n        }`};\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        min-height: ${minutesToHeight(20)};\n        opacity: ${isDragging ? 0.5 : 1};\n        padding: 0 calc(${GRID_UNIT} / 2) 0\n            calc(${GRID_UNIT} / 2 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        pointer-events: ${isDraggingTask ? 'none' : 'all'};\n        transition-property: opacity, top;\n        width: 100%;\n        z-index: ${isActive ? 10 : 'initial'};\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].BORDER_HOVER};\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY} inset;\n        }\n    `\n);\n\nconst Label = styled(FlexBox).attrs({\n    spacing: 0.5,\n})(\n    ({ isActive, theme }) => `\n        align-items: center;\n        color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n        display: flex;\n        justify-content: space-between;\n        height: 100%;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst TaskCard = ({ appActions, appData, isActive, task, ...otherProps }) => {\n    const { onSelectTask } = appActions;\n    const { isDraggingTask } = appData;\n    const { icon, id, label, scheduled_minutes } = task;\n    const [dragProps] = useDrag('task-id', id);\n\n    const handleClick = () => onSelectTask(id);\n\n    return (\n        <Container\n            data-task-id={id}\n            duration={scheduled_minutes}\n            isActive={isActive}\n            isDraggingTask={isDraggingTask}\n            tabIndex={0}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <Label isActive={isActive}>\n                <div\n                    style={{\n                        maxHeight: '100%',\n                        overflow: 'auto',\n                    }}\n                >\n                    {label}\n                </div>\n                <span>{icon}</span>\n            </Label>\n        </Container>\n    );\n};\n\nexport default memo(TaskCard);\n","import { useRef, useState } from 'react';\n\nexport default (type, payload) => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        evt.dataTransfer.setData(type, payload);\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport AppColumn from './AppColumn';\nimport Box from './atoms/Box';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport OptionBar from './OptionBar';\nimport TaskCard from './TaskCard';\nimport { COLORS, DEFAULT_TASK_ICON, GRID_UNIT } from './atoms/tokens';\n\nconst Container = styled(AppColumn).attrs({\n    label: 'Backlog',\n})(\n    ({ hasTasks, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        flex-grow: 1;\n        overflow: ${hasTasks ? 'auto' : 'visible'};\n    `\n);\n\nconst BacklogDropZone = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isTargetedForDrop, theme }) => `\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].BORDER_HOVER} inset`\n                : 'initial'\n        };\n        position: relative;\n    `\n);\n\nconst CreateFirstTaskTip = styled(Box)`\n    position: absolute;\n    left: calc(100% + ${GRID_UNIT} * 2);\n    top: 50%;\n    transform: translateY(-50%);\n    white-space: nowrap;\n`;\n\nconst Backlog = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    tasks,\n    onClickTask,\n    ...otherProps\n}) => {\n    const {\n        onChangeTaskPosition,\n        onChangeTheme,\n        onCreateTask,\n        onUpdateTask,\n    } = appActions;\n    const { theme } = appData;\n    const [backlogDropProps] = useDrop('task-id', taskId => {\n        onUpdateTask(taskId, {\n            scheduled: false,\n        });\n        onChangeTaskPosition(taskId, 0);\n    });\n    const [taskCardDropProps] = useDrop('task-id', (taskId, evt) => {\n        evt.stopPropagation();\n        const idOfTargetTask = toInt(evt.currentTarget.dataset.taskId);\n        const indexOfTarget = appData.tasks.findIndex(\n            task => task.id === idOfTargetTask\n        );\n        onChangeTaskPosition(taskId, indexOfTarget);\n    });\n    const unscheduledTasks = tasks.filter(task => !task.scheduled);\n    const hasTasks = tasks.length;\n\n    const handleClickNewTask = () => onCreateTask();\n\n    return (\n        <Container {...otherProps}>\n            <OptionBar\n                options={['DARK', 'LIGHT']}\n                renderOption={option => option.toLowerCase()}\n                renderSelectedOption={option => `${option} mode`}\n                selectedOption={theme}\n                onChange={onChangeTheme}\n            />\n            <BacklogDropZone {...backlogDropProps}>\n                <FlexBox\n                    justify=\"flex-start\"\n                    direction=\"column\"\n                    spacing={1}\n                    padding={1}\n                    style={{\n                        bottom: 0,\n                        left: 0,\n                        overflow: hasTasks ? 'auto' : 'visible',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                >\n                    <div style={{ position: 'relative', width: '100%' }}>\n                        {!hasTasks && (\n                            <CreateFirstTaskTip>\n                                <span\n                                    role=\"img\"\n                                    aria-label=\"left-pointing hand\"\n                                >\n                                    👈\n                                </span>{' '}\n                                Create your first task\n                            </CreateFirstTaskTip>\n                        )}\n                        <GhostButton\n                            style={{\n                                height: minutesToHeight(30),\n                            }}\n                            onClick={handleClickNewTask}\n                        >\n                            New Task\n                        </GhostButton>\n                    </div>\n                    {unscheduledTasks.map(task => (\n                        <TaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isActive={selectedTaskId === task.id}\n                            task={task}\n                            {...taskCardDropProps}\n                        />\n                    ))}\n                </FlexBox>\n            </BacklogDropZone>\n        </Container>\n    );\n};\n\nexport default memo(Backlog);\n","import React from 'react';\nimport { transparentize } from 'polished';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport { COLORS, END_ZONE_ICON, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst DROP_ZONE_RADIUS = '20vw';\n\nconst pulsingAnimation = ({ theme }) => keyframes`\n    0% {\n        box-shadow: 0 0 0 0 ${COLORS[theme.name].PRIMARY};\n        transform: scale(1);\n    }\n    100% {\n        box-shadow: 0 0 50px 0 ${COLORS[theme.name].PRIMARY};\n        transform: scale(1.2);\n    }\n`;\n\nconst Container = styled.div(\n    ({ isDraggingTask, isTargetedForDrop, theme }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop ? pulsingAnimation : 'unset'};\n        animation-timing-function: ease-in-out;\n        background: ${transparentize(\n            isTargetedForDrop ? 0 : isDraggingTask ? 0.35 : 0.8,\n            COLORS[theme.name].PRIMARY\n        )};\n        bottom: calc(${DROP_ZONE_RADIUS} * -1);\n        border-radius: calc(${DROP_ZONE_RADIUS} * 2);\n        height: calc(${DROP_ZONE_RADIUS} * 2);\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n        position: fixed;\n        right: calc(${DROP_ZONE_RADIUS} * -1);\n        transform: scale(${isDraggingTask ? 0.5 : 0.25});\n        width: calc(${DROP_ZONE_RADIUS} * 2);\n        z-index: 100;\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            align-items: center;\n            content: '${END_ZONE_ICON}';\n            display: flex;\n            font-size: 8rem;\n            justify-content: center;\n            height: calc(${DROP_ZONE_RADIUS} * 1.25);\n            left: 0;\n            position: absolute;\n            top: 0;\n            width: calc(${DROP_ZONE_RADIUS} * 1.25);\n        }\n    `\n);\n\nconst CompletedTaskDropZone = ({ appActions, appData, ...otherProps }) => {\n    const { onSelectTask, onUpdateTask } = appActions;\n    const { isDraggingTask } = appData;\n    const [dropProps] = useDrop('task-id', taskId => {\n        onUpdateTask(taskId, {\n            isComplete: true,\n        });\n        onSelectTask(currentSelectedTaskId => {\n            return currentSelectedTaskId === taskId\n                ? null\n                : currentSelectedTaskId;\n        });\n    });\n\n    return (\n        <Container\n            isDraggingTask={isDraggingTask}\n            {...dropProps}\n            {...otherProps}\n        />\n    );\n};\n\nexport default CompletedTaskDropZone;\n","import mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst useKeyboardShortcuts = keyMap => {\n    const onKeyDown = evt => {\n        const keysPressed = [];\n\n        if (evt.shiftKey) {\n            keysPressed.push('shift');\n        }\n\n        if (evt.metaKey) {\n            keysPressed.push('cmd');\n        }\n\n        keysPressed.push(evt.key.toLowerCase());\n\n        const sortedKeysPressed = uniq(keysPressed).sort();\n\n        mapKeys(keyMap, (handler, sequence) => {\n            const sequenceArray = sequence\n                .split('+')\n                .map(key => key.trim())\n                .sort();\n\n            if (sortedKeysPressed.join('+') === sequenceArray.join('+')) {\n                handler(evt);\n            }\n        });\n    };\n\n    return [onKeyDown];\n};\n\nexport default useKeyboardShortcuts;\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditing, isEmpty, theme }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        opacity: ${isEmpty ? 0.5 : 1};\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border: 2px dashed ${COLORS[theme.name].BORDER_HOVER};\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.5 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.5 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            &:before {\n                opacity: 1;\n            }\n        }\n    `\n);\n\nconst EditInPlace = ({\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    value = '',\n    wrapperStyles = {},\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [isRemotelyActivated]);\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = () => {\n        if (!isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    };\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const saveAndClose = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const close = () => {\n        setBufferedValue(value);\n        setIsEditing(false);\n    };\n\n    const ignoreKey = evt => {\n        evt.preventDefault();\n        return false;\n    };\n\n    const [onKeyDown] = useKeyboardShortcuts({\n        'cmd+escape': close,\n        'shift+escape': close,\n        'cmd+enter': saveAndClose,\n        'shift+enter': saveAndClose,\n        escape: saveAndClose,\n        enter: evt => {\n            if (isSingleLine) {\n                saveAndClose();\n                ignoreKey(evt);\n            }\n        },\n    });\n\n    return (\n        <Container\n            isEditing={isEditing}\n            isEmpty={isEmpty}\n            tabIndex={0}\n            onClick={handleClick}\n            {...otherProps}\n        >\n            <Box style={wrapperStyles}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                outline: '2px dotted red',\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <textarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                display: 'block',\n                                height: `${measuringElementHeight}px`,\n                                width: '100%',\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                            onKeyDown={onKeyDown}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Box>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React, { useLayoutEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport AppColumn from './AppColumn';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    DEFAULT_TASK_ICON,\n    DURATION_OPTIONS,\n} from './atoms/tokens';\n\nconst ANIMATION_DURATION = 200;\n\nconst Container = styled(AppColumn)(\n    ({ isLoading, theme }) => `\n        box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1);\n        border-left: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        border-right: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        overflow: unset;\n        z-index: 11;\n        \n        // Blackout curtain\n        &:before {\n            background-color: ${COLORS[theme.name].BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isLoading ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            transition: opacity ${ANIMATION_DURATION / 2 / 1000}s ease-in-out;\n            z-index: 10;\n        }\n    `\n);\n\nconst TaskHeader = styled(FlexBox).attrs({\n    as: 'h1',\n    align: 'flex-start',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: 1.4rem;\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-self: stretch;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst TaskDetails = ({\n    appActions = {},\n    appData = {},\n    isCreatingTask = false,\n    task = {},\n    ...otherProps\n}) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const { onUpdateTask } = appActions;\n    const { icon, id, label, notes, scheduled_minutes } = task;\n    const isEmpty = !task.id;\n\n    const handleUpdateTask = (field, value) =>\n        onUpdateTask(id, { [field]: value });\n\n    const handleSaveDuration = newDuration =>\n        handleUpdateTask('scheduled_minutes', newDuration);\n\n    const handleSaveIcon = newNotes => handleUpdateTask('icon', newNotes);\n\n    const handleSaveLabel = newLabel => handleUpdateTask('label', newLabel);\n\n    const handleSaveNotes = newNotes => handleUpdateTask('notes', newNotes);\n\n    useLayoutEffect(() => {\n        setIsLoading(true);\n        const newTimer = setTimeout(\n            () => setIsLoading(false),\n            ANIMATION_DURATION / 2\n        );\n        return () => clearTimeout(newTimer);\n    }, [task.id]);\n\n    return (\n        <Container\n            isLoading={isLoading}\n            label=\"Selected Task Details\"\n            {...otherProps}\n        >\n            {!isEmpty && !isLoading && (\n                <>\n                    <OptionBar\n                        renderSelectedOption={option => `${option} mins`}\n                        selectedOption={scheduled_minutes}\n                        options={DURATION_OPTIONS}\n                        onChange={handleSaveDuration}\n                    />\n\n                    <TaskHeader>\n                        <TaskHeaderLabel>\n                            <EditInPlace\n                                isRemotelyActivated={isCreatingTask}\n                                placeholder={COPY.empty_label}\n                                value={label}\n                                onSave={handleSaveLabel}\n                            />\n                        </TaskHeaderLabel>\n                        <TaskHeaderIcon>\n                            <EditInPlace\n                                placeholder={DEFAULT_TASK_ICON}\n                                value={icon}\n                                onSave={handleSaveIcon}\n                            />\n                        </TaskHeaderIcon>\n                    </TaskHeader>\n\n                    <EditInPlace\n                        isFlexible\n                        isMultiLine\n                        margin={1}\n                        placeholder={COPY.empty_notes}\n                        render={rawNotes => (\n                            <div\n                                className=\"markdown\"\n                                dangerouslySetInnerHTML={{\n                                    __html: marked(rawNotes),\n                                }}\n                            />\n                        )}\n                        wrapperStyles={{\n                            bottom: 0,\n                            left: 0,\n                            overflow: 'auto',\n                            position: 'absolute',\n                            right: 0,\n                            top: 0,\n                        }}\n                        value={notes}\n                        onSave={handleSaveNotes}\n                    />\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default TaskDetails;\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop('task-id', taskId =>\n            onUpdateTask(taskId, {\n                scheduled: true,\n                scheduled_time: newTime,\n            })\n        );\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToMinutes from '../utils/strToMinutes';\nimport toInt from '../utils/toInt';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: \"Today's Plan\",\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${transparentize(\n                isFaded ? 0.8 : 0.5,\n                COLORS[theme.name].BORDER_NEUTRAL\n            )};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ offsetMinutes }) => `\n        position: absolute;\n        left: calc(${GRID_UNIT} * 3);\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n        z-index: 2;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop('task-id', () => {});\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, COLORS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: 1.4em;\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: 15px;\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(JSON.parse(savedState) || initialState);\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import React, {\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport sample from 'lodash/sample';\nimport Backlog from './components/Backlog';\nimport CompletedTasksDropZone from './components/CompletedTasksDropZone';\nimport TaskDetails from './components/TaskDetails';\nimport Timeline from './components/Timeline';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport usePersistentState from './hooks/usePersistentState';\nimport {\n    COPY,\n    DEFAULT_TASK_ICON,\n    INITIAL_LISTS,\n    INITIAL_TASKS,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\n\n/*\n    activeListId: 123,\n    lists: [\n        {\n            id: 123,\n            label: 'Default List',\n        }\n    ],\n    tasks: [\n        {\n            id: 1,\n            list_id: 123,\n            icon: '🧺',\n            isComplete: false,\n            label: 'Take out the laundry',\n            notes:\n                'This is a note. **This is bold, I think?**\\n\\nWith two lines!\\n\\n- And a list\\n\\n- Of things\\n\\n- Like this!\\n\\n> Look, a blockquote! Oooh',\n            scheduled: false,\n            scheduled_minutes: 30,\n            scheduled_time: '14:00',\n        },\n    ],\n*/\n\nfunction App() {\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        1\n    );\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        null\n    );\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const selectedList = useMemo(\n        () => lists.find(list => list.id === selectedListId),\n        [lists, selectedListId]\n    );\n    const selectedTask = useMemo(\n        () => tasks.find(task => task.id === selectedTaskId),\n        [tasks, selectedTaskId]\n    );\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n    const hasIncompleteTasks = incompleteTasks.length;\n\n    const handleDragOver = () => setIsDraggingTask(true);\n\n    const handleDragEnd = () => setIsDraggingTask(false);\n\n    useEffect(() => {\n        handleDragEnd();\n    }, [tasks]);\n\n    const getTaskById = taskId => tasks.find(task => task.id === taskId);\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                currentTasks.concat([\n                    {\n                        icon: DEFAULT_TASK_ICON,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.motivational_descriptors)} ${\n                            COPY.new_task_label\n                        }`,\n                        notes: COPY.new_task_notes,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            setIsCreatingTask(true);\n\n            setTimeout(() => setIsCreatingTask(false), 1000);\n        },\n        [selectedListId, setSelectedTaskId, setTasks]\n    );\n\n    const onSelectTask = setSelectedTaskId;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const appActions = {\n        getTaskById,\n        onChangeTaskPosition,\n        onChangeTheme: setThemeName,\n        onCreateTask,\n        onSelectTask,\n        onUpdateTask,\n    };\n\n    const appData = {\n        isDraggingTask,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    return (\n        <ThemeProvider theme={{ name: themeName }}>\n            <GlobalStyle />\n            <CompletedTasksDropZone appActions={appActions} appData={appData} />\n            <FlexBox\n                align=\"stretch\"\n                direction=\"row-reverse\"\n                onDragOver={handleDragOver}\n                onDragEnd={handleDragEnd}\n            >\n                <Timeline\n                    appActions={appActions}\n                    appData={appData}\n                    selectedTaskId={selectedTaskId}\n                    from={TIMELINE_FROM}\n                    style={{\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                        width: '30vw',\n                        pointerEvents: hasIncompleteTasks ? 'all' : 'none',\n                    }}\n                    tasks={incompleteTasks}\n                    to={TIMELINE_TO}\n                />\n                <TaskDetails\n                    appActions={appActions}\n                    appData={appData}\n                    task={selectedTask}\n                    isCreatingTask={isCreatingTask}\n                    style={{\n                        width: '40vw',\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                    }}\n                />\n                <Backlog\n                    appActions={appActions}\n                    appData={appData}\n                    selectedTaskId={selectedTaskId}\n                    style={{\n                        width: '30vw',\n                    }}\n                    tasks={incompleteTasks}\n                />\n            </FlexBox>\n        </ThemeProvider>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}