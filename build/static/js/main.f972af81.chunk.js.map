{"version":3,"sources":["components/atoms/Icon.js","components/atoms/tokens.js","components/atoms/copy/motivational-descriptors.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","components/atoms/Button.js","components/atoms/Transition.js","hooks/useDrop.js","utils/minutesToHeight.js","utils/toInt.js","hooks/useDrag.js","components/TaskCard.js","components/ToolBar.js","components/TaskList.js","components/Trash.js","hooks/useKeyboardShortcuts.js","components/EditInPlace.js","components/ListCard.js","components/ListManager.js","components/OptionBar.js","components/TaskDetails.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/atoms/GlobalStyles.js","hooks/usePersistentState.js","index.js"],"names":["STYLE_PREFIX_MAP","solid","regular","light","duotone","brands","Icon","_ref","iconName","_ref$styleName","styleName","otherProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","SIDEBAR_DEFAULT_WIDTH","SIDEBAR_EXTENDED_WIDTH","DURATION_OPTIONS","GRID_UNIT","FONTS","NORMAL","LINE_HEIGHT","SIZE","LARGE","INITIAL_LISTS","id","isArchived","label","INITIAL_SELECTED_LIST_ID","INITIAL_TASKS","INITIAL_SELECTED_TASK_ID","LIST_CARD_HEIGHT","LIST_CARD_SPACING","LIST_CARD_WIDTH","MIN_SLOT_HEIGHT","ROUTE_TRANSITION_ANIMATION_DURATION","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","CREATE_NEW_TASK","DELETE_TASK","MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE","MOVE_BETWEEN_LISTS","PREFIX","SETTING_DURATION","TOGGLE_TASK_LIST","TOGGLE_DARK_MODE","TOGGLE_LIST_MANAGER","DARK","PRIMARY_FADED","darken","PRIMARY","BACKGROUND","HIGH_CONTRAST_BACKGROUND","HIGH_CONTRAST_TEXT","SHADED","setLightness","SHADOW","transparentize","TEXT","TEXT_FADED","TASK_BORDER","TASK_BORDER_HOVER","TASK_BORDER_ACTIVE","BORDER","BORDER_FADED","LIGHT","lighten","COLORS","ICON_PACKS","EMOJI","DARK_MODE","END_ZONE","LEFT","LIGHT_MODE","LIST_MANAGER","RIGHT","TASK_DETAILS","FONT_AWESOME","ICON_NAME","STYLE_NAME","keys","forEach","key","_ICON_PACKS$FONT_AWES","atoms_Icon","ICONS","TASK_DEFAULT","styled","div","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","name","Box","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","_ref$wrapped","wrapped","Container","FlexBox","attrs","ContentContainer","_ref2","ColumnHeader","_ref3","AppColumn","_ref4","children","PrimaryAppColumn","_ref5","Button","as","GhostButton","ToggleButton","isActive","Transition","isTransitioning","useDrop","dataTypeHandlers","_useState","useState","_useState2","slicedToArray","isTargetedForDrop","setIsTargetedForDrop","targetedElement","useRef","droppable","onDragEnter","evt","preventDefault","current","target","onDragOver","onDragLeave","onDrop","map","dataType","data","dataTransfer","getData","payload","length","isNaN","parseFloat","dataTypeHandler","minutesToHeight","minutes","toInt","str","parseInt","useDrag","dataTypes","isDragging","setIsDragging","draggable","onDragEnd","onDragStart","setData","duration","CardLabel","Math","min","CardIcon","memo","appActions","appData","task","onImmediatelySelectTask","onTransitionToTask","isShowingListManager","icon","scheduled_minutes","_useDrag","task-id","dragProps","TaskCard_Container","data-task-id","tabIndex","title","TIPS","onClick","ToolBar","hasTasks","TaskListToggleButton","isTaskListVisible","onChangeIsShowingTaskList","CreateFirstTaskTip","_templateObject","onChangeTaskPosition","onChangeTheme","onCreateTask","onUpdateTask","incompleteTasks","lists","selectedListId","selectedTaskId","isTaskListForcedOpen","setIsTaskListForcedOpen","selectedList","find","list","unscheduledTasks","filter","scheduled","list_id","_useDrop","taskId","backlogDropProps","useEffect","_useDrop3","droppedOnTaskId","currentTarget","dataset","droppedOnTaskIndex","tasks","findIndex","taskCardDropProps","TaskList_Container","Fragment","components_ToolBar","TaskList_TaskListToggleButton","style","height","overflow","position","width","role","aria-label","CREATE_TASK_LABEL","components_TaskCard","DROP_ZONE_RADIUS","pulsingAnimation","from","to","keyframes","Trash_templateObject","isDraggingTask","css","_templateObject2","Trash","onDeleteTask","onSelectList","onUpdateList","list-id","listId","firstUnarchivedList","dropProps","Trash_Container","INPUT_TAG_NAMES","isInput","node","tagName","toLowerCase","includes","useKeyboardShortcuts","keyMap","targetElementRef","arguments","undefined","onKeyDown","scopedToElementRef","keysDown","ctrlKey","push","shiftKey","metaKey","currentKeySequence","uniq","keyDown","sort","join","mapKeys","handler","sequence","shortcutKeySequence","split","trim","scopedElement","scopedToAnInput","elementWithFocusIsAnInput","document","activeElement","stopPropagation","buildKeyboardShortcutHandler","addEventListener","removeEventListener","isEditing","_ref$tracingElementSt","tracingElementStyles","StyledTextarea","textarea","EditInPlace_templateObject","Canvas","EditInPlace_templateObject2","_ref2$doubleClickToEd","doubleClickToEdit","_ref2$isMultiLine","isMultiLine","_ref2$isRemotelyActiv","isRemotelyActivated","_ref2$placeholder","placeholder","_ref2$render","render","value","_ref2$tracingElementS","_ref2$value","_ref2$canvasStyles","canvasStyles","_ref2$onSave","onSave","setIsEditing","_useState3","_useState4","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","containerElementRef","inputRef","measuringElementRef","isEmpty","isSingleLine","select","focus","el","offsetHeight","handleClick","useCallback","useMemo","saveAndClose","close","cmd + escape","shift + escape","cmd + enter","shift + enter","escape","enter","EditInPlace_Container","ref","onDoubleClick","objectSpread2","pointerEvents","opacity","whiteSpace","disabled","rows","onBlur","onChange","StyledListCard","ListCardTaskIconContainer","ListCard","listCardElementRef","targetListId","triggerClick","click","space","data-list-id","GhostListCard","ListCard_templateObject","ListManager","onCreateList","isCreatingList","unarchivedLists","sortedLists","sortBy","ListManager_Container","CREATE_LIST_LABEL","tasksInList","ListCard_ListCard","components_EditInPlace","alignSelf","flexGrow","flexShrink","newLabel","OptionButton","isSelected","OptionBar","options","_ref2$renderOption","renderOption","option","_ref2$renderSelectedO","renderSelectedOption","selectedOption","optionIndex","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","TaskDetails_templateObject2","DurationOptionBar","TaskDetails","_ref3$appActions","_ref3$appData","isCreatingTask","activeTask","notes","handleUpdateTask","field","[object Object]","handleSaveDuration","newDuration","handleSaveIcon","newNotes","handleSaveLabel","handleSaveNotes","EMPTY_LABEL","EMPTY_NOTES","rawNotes","dangerouslySetInnerHTML","__html","marked","bottom","left","right","top","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","floor","scheduled_time","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","onClickTask","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","createGlobalStyle","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","isShowingTaskList","setIsShowingTaskList","_usePersistentState3","_usePersistentState4","setLists","_usePersistentState5","_usePersistentState6","setSelectedListId","_usePersistentState7","_usePersistentState8","setIsShowingListManager","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","setSelectedTaskId","_usePersistentState13","_usePersistentState14","themeName","setThemeName","setIsCreatingList","setIsCreatingTask","setIsDraggingTask","_useState7","_useState8","setIsTransitioning","currentListIndex","isComplete","hasIncompleteTasks","handleDragOver","handleDragEnd","overrides","newListId","currentLists","sample","MOTIVATIONAL_DESCRIPTORS","NEW_LIST_LABEL","setTimeout","updates","prevLists","prevTasks","newTaskId","currentTasks","NEW_TASK_LABEL","NEW_TASK_NOTES","clearTimeout","transition","callback","onChangeIsShowingListManager","newIsShowingListManager","firstUnarchivedTask","newIndex","tasksMinusTarget","slice","moveTaskToTimeline","moveTaskToTaskList","selectNextList","nextListIndex","nextIndex","selectPreviousList","prevListIndex","prevIndex","setTaskDuration","toggleTaskListVisibility","toggleDarkMode","toggleIsEditingCurrentTask","toggleIsShowingListManager","createNewTask","deleteCurrentTask","reduce","acc","index","bind","cmd + arrowRight","cmd + arrowLeft","cmd + shift + arrowRight","cmd + shift + arrowLeft","cmd + shift + ]","cmd + shift + [","b","d","e","l","n","t","columnWidths","backlog","listManager","taskDetails","timeline","styled_components_browser_esm","GlobalStyles","components_Trash","components_Timeline","LABEL_FOR_LIST_MANAGER","LABEL_FOR_TASK_DETAILS","atoms_Transition","components_ListManager","components_TaskDetails","components_TaskList","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.f972af81.chunk.js","sourcesContent":["import React from 'react';\n\nconst STYLE_PREFIX_MAP = {\n    solid: 'fas',\n    regular: 'far',\n    light: 'fal',\n    duotone: 'fad',\n    brands: 'fab',\n};\n\nconst Icon = ({ iconName, styleName = 'regular', ...otherProps }) => (\n    <i\n        className={`${STYLE_PREFIX_MAP[styleName]} fa-${iconName}`}\n        {...otherProps}\n    />\n);\n\nexport default Icon;\n","import React from 'react';\nimport { darken, lighten, setLightness, transparentize } from 'polished';\nimport MOTIVATIONAL_DESCRIPTORS from './copy/motivational-descriptors';\nimport Icon from './Icon';\n\nexport const SIDEBAR_DEFAULT_WIDTH = '30vw';\nexport const SIDEBAR_EXTENDED_WIDTH = '40vw';\nexport const BORDER_RADIUS = '3px';\nexport const BORDER_WIDTH = '1px';\nexport const BULLET_SIZE = '10px';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '30px';\nexport const FONTS = {\n    NORMAL: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.5)` },\n    LARGE: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.75)` },\n};\nexport const HOURS_PER_SCREEN = 10;\nexport const INITIAL_LISTS = [\n    {\n        id: 1,\n        isArchived: false,\n        label: 'Default List',\n    },\n];\nexport const INITIAL_SELECTED_LIST_ID = (INITIAL_LISTS[0] || {}).id;\nexport const INITIAL_TASKS = [];\nexport const INITIAL_SELECTED_TASK_ID = (INITIAL_TASKS[0] || {}).id;\nexport const LIST_CARD_HEIGHT = `calc(${GRID_UNIT} * 8)`;\nexport const LIST_CARD_SPACING = `calc(${GRID_UNIT} * 0.5)`;\nexport const LIST_CARD_WIDTH = `calc((100% - (${LIST_CARD_SPACING} * 2)) / 3)`;\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const ROUTE_TRANSITION_ANIMATION_DURATION = 250;\nexport const TIMELINE_FROM = '6:00';\nexport const TIMELINE_TO = '30:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.MOTIVATIONAL_DESCRIPTORS = MOTIVATIONAL_DESCRIPTORS;\nCOPY.EMPTY_LABEL = '...label?';\nCOPY.EMPTY_NOTES = '...notes?';\nCOPY.LABEL_FOR_LIST_MANAGER = 'Switch Lists';\nCOPY.LABEL_FOR_TASK_DETAILS = 'Back to Task';\nCOPY.CREATE_LIST_LABEL = 'Create List';\nCOPY.CREATE_TASK_LABEL = 'Create Task';\nCOPY.NEW_LIST_LABEL = 'New List';\nCOPY.NEW_TASK_LABEL = `New Task`;\nCOPY.NEW_TASK_NOTES = '';\nCOPY.TIPS = {\n    CREATE_NEW_TASK: 'Press [N] to create a [N]ew task in the current list',\n    DELETE_TASK: 'Press [T] to move the selected task to the [T]rash',\n    MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE:\n        'Press [⌘]+[LEFT or RIGHT] to move the selected task to the TaskList or Timeline, respectively',\n    MOVE_BETWEEN_LISTS:\n        'Press [⌘]+[SHIFT]+[LEFT or RIGHT] to move between your lists',\n    PREFIX: 'Tip ☝️: ',\n    SETTING_DURATION:\n        'Press keys [1] to [6] to quickly adjust your time estimate for the selected task',\n    TOGGLE_TASK_LIST:\n        'Press [B] to show / hide the side[B]ar of unscheduled tasks',\n    TOGGLE_DARK_MODE: 'Press [D] to toggle [D]ark Mode',\n    TOGGLE_LIST_MANAGER: 'Press [L] to see your [L]ists',\n};\n\nexport { COPY };\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = '#FFB73E';\nDARK.PRIMARY_FADED = darken(0.2, DARK.PRIMARY);\nDARK.BACKGROUND = '#00010F';\nDARK.HIGH_CONTRAST_BACKGROUND = DARK.PRIMARY;\nDARK.HIGH_CONTRAST_TEXT = DARK.BACKGROUND;\nDARK.SHADED = setLightness(0.04, DARK.PRIMARY);\nDARK.SHADOW = transparentize(0.95, DARK.BACKGROUND);\nDARK.TEXT = DARK.PRIMARY;\nDARK.TEXT_FADED = setLightness(0.35, DARK.TEXT);\nDARK.TASK_BORDER = transparentize(0.5, DARK.PRIMARY);\nDARK.TASK_BORDER_HOVER = transparentize(0.5, DARK.PRIMARY);\nDARK.TASK_BORDER_ACTIVE = DARK.PRIMARY;\nDARK.BORDER = setLightness(0.15, DARK.PRIMARY);\nDARK.BORDER_FADED = DARK.TEXT_FADED;\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.PRIMARY_FADED = lighten(0.2, LIGHT.PRIMARY);\nLIGHT.BACKGROUND = '#FFFFFF';\nLIGHT.HIGH_CONTRAST_BACKGROUND = LIGHT.PRIMARY;\nLIGHT.HIGH_CONTRAST_TEXT = LIGHT.BACKGROUND;\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.SHADOW = transparentize(0.8, setLightness(0.25, LIGHT.PRIMARY));\nLIGHT.TEXT = setLightness(0.15, LIGHT.PRIMARY);\nLIGHT.TEXT_FADED = transparentize(0.4, LIGHT.TEXT);\nLIGHT.TASK_BORDER = transparentize(0.5, LIGHT.PRIMARY);\nLIGHT.TASK_BORDER_HOVER = transparentize(0.5, LIGHT.PRIMARY);\nLIGHT.TASK_BORDER_ACTIVE = LIGHT.PRIMARY;\nLIGHT.BORDER = transparentize(0.75, LIGHT.TEXT);\nLIGHT.BORDER_FADED = transparentize(0.25, LIGHT.TEXT_FADED);\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\n\nconst ICON_PACKS = {\n    EMOJI: {\n        DARK_MODE: '🌚',\n        END_ZONE: '🗑',\n        LEFT: '👈',\n        LIGHT_MODE: '🌞',\n        LIST_MANAGER: '📚',\n        RIGHT: '👉',\n        TASK_DETAILS: '📌',\n    },\n    FONT_AWESOME: {\n        DARK_MODE: {\n            ICON_NAME: 'moon-stars',\n            STYLE_NAME: 'light',\n        },\n        END_ZONE: {\n            ICON_NAME: 'trash-alt',\n            STYLE_NAME: 'light',\n        },\n        LEFT: {\n            ICON_NAME: 'long-arrow-left',\n            STYLE_NAME: 'light',\n        },\n        LIGHT_MODE: {\n            ICON_NAME: 'sun',\n            STYLE_NAME: 'light',\n        },\n        LIST_MANAGER: {\n            ICON_NAME: 'book',\n            STYLE_NAME: 'light',\n        },\n        RIGHT: {\n            ICON_NAME: 'long-arrow-right',\n            STYLE_NAME: 'light',\n        },\n        TASK_DETAILS: {\n            ICON_NAME: 'thumbtack',\n            STYLE_NAME: 'light',\n        },\n    },\n};\n\nObject.keys(ICON_PACKS.FONT_AWESOME).forEach(key => {\n    const { ICON_NAME, STYLE_NAME } = ICON_PACKS.FONT_AWESOME[key];\n    ICON_PACKS.FONT_AWESOME[key] = (\n        <Icon iconName={ICON_NAME} styleName={STYLE_NAME} />\n    );\n});\n\nconst ICONS = ICON_PACKS.FONT_AWESOME;\n\nICONS.TASK_DEFAULT = '📌';\n\nexport { ICONS };\n","export default [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\n","import styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from './tokens';\n\nexport default styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = 0,\n        marginX = 0,\n        marginY = 0,\n        padding = 0,\n        paddingX = 0,\n        paddingY = 0,\n        theme,\n    }) => `\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        isFlexible = false,\n        justify = 'stretch',\n        spacing = 0,\n        wrapped = false,\n    }) => `\n        align-items: ${align};\n        display: flex;\n        flex-direction: ${direction};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        flex-wrap: ${wrapped ? 'wrap' : 'nowrap'}; \n        justify-content: ${justify};\n        width: 100%;\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_WIDTH,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})(\n    ({ theme }) => `\n        height: calc(100vh - ${GRID_UNIT});\n        overflow: auto;\n        position: relative;\n        ${UNIFIED_TRANSITION};\n        \n        & > * {\n            align-self: stretch;\n        }\n    `\n);\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        border-bottom:\n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({ children, label, ...otherProps }) => (\n    <Container>\n        <ColumnHeader>{label}</ColumnHeader>\n        <ContentContainer {...otherProps}>{children}</ContentContainer>\n    </Container>\n);\n\nexport const PrimaryAppColumn = styled(AppColumn)(\n    ({ theme }) => `\n        box-shadow: 0 0 10px 10px ${COLORS[theme.name].SHADOW};\n        border-left: ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        border-right: \n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        overflow: unset;\n        z-index: 11;\n    `\n);\n\nexport default AppColumn;\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport { BORDER_RADIUS, COLORS, UNIFIED_TRANSITION } from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    as: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].PRIMARY};\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].TEXT};\n        cursor: pointer;\n        transform: translateY(0);\n        ${UNIFIED_TRANSITION};\n        transition-property: border, color;\n        \n        &:focus,\n        &:hover {\n            border-color: ${COLORS[theme.name].PRIMARY};\n        }\n        &:active {\n            transform: translateY(2px);\n        }\n    `\n);\n\nexport const GhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        border: 2px dashed ${COLORS[theme.name].BORDER_FADED};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n            border-style: solid;\n        }\n    `\n);\n\nexport const ToggleButton = styled(Button)(\n    ({ isActive, theme }) => `\n        background: unset;\n        border: 2px solid transparent;\n        width: auto;\n    `\n);\n\nexport default Button;\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport {\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Transition = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isTransitioning }) => `\n        opacity: ${isTransitioning ? 0 : 1};\n        ${UNIFIED_TRANSITION};\n        transition-duration: ${ROUTE_TRANSITION_ANIMATION_DURATION / 2}ms;\n    `\n);\n\nexport default Transition;\n","import { useRef, useState } from 'react';\n\nconst useDrop = dataTypeHandlers => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        Object.keys(dataTypeHandlers).map(dataType => {\n            const data = evt.dataTransfer.getData(dataType);\n            const payload =\n                data.length === 0\n                    ? null\n                    : isNaN(data)\n                    ? data\n                    : parseFloat(data);\n\n            if (payload !== null) {\n                const dataTypeHandler = dataTypeHandlers[dataType];\n                dataTypeHandler(payload, evt);\n            }\n\n            return dataType;\n        });\n\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","export default str => parseInt(str, 10);\n","import { useState } from 'react';\n\nconst useDrag = dataTypes => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        Object.keys(dataTypes).map(dataType => {\n            evt.dataTransfer.setData(dataType, dataTypes[dataType]);\n            return dataType;\n        });\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 ${isActive ? 2 : 1}px\n            ${\n                COLORS[theme.name][\n                    isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER'\n                ]\n            };\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        width: 100%;\n        z-index: ${isActive ? 100 : 10};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n            \n        &::selection {\n            /*color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};*/\n            color: purple;\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        }\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${\n                COLORS[theme.name][\n                    isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                ]\n            };\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].TASK_BORDER_ACTIVE};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${\n                COLORS[theme.name].TASK_BORDER_ACTIVE\n            } inset;\n        }\n        \n        ${CardLabel} {\n            color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n            min-height: ${minutesToHeight(Math.min(30, duration))};\n        }\n\n        ${CardIcon} {\n            height: ${minutesToHeight(Math.min(30, duration))};\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'center',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ duration, theme }) => `\n        font-size: ${duration <= 15 ? FONTS.NORMAL.SIZE : FONTS.LARGE.SIZE};\n        width: auto;\n    `\n);\n\nconst TaskCard = ({ appActions, appData, isActive, task, ...otherProps }) => {\n    const { onImmediatelySelectTask, onTransitionToTask } = appActions;\n    const { isShowingListManager } = appData;\n    const { icon, id, label, scheduled_minutes } = task;\n    const [dragProps] = useDrag({ 'task-id': id });\n\n    const handleClick = () => {\n        if (isShowingListManager) {\n            onImmediatelySelectTask(id);\n            return;\n        }\n\n        onTransitionToTask(id);\n    };\n\n    return (\n        <Container\n            data-task-id={id}\n            duration={scheduled_minutes}\n            isActive={isActive}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <CardLabel>{label}</CardLabel>\n            <CardIcon duration={scheduled_minutes}>{icon}</CardIcon>\n        </Container>\n    );\n};\n\nexport default memo(TaskCard);\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'space-between',\n    paddingX: 0.5,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React, { memo, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport AppColumn from './AppColumn';\nimport Box from './atoms/Box';\nimport { GhostButton, ToggleButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport TaskCard from './TaskCard';\nimport { COLORS, COPY, GRID_UNIT, ICONS } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst Container = styled(AppColumn)(\n    ({ hasTasks, isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        flex-grow: 1;\n        overflow: ${hasTasks ? 'auto' : 'visible'};\n        position: relative;\n        \n        &:before {\n            box-shadow: ${\n                isTargetedForDrop\n                    ? `0 0 0 5px ${COLORS[theme.name].TASK_BORDER_HOVER} inset`\n                    : 'initial'\n            };\n            bottom: 0;\n            content: '';\n            left: 0;\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 1000;\n        }\n    `\n);\n\nconst TaskListToggleButton = ({\n    isTaskListVisible,\n    onChangeIsShowingTaskList,\n}) => (\n    <ToggleButton\n        isActive={isTaskListVisible}\n        title={COPY.TIPS.TOGGLE_TASK_LIST}\n        onClick={() => onChangeIsShowingTaskList(!isTaskListVisible)}\n    >\n        {isTaskListVisible ? ICONS.LEFT : ICONS.RIGHT}\n    </ToggleButton>\n);\n\nconst CreateFirstTaskTip = styled(Box)`\n    position: absolute;\n    left: calc(100% + ${GRID_UNIT} * 2);\n    top: 50%;\n    transform: translateY(-50%);\n    white-space: nowrap;\n`;\n\nconst TaskList = ({ appActions, appData, ...otherProps }) => {\n    const {\n        onChangeIsShowingTaskList,\n        onChangeTaskPosition,\n        onChangeTheme,\n        onCreateTask,\n        onUpdateTask,\n    } = appActions;\n    const {\n        incompleteTasks,\n        isTaskListVisible,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        theme,\n    } = appData;\n    const [isTaskListForcedOpen, setIsTaskListForcedOpen] = useState(false);\n    const selectedList = lists.find(list => list.id === selectedListId);\n    const unscheduledTasks = incompleteTasks.filter(\n        task =>\n            !task.scheduled &&\n            task.list_id === selectedListId &&\n            !selectedList.isArchived\n    );\n    const hasTasks = unscheduledTasks.length;\n\n    const [backlogDropProps] = useDrop({\n        'task-id': taskId => {\n            onUpdateTask(taskId, {\n                list_id: selectedListId,\n                scheduled: false,\n            });\n        },\n    });\n\n    useEffect(() => {\n        if (!isTaskListVisible && backlogDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(true);\n            onChangeIsShowingTaskList(true);\n            return;\n        }\n\n        if (isTaskListForcedOpen && !backlogDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(false);\n            onChangeIsShowingTaskList(false);\n        }\n    }, [\n        backlogDropProps.isTargetedForDrop,\n        isTaskListForcedOpen,\n        isTaskListVisible,\n        setIsTaskListForcedOpen,\n        onChangeIsShowingTaskList,\n    ]);\n\n    const [taskCardDropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n            const droppedOnTaskIndex = appData.tasks.findIndex(\n                task => task.id === droppedOnTaskId\n            );\n            onChangeTaskPosition(taskId, droppedOnTaskIndex);\n        },\n    });\n\n    return (\n        <Container\n            label={!isTaskListVisible ? '' : selectedList.label}\n            {...backlogDropProps}\n            {...otherProps}\n        >\n            {!isTaskListVisible ? (\n                <TaskListToggleButton\n                    isTaskListVisible={isTaskListVisible}\n                    onChangeIsShowingTaskList={onChangeIsShowingTaskList}\n                />\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={COPY.TIPS.TOGGLE_DARK_MODE}\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT'\n                                ? ICONS.DARK_MODE\n                                : ICONS.LIGHT_MODE}\n                        </ToggleButton>\n                        <TaskListToggleButton\n                            isTaskListVisible={isTaskListVisible}\n                            onChangeIsShowingTaskList={\n                                onChangeIsShowingTaskList\n                            }\n                        />\n                    </ToolBar>\n                    <FlexBox\n                        isFlexible\n                        justify=\"flex-start\"\n                        direction=\"column\"\n                        spacing={0.5}\n                        padding={1}\n                        style={{\n                            height: '100%',\n                            overflow: hasTasks ? 'auto' : 'visible',\n                        }}\n                    >\n                        <div style={{ position: 'relative', width: '100%' }}>\n                            {!hasTasks && (\n                                <CreateFirstTaskTip>\n                                    <span\n                                        role=\"img\"\n                                        aria-label=\"left-pointing hand\"\n                                    >\n                                        {ICONS.LEFT}\n                                    </span>{' '}\n                                    Create your first task\n                                </CreateFirstTaskTip>\n                            )}\n                            <GhostButton\n                                style={{\n                                    height: minutesToHeight(30),\n                                }}\n                                title={COPY.TIPS.CREATE_NEW_TASK}\n                                onClick={() => onCreateTask()}\n                            >\n                                {COPY.CREATE_TASK_LABEL}\n                            </GhostButton>\n                        </div>\n                        {unscheduledTasks.map(task => (\n                            <TaskCard\n                                key={task.id}\n                                appActions={appActions}\n                                appData={appData}\n                                isActive={selectedTaskId === task.id}\n                                task={task}\n                                {...taskCardDropProps}\n                            />\n                        ))}\n                    </FlexBox>\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default memo(TaskList);\n","import React from 'react';\nimport { transparentize } from 'polished';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst DROP_ZONE_RADIUS = `calc(${GRID_UNIT} * 3.5)`;\n\nconst pulsingAnimation = ({ from, to }) => keyframes`\n    0% {\n        transform: scale(${from});\n    }\n    100% {\n        transform: scale(${to});\n    }\n`;\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-end',\n    justify: 'flex-end',\n    padding: 1,\n})(\n    ({ isDraggingTask, isTargetedForDrop, theme }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop\n            ? pulsingAnimation({ from: 1.6, to: 2.4 })\n            : isDraggingTask\n            ? pulsingAnimation({ from: 1, to: 1.6 })\n            : 'unset'};\n        animation-timing-function: ease-in-out;\n        bottom: 0;\n        font-size: 3rem;\n        height: calc(${DROP_ZONE_RADIUS} * 2);\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n        position: fixed;\n        right: 0;\n        transform: scale(${isDraggingTask ? 1.5 : 1});\n        transform-origin: bottom right;\n        width: calc(${DROP_ZONE_RADIUS} * 2);\n        z-index: 1000;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst Trash = ({ appActions, appData, ...otherProps }) => {\n    const { onDeleteTask, onSelectList, onUpdateList } = appActions;\n    const { isDraggingTask, lists, selectedListId } = appData;\n    const [dropProps] = useDrop({\n        'list-id': listId => {\n            if (selectedListId === listId) {\n                const firstUnarchivedList = lists.find(\n                    list => list.id !== listId && !list.isArchived\n                );\n\n                if (firstUnarchivedList) {\n                    onSelectList(firstUnarchivedList.id);\n                }\n            }\n\n            onUpdateList(listId, {\n                isArchived: true,\n            });\n        },\n        'task-id': onDeleteTask,\n    });\n\n    return (\n        <Container\n            isDraggingTask={isDraggingTask}\n            title={COPY.TIPS.DELETE_TASK}\n            {...dropProps}\n            {...otherProps}\n        >\n            {ICONS.END_ZONE}\n        </Container>\n    );\n};\n\nexport default Trash;\n","import { useEffect } from 'react';\nimport mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nconst buildKeyboardShortcutHandler = (keyMap, scopedToElementRef) => evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    const currentKeySequence = uniq(keysDown)\n        .map(keyDown => keyDown.toLowerCase())\n        .sort()\n        .join('+');\n\n    mapKeys(keyMap, (handler, sequence) => {\n        const shortcutKeySequence = sequence\n            .split('+')\n            .map(key => key.trim().toLowerCase())\n            .sort()\n            .join('+');\n\n        if (currentKeySequence === shortcutKeySequence) {\n            const scopedElement = scopedToElementRef.current;\n            const scopedToAnInput = scopedElement && isInput(scopedElement);\n            const elementWithFocusIsAnInput = isInput(document.activeElement);\n\n            if (\n                (scopedElement && evt.target === scopedElement) ||\n                scopedToAnInput\n            ) {\n                evt.stopPropagation();\n            }\n\n            if (!scopedToAnInput && elementWithFocusIsAnInput) {\n                return false;\n            }\n\n            return handler(evt);\n        }\n    });\n};\n\nconst useKeyboardShortcuts = (keyMap, targetElementRef = { current: null }) => {\n    useEffect(() => {\n        const onKeyDown = buildKeyboardShortcutHandler(\n            keyMap,\n            targetElementRef\n        );\n\n        document.addEventListener('keydown', onKeyDown);\n\n        return () => document.removeEventListener('keydown', onKeyDown);\n    }, [keyMap, targetElementRef]);\n};\n\nexport default useKeyboardShortcuts;\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditing, theme, tracingElementStyles = () => {} }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border:\n                ${\n                    isEditing\n                        ? 'none'\n                        : `2px dashed ${COLORS[theme.name].BORDER}`\n                };\n            box-shadow:\n                ${\n                    isEditing\n                        ? `0 0 0 2px ${COLORS[theme.name].PRIMARY}`\n                        : `0 0 0 0 ${COLORS[theme.name].PRIMARY}`\n                };\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.25 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.25 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n            ${tracingElementStyles(theme)}\n        }\n        \n        &:focus,\n        &:hover {\n            &:before {\n                opacity: 1;\n            }\n        }\n    `\n);\n\nconst StyledTextarea = styled.textarea`\n    display: block;\n    height: 100%;\n    width: 100%;\n`;\n\nconst Canvas = styled(Box)``;\n\nconst EditInPlace = ({\n    doubleClickToEdit = false,\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    tracingElementStyles = () => {},\n    value = '',\n    canvasStyles = {},\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const containerElementRef = useRef(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = useCallback(() => {\n        if (!isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    }, [isEditing, setBufferedValue, setIsEditing, value]);\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [handleClick, isRemotelyActivated]);\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const keyMap = useMemo(() => {\n        const saveAndClose = () => {\n            onSave(bufferedValue);\n            setIsEditing(false);\n        };\n\n        const close = () => {\n            setBufferedValue(value);\n            setIsEditing(false);\n        };\n\n        return {\n            'cmd + escape': close,\n            'shift + escape': close,\n            'cmd + enter': saveAndClose,\n            'shift + enter': saveAndClose,\n            'escape': saveAndClose,\n            'enter': evt => {\n                if (\n                    evt.target.tagName.toLowerCase() === 'textarea' &&\n                    isSingleLine\n                ) {\n                    saveAndClose();\n                    evt.preventDefault();\n                    return false;\n                }\n\n                if (evt.target === containerElementRef.current) {\n                    evt.preventDefault();\n                    handleClick();\n                }\n            },\n        };\n    }, [bufferedValue, handleClick, onSave, isSingleLine, value]);\n\n    useKeyboardShortcuts(keyMap, inputRef);\n\n    return (\n        <Container\n            isEditing={isEditing}\n            ref={containerElementRef}\n            tabIndex={0}\n            tracingElementStyles={tracingElementStyles}\n            onClick={!doubleClickToEdit ? handleClick : null}\n            onDoubleClick={doubleClickToEdit ? handleClick : null}\n            {...otherProps}\n        >\n            <Canvas isEmpty={isEmpty} style={{ ...canvasStyles }}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <StyledTextarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                height: `${measuringElementHeight}px`,\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Canvas>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React, { useCallback, useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst StyledListCard = styled(FlexBox).attrs({\n    align: 'flex-start',\n    direction: 'column',\n    justify: 'space-between',\n    spacing: 0.5,\n})(\n    ({ isActive, isTargetedForDrop, theme }) => `\n        background-color: ${\n            COLORS[theme.name][\n                isActive ? 'HIGH_CONTRAST_BACKGROUND' : 'PRIMARY_FADED'\n            ]\n        };\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 2px ${isActive ? COLORS[theme.name].SHADED : 'transparent'},\n            0 0 0 4px ${\n                isActive\n                    ? COLORS[theme.name][\n                          isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                      ]\n                    : 'transparent'\n            };\n        color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        cursor: pointer;\n        height: ${LIST_CARD_HEIGHT};\n        margin-bottom: ${LIST_CARD_SPACING};\n        margin-left: ${LIST_CARD_SPACING};\n        overflow: hidden;\n        position: relative;\n        transform: scale(${isTargetedForDrop ? 1.1 : 1});\n        width: ${LIST_CARD_WIDTH};\n        ${UNIFIED_TRANSITION};\n        \n        &:nth-child(3n+4) {\n            margin-left: 0;\n        }\n        \n        &:active,\n        &:focus,\n        &:hover {\n            box-shadow:\n                0 0 0 2px ${COLORS[theme.name].SHADED},\n                0 0 0 4px ${\n                    COLORS[theme.name][\n                        isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                    ]\n                };\n        }\n    `\n);\nexport const ListCardTaskIconContainer = styled(FlexBox).attrs({\n    justify: 'flex-start',\n    paddingX: 0.25,\n    paddingY: 0.25,\n    wrapped: true,\n})(\n    ({ isActive }) => `\n        background-color: rgba(255, 255, 255, ${isActive ? 0.75 : 0.25});\n        border-radius: ${BORDER_RADIUS};\n        border-top-right-radius: 0;\n        border-top-left-radius: 0;\n        margin: 5px;\n        width: calc(100% - (5px * 2));\n    `\n);\nexport const ListCard = ({ appActions, children, listId, ...otherProps }) => {\n    const { onUpdateTask } = appActions;\n    const listCardElementRef = useRef(null);\n\n    const [dragProps] = useDrag({ 'list-id': listId });\n\n    const [dropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const targetListId = toInt(evt.currentTarget.dataset.listId);\n            if (targetListId) {\n                onUpdateTask(taskId, {\n                    list_id: targetListId,\n                });\n            }\n        },\n    });\n\n    const triggerClick = useCallback(evt => {\n        evt.preventDefault();\n        evt.target.click();\n    }, []);\n\n    const keyMap = useMemo(\n        () => ({\n            enter: triggerClick,\n            space: triggerClick,\n        }),\n        [triggerClick]\n    );\n\n    useKeyboardShortcuts(keyMap, listCardElementRef);\n\n    return (\n        <StyledListCard\n            data-list-id={listId}\n            ref={listCardElementRef}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_BETWEEN_LISTS}\n            {...dragProps}\n            {...dropProps}\n            {...otherProps}\n        >\n            {children}\n        </StyledListCard>\n    );\n};\nexport const GhostListCard = styled(GhostButton).attrs({\n    align: 'center',\n    justify: 'center',\n})`\n    height: ${LIST_CARD_HEIGHT};\n    margin-bottom: ${LIST_CARD_SPACING};\n    width: ${LIST_CARD_WIDTH};\n`;\n","import sortBy from 'lodash/sortBy';\nimport React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, COPY, GRID_UNIT } from './atoms/tokens';\nimport EditInPlace from './EditInPlace';\nimport { GhostListCard, ListCard, ListCardTaskIconContainer } from './ListCard';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n    justify: 'flex-start',\n    padding: 1,\n    wrapped: true,\n})(\n    ({ theme }) => `\n        align-content: flex-start;\n        background-color: ${COLORS[theme.name].SHADED};\n        height: 100%;\n        overflow: auto;\n        padding-bottom: calc(${GRID_UNIT} * 1.5);\n    `\n);\n\nconst ListManager = ({ appActions, appData }) => {\n    const { onCreateList, onSelectList, onUpdateList } = appActions;\n    const { incompleteTasks, isCreatingList, lists, selectedListId } = appData;\n    const unarchivedLists = lists.filter(list => !list.isArchived);\n    const sortedLists = sortBy(unarchivedLists, [list => list.label]);\n\n    const tracingElementStyles = theme => `\n        border-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT}\n    `;\n\n    return (\n        <Container>\n            <GhostListCard onClick={() => onCreateList()}>\n                {COPY.CREATE_LIST_LABEL}\n            </GhostListCard>\n            {sortedLists.map(list => {\n                const isActive = selectedListId === list.id;\n                const tasksInList = incompleteTasks.filter(\n                    task => task.list_id === list.id\n                );\n\n                return (\n                    <ListCard\n                        key={list.id}\n                        appActions={appActions}\n                        isActive={isActive}\n                        listId={list.id}\n                        onClick={() => onSelectList(list.id)}\n                    >\n                        <EditInPlace\n                            isRemotelyActivated={\n                                isCreatingList && selectedListId === list.id\n                            }\n                            marginX={0.75}\n                            marginY={0.5}\n                            style={{\n                                alignSelf: 'stretch',\n                                flexGrow: 0,\n                                flexShrink: 0,\n                            }}\n                            tracingElementStyles={tracingElementStyles}\n                            value={list.label}\n                            onSave={newLabel => {\n                                onUpdateList(list.id, { label: newLabel });\n                            }}\n                        />\n                        {tasksInList.length >= 1 && (\n                            <ListCardTaskIconContainer isActive={isActive}>\n                                {tasksInList.map(task => (\n                                    <span key={task.id}>{task.icon}</span>\n                                ))}\n                            </ListCardTaskIconContainer>\n                        )}\n                    </ListCard>\n                );\n            })}\n        </Container>\n    );\n};\n\nexport default ListManager;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0.75};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map((option, optionIndex) => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(\n                              renderOption(option, optionIndex),\n                              optionIndex\n                          )\n                        : renderOption(option, optionIndex)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    ICONS,\n    DURATION_OPTIONS,\n    FONTS,\n    BORDER_WIDTH,\n} from './atoms/tokens';\n\nconst TaskHeader = styled(FlexBox).attrs({\n    as: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: ${FONTS.LARGE.SIZE};\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-self: stretch;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst DurationOptionBar = styled(OptionBar)(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        border-top: ${BORDER_WIDTH} solid ${COLORS[theme.name].BACKGROUND};\n    `\n);\n\nconst TaskDetails = ({ appActions = {}, appData = {} }) => {\n    const { onUpdateTask } = appActions;\n    const { isCreatingTask, selectedTaskId, tasks } = appData;\n    const activeTask = tasks.find(task => task.id === selectedTaskId) || {};\n    const { icon, id, label, notes, scheduled_minutes } = activeTask;\n    const isEmpty = !activeTask.id;\n\n    const handleUpdateTask = useCallback(\n        (field, value) => onUpdateTask(id, { [field]: value }),\n        [id, onUpdateTask]\n    );\n\n    const handleSaveDuration = useCallback(\n        newDuration => handleUpdateTask('scheduled_minutes', newDuration),\n        [handleUpdateTask]\n    );\n\n    const handleSaveIcon = useCallback(\n        newNotes => handleUpdateTask('icon', newNotes),\n        [handleUpdateTask]\n    );\n\n    const handleSaveLabel = useCallback(\n        newLabel => handleUpdateTask('label', newLabel),\n        [handleUpdateTask]\n    );\n\n    const handleSaveNotes = useCallback(\n        newNotes => handleUpdateTask('notes', newNotes),\n        [handleUpdateTask]\n    );\n\n    return (\n        !isEmpty && (\n            <>\n                <TaskHeader>\n                    <TaskHeaderLabel>\n                        <EditInPlace\n                            isRemotelyActivated={isCreatingTask}\n                            placeholder={COPY.EMPTY_LABEL}\n                            value={label}\n                            onSave={handleSaveLabel}\n                        />\n                    </TaskHeaderLabel>\n                    <TaskHeaderIcon>\n                        <EditInPlace\n                            placeholder={ICONS.TASK_DEFAULT}\n                            value={icon}\n                            onSave={handleSaveIcon}\n                        />\n                    </TaskHeaderIcon>\n                </TaskHeader>\n\n                <DurationOptionBar\n                    options={DURATION_OPTIONS}\n                    renderSelectedOption={option => <span>{option} mins</span>}\n                    selectedOption={scheduled_minutes}\n                    title={COPY.TIPS.SETTING_DURATION}\n                    onChange={handleSaveDuration}\n                />\n\n                <EditInPlace\n                    isFlexible\n                    isMultiLine\n                    margin={1}\n                    placeholder={COPY.EMPTY_NOTES}\n                    render={rawNotes => (\n                        <div\n                            className=\"markdown\"\n                            dangerouslySetInnerHTML={{\n                                __html: marked(rawNotes),\n                            }}\n                        />\n                    )}\n                    canvasStyles={{\n                        bottom: 0,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                    value={notes}\n                    onSave={handleSaveNotes}\n                />\n            </>\n        )\n    );\n};\n\nexport default TaskDetails;\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop({\n            'task-id': taskId =>\n                onUpdateTask(taskId, {\n                    scheduled: true,\n                    scheduled_time: newTime,\n                }),\n        });\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: \"Today's Plan\",\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].TASK_BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${COLORS[theme.name].BORDER};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            opacity: ${isFaded ? 0.5 : 1};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop({ 'task-id': () => {} });\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, COLORS, FONTS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: ${FONTS.NORMAL.LINE_HEIGHT};\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: ${FONTS.NORMAL.SIZE};\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        ::placeholder {\n            color: ${COLORS[theme.name].PRIMARY};\n            opacity: 1;\n        }\n        ::selection {\n            color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                ![null, 'undefined'].includes(savedState)\n                    ? JSON.parse(savedState)\n                    : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport sample from 'lodash/sample';\nimport { PrimaryAppColumn } from './components/AppColumn';\nimport { ToggleButton } from './components/atoms/Button';\nimport Transition from './components/atoms/Transition';\nimport TaskList from './components/TaskList';\nimport CompletedTasksDropZone from './components/Trash';\nimport ListManager from './components/ListManager';\nimport TaskDetails from './components/TaskDetails';\nimport Timeline from './components/Timeline';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport ToolBar from './components/ToolBar';\nimport useKeyboardShortcuts from './hooks/useKeyboardShortcuts';\nimport usePersistentState from './hooks/usePersistentState';\nimport {\n    SIDEBAR_DEFAULT_WIDTH,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n    SIDEBAR_EXTENDED_WIDTH,\n} from './components/atoms/tokens';\n\nfunction App() {\n    const [isShowingTaskList, setIsShowingTaskList] = usePersistentState(\n        'is-backlog-visible',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        INITIAL_SELECTED_LIST_ID\n    );\n    const [isShowingListManager, setIsShowingListManager] = usePersistentState(\n        'is-showing-list-manager',\n        true\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        INITIAL_SELECTED_TASK_ID\n    );\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingList, setIsCreatingList] = useState(false);\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const [isTransitioning, setIsTransitioning] = useState(false);\n    const unarchivedLists = useMemo(\n        () => lists.filter(list => !list.isArchived),\n        [lists]\n    );\n    const currentListIndex = unarchivedLists.findIndex(\n        list => list.id === selectedListId\n    );\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n    const hasIncompleteTasks = incompleteTasks.length;\n    const hasUnarchivedList = lists.filter(list => !list.isArchived).length;\n    const isTaskListVisible = hasUnarchivedList && isShowingTaskList;\n\n    useEffect(() => {\n        const handleDragOver = () => setIsDraggingTask(true);\n        const handleDragEnd = () => setIsDraggingTask(false);\n        document.addEventListener('dragover', handleDragOver);\n        document.addEventListener('dragend', handleDragEnd);\n        document.addEventListener('drop', handleDragEnd);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n            document.removeEventListener('dragend', handleDragEnd);\n            document.removeEventListener('drop', handleDragEnd);\n        };\n    }, []);\n\n    const onCreateList = useCallback(\n        (overrides = {}) => {\n            const newListId = Date.now();\n\n            setLists(currentLists =>\n                currentLists.concat([\n                    {\n                        id: newListId,\n                        isArchived: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_LIST_LABEL\n                        }`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedListId(newListId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingList(true);\n\n            setTimeout(() => setIsCreatingList(false), 1000);\n        },\n        [setSelectedListId, setLists]\n    );\n\n    const onUpdateList = useCallback(\n        (listId, updates) => {\n            setLists(prevLists =>\n                prevLists.map(list => {\n                    if (list.id === listId) {\n                        return {\n                            ...list,\n                            ...updates,\n                        };\n                    }\n                    return list;\n                })\n            );\n        },\n        [setLists]\n    );\n\n    const onSelectList = listId => {\n        setSelectedListId(listId);\n        setIsShowingTaskList(true);\n    };\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                [\n                    {\n                        icon: ICONS.TASK_DEFAULT,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_TASK_LABEL\n                        }`,\n                        notes: COPY.NEW_TASK_NOTES,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ].concat(currentTasks)\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingTask(true);\n\n            setIsShowingListManager(false);\n        },\n        [selectedListId, setIsShowingListManager, setSelectedTaskId, setTasks]\n    );\n\n    useEffect(() => {\n        if (isCreatingTask) {\n            setIsShowingListManager(false);\n            const timer = setTimeout(() => setIsCreatingTask(false), 100);\n            return () => clearTimeout(timer);\n        }\n    }, [isCreatingTask, setIsCreatingTask, setIsShowingListManager]);\n\n    const transition = useCallback(\n        callback => {\n            setIsTransitioning(true);\n            setTimeout(() => {\n                callback();\n                setIsTransitioning(false);\n            }, ROUTE_TRANSITION_ANIMATION_DURATION / 2);\n        },\n        [setIsTransitioning]\n    );\n\n    const onImmediatelySelectTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            setSelectedTaskId(taskId);\n        },\n        [isShowingListManager, setIsShowingListManager, setSelectedTaskId]\n    );\n\n    const onTransitionToTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            transition(() => setSelectedTaskId(taskId));\n        },\n        [\n            isShowingListManager,\n            setIsShowingListManager,\n            setSelectedTaskId,\n            transition,\n        ]\n    );\n\n    const onChangeIsShowingTaskList = setIsShowingTaskList;\n\n    const onChangeIsShowingListManager = useCallback(\n        newIsShowingListManager => {\n            transition(() => {\n                setIsShowingListManager(newIsShowingListManager);\n\n                if (newIsShowingListManager) {\n                    setIsShowingTaskList(true);\n                }\n            });\n        },\n        [setIsShowingTaskList, setIsShowingListManager, transition]\n    );\n\n    const onDeleteTask = useCallback(\n        taskId => {\n            if (selectedTaskId === taskId) {\n                const firstUnarchivedTask = tasks.find(\n                    task =>\n                        task.id !== taskId &&\n                        task.list_id === selectedListId &&\n                        !task.isComplete\n                );\n\n                if (firstUnarchivedTask) {\n                    onImmediatelySelectTask(firstUnarchivedTask.id);\n                } else {\n                    onChangeIsShowingListManager(true);\n                }\n            }\n\n            onUpdateTask(taskId, {\n                isComplete: true,\n            });\n        },\n        [\n            onChangeIsShowingListManager,\n            onImmediatelySelectTask,\n            onUpdateTask,\n            selectedListId,\n            tasks,\n            selectedTaskId,\n        ]\n    );\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const moveTaskToTimeline = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: true,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const moveTaskToTaskList = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: false,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const selectNextList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const nextListIndex = currentListIndex + 1;\n            const nextIndex =\n                nextListIndex > unarchivedLists.length - 1 ? 0 : nextListIndex;\n            setSelectedListId(unarchivedLists[nextIndex].id);\n            setIsShowingListManager(true);\n        },\n        [\n            currentListIndex,\n            setIsShowingListManager,\n            setSelectedListId,\n            unarchivedLists,\n        ]\n    );\n\n    const selectPreviousList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const prevListIndex = currentListIndex - 1;\n            const prevIndex =\n                prevListIndex < 0 ? unarchivedLists.length - 1 : prevListIndex;\n            setSelectedListId(unarchivedLists[prevIndex].id);\n            setIsShowingListManager(true);\n        },\n        [\n            currentListIndex,\n            setIsShowingListManager,\n            setSelectedListId,\n            unarchivedLists,\n        ]\n    );\n\n    const setTaskDuration = useCallback(\n        duration => {\n            onUpdateTask(selectedTaskId, {\n                scheduled_minutes: duration,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const toggleTaskListVisibility = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeIsShowingTaskList(!isShowingTaskList);\n        },\n        [isShowingTaskList, onChangeIsShowingTaskList]\n    );\n\n    const toggleDarkMode = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n        },\n        [onChangeTheme, themeName]\n    );\n\n    const toggleIsEditingCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            setIsCreatingTask(true);\n        },\n        [setIsCreatingTask]\n    );\n\n    const toggleIsShowingListManager = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeIsShowingListManager(!isShowingListManager);\n        },\n        [isShowingListManager, onChangeIsShowingListManager]\n    );\n\n    const createNewTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onCreateTask();\n        },\n        [onCreateTask]\n    );\n\n    const deleteCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onDeleteTask(selectedTaskId);\n        },\n        [onDeleteTask, selectedTaskId]\n    );\n\n    const keyMap = useMemo(() => {\n        return {\n            ...[15, 30, 45, 60, 90, 120].reduce((acc, duration, index) => {\n                return {\n                    ...acc,\n                    [index + 1]: setTaskDuration.bind(null, duration),\n                };\n            }, {}),\n            'cmd + arrowRight': moveTaskToTimeline,\n            'cmd + arrowLeft': moveTaskToTaskList,\n            'cmd + shift + arrowRight': selectNextList,\n            'cmd + shift + arrowLeft': selectPreviousList,\n            'cmd + shift + ]': selectNextList,\n            'cmd + shift + [': selectPreviousList,\n            'b': toggleTaskListVisibility,\n            'd': toggleDarkMode,\n            'e': toggleIsEditingCurrentTask,\n            'l': toggleIsShowingListManager,\n            'n': createNewTask,\n            't': deleteCurrentTask,\n        };\n    }, [\n        createNewTask,\n        deleteCurrentTask,\n        moveTaskToTaskList,\n        moveTaskToTimeline,\n        selectNextList,\n        selectPreviousList,\n        setTaskDuration,\n        toggleTaskListVisibility,\n        toggleDarkMode,\n        toggleIsEditingCurrentTask,\n        toggleIsShowingListManager,\n    ]);\n\n    useKeyboardShortcuts(keyMap);\n\n    const appActions = {\n        onChangeIsShowingTaskList,\n        onChangeTaskPosition,\n        onChangeIsShowingListManager,\n        onChangeTheme,\n        onCreateList,\n        onCreateTask,\n        onDeleteTask,\n        onSelectList,\n        onImmediatelySelectTask,\n        onTransitionToTask,\n        onUpdateList,\n        onUpdateTask,\n    };\n\n    const appData = {\n        incompleteTasks,\n        isTaskListVisible,\n        isCreatingList,\n        isCreatingTask,\n        isDraggingTask,\n        isShowingListManager,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    const columnWidths = isTaskListVisible\n        ? {\n              backlog: SIDEBAR_DEFAULT_WIDTH,\n              listManager: '40vw',\n              taskDetails: '40vw',\n              timeline: SIDEBAR_DEFAULT_WIDTH,\n          }\n        : {\n              backlog: `calc(${GRID_UNIT} * 2)`,\n              listManager: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              taskDetails: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              timeline: SIDEBAR_EXTENDED_WIDTH,\n          };\n\n    return (\n        <ThemeProvider theme={{ name: themeName }}>\n            <GlobalStyle />\n            <CompletedTasksDropZone appActions={appActions} appData={appData} />\n            <FlexBox align=\"stretch\" direction=\"row-reverse\">\n                <Timeline\n                    appActions={appActions}\n                    appData={appData}\n                    selectedTaskId={selectedTaskId}\n                    from={TIMELINE_FROM}\n                    style={{\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                        width: columnWidths.timeline,\n                        pointerEvents: hasIncompleteTasks ? 'all' : 'none',\n                    }}\n                    tasks={incompleteTasks}\n                    to={TIMELINE_TO}\n                />\n                <PrimaryAppColumn\n                    label={\n                        isShowingListManager\n                            ? COPY.LABEL_FOR_LIST_MANAGER\n                            : COPY.LABEL_FOR_TASK_DETAILS\n                    }\n                    style={{\n                        width: isShowingListManager\n                            ? columnWidths.listManager\n                            : columnWidths.taskDetails,\n                    }}\n                >\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={isShowingListManager}\n                            title={COPY.TIPS.TOGGLE_LIST_MANAGER}\n                            onClick={() =>\n                                onChangeIsShowingListManager(\n                                    !isShowingListManager\n                                )\n                            }\n                        >\n                            {isShowingListManager ? (\n                                <FlexBox spacing={0.25}>\n                                    {ICONS.TASK_DETAILS}\n                                    <span>{COPY.LABEL_FOR_TASK_DETAILS}</span>\n                                </FlexBox>\n                            ) : (\n                                <FlexBox spacing={0.25}>\n                                    {ICONS.LIST_MANAGER}\n                                    <span>{COPY.LABEL_FOR_LIST_MANAGER}</span>\n                                </FlexBox>\n                            )}\n                        </ToggleButton>\n                    </ToolBar>\n                    <Transition isTransitioning={isTransitioning}>\n                        {isShowingListManager ? (\n                            <ListManager\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : (\n                            <TaskDetails\n                                appActions={appActions}\n                                appData={appData}\n                                style={{\n                                    opacity: hasIncompleteTasks ? 1 : 0.25,\n                                }}\n                            />\n                        )}\n                    </Transition>\n                </PrimaryAppColumn>\n                <TaskList\n                    appActions={appActions}\n                    appData={appData}\n                    style={{\n                        width: columnWidths.backlog,\n                    }}\n                />\n            </FlexBox>\n        </ThemeProvider>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}