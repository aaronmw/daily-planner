{"version":3,"sources":["components/atoms/Icon.js","components/atoms/tokens.js","components/atoms/copy/motivational-descriptors.js","utils/preventWidows.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","utils/toInt.js","components/atoms/Button.js","components/atoms/GlobalStyles.js","components/atoms/Transition.js","hooks/useDrag.js","hooks/useDrop.js","hooks/useKeyboardShortcuts.js","components/EditInPlace.js","components/ListCard.js","components/ListManager.js","components/TaskListToggleButton.js","components/ToolBar.js","components/Sidebar.js","components/OptionBar.js","components/TaskDetails.js","utils/minutesToHeight.js","components/TaskCard.js","components/TaskList.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/Trash.js","components/TrashedCard.js","components/TrashedLists.js","components/TrashedTasks.js","hooks/usePersistentState.js","index.js"],"names":["STYLE_PREFIX_MAP","solid","regular","light","duotone","brands","Icon","_ref","iconName","_ref$styleName","styleName","otherProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","SIDEBAR_DEFAULT_WIDTH","SIDEBAR_EXTENDED_WIDTH","DURATION_OPTIONS","GRID_UNIT","FONTS","NORMAL","LINE_HEIGHT","SIZE","LARGE","LIST_CARD_HEIGHT","LIST_CARD_SPACING","LIST_CARD_WIDTH","MIN_SLOT_HEIGHT","ROUTE_TRANSITION_ANIMATION_DURATION","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","BASICALLY","CREATE_NEW_TASK","DELETE_TASK","MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE","MOVE_BETWEEN_LISTS","SETTING_DURATION","TOGGLE_TASK_LIST","TOGGLE_DARK_MODE","TOGGLE_LIST_MANAGER","INITIAL_LISTS","id","isArchived","label","INITIAL_SELECTED_LIST_ID","INITIAL_TASKS","keys","TIPS","map","tipId","icon","list_id","isComplete","notes","scheduled","scheduled_minutes","scheduled_time","INITIAL_SELECTED_TASK_ID","DARK","PRIMARY_FADED","darken","PRIMARY","BACKGROUND","HIGH_CONTRAST_BACKGROUND","HIGH_CONTRAST_TEXT","SHADED","setLightness","SHADOW","transparentize","TEXT","TEXT_FADED","TASK_BORDER","TASK_BORDER_HOVER","TASK_BORDER_ACTIVE","BORDER","BORDER_FADED","LIGHT","lighten","COLORS","ICON_PACKS","EMOJI","DARK_MODE","END_ZONE","LEFT","LIGHT_MODE","LIST_MANAGER","RIGHT","TASK_DETAILS","FONT_AWESOME","TIP","forEach","key","ICON_NAME","atoms_Icon","ICONS","TASK_DEFAULT","Container","styled","div","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","name","Box","forwardRef","_ref2","ref","str","children","_ref2$preventWidows","preventWidows","trim","replace","String","fromCharCode","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","_ref$wrapped","wrapped","FlexBox","attrs","isDisabled","ContentContainer","_templateObject","ColumnHeader","AppColumn","_ref3","_ref3$disabledIf","disabledIf","length","some","condition","AppColumn_Container","PrimaryAppColumn","_ref4","SecondaryAppColumn","_ref5","isTargetedForDrop","toInt","parseInt","Button","forwardedAs","_ref$isInverted","isInverted","StyledGhostButton","animation","keyframes","Button_templateObject","TracerSVGElement","svg","_templateObject2","Tracer","rect","isAnimated","css","_templateObject3","AnimatedTracer","targetElementRef","_useState","useState","width","height","_useState2","slicedToArray","viewBoxDimensions","setViewBoxDimensions","useEffect","current","offsetWidth","offsetHeight","preserveAspectRatio","viewBox","xmlns","rx","x","y","GhostButton","_useState3","_useState4","setIsAnimated","buttonElementRef","useRef","handleMouseEnterAndLeave","onMouseEnter","onMouseLeave","Button_AnimatedTracer","ToggleButton","_ref6","_templateObject4","createGlobalStyle","Transition","isTransitioning","useDrag","dataTypes","isDragging","setIsDragging","draggable","onDragEnd","onDragStart","evt","dataType","dataTransfer","setData","useDrop","dataTypeHandlers","setIsTargetedForDrop","targetedElement","droppable","onDragEnter","preventDefault","target","onDragOver","onDragLeave","onDrop","data","getData","payload","isNaN","parseFloat","dataTypeHandler","INPUT_TAG_NAMES","isInput","node","tagName","toLowerCase","includes","useKeyboardShortcuts","keyMap","arguments","undefined","onKeyDown","scopedToElementRef","keysDown","ctrlKey","push","shiftKey","metaKey","currentKeySequence","uniq","keyDown","sort","join","mapKeys","handler","sequence","shortcutKeySequence","split","scopedToElement","scopedElement","scopedToAnInput","firedOnAnInput","stopPropagation","buildKeyboardShortcutHandler","document","addEventListener","removeEventListener","isEditable","isEditing","_ref$tracingElementSt","tracingElementStyles","StyledTextarea","textarea","EditInPlace_templateObject","Canvas","isEmpty","memo","_ref3$canvasStyles","canvasStyles","_ref3$doubleClickToEd","doubleClickToEdit","_ref3$isEditable","_ref3$isMultiLine","isMultiLine","_ref3$isRemotelyActiv","isRemotelyActivated","_ref3$placeholder","placeholder","_ref3$render","render","value","_ref3$tracingElementS","_ref3$value","_ref3$onSave","onSave","setIsEditing","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","containerElementRef","inputRef","measuringElementRef","isSingleLine","select","focus","el","handleClick","useCallback","useMemo","saveAndClose","close","cmd + escape","shift + escape","cmd + enter","shift + enter","escape","enter","EditInPlace_Container","tabIndex","onClick","onDoubleClick","style","objectSpread2","Fragment","position","pointerEvents","opacity","whiteSpace","disabled","rows","onBlur","onChange","isActive","ListCardTaskIconContainer","GhostListCard","ListCard_templateObject","ListCardContainer","ListCard","appActions","appData","listId","_ref4$isEditable","onUpdateList","onUpdateTask","isCreatingList","lists","selectedListId","tasks","list","find","tasksInList","filter","task","listCardElementRef","_useDrag","list-id","dragProps","_useDrop","task-id","taskId","targetListId","currentTarget","dataset","dropProps","triggerClick","click","space","ListCard_Container","data-list-id","title","components_EditInPlace","alignSelf","flexGrow","flexShrink","newLabel","ListManager","onCreateList","onSelectList","unarchivedLists","sortedLists","sortBy","CREATE_LIST_LABEL","components_ListCard","TaskListToggleButton","isSidebarOpen","onChangeIsSidebarOpen","ToolBar","Sidebar","onChangeTheme","isShowingTrashContents","isTaskListForcedOpen","setIsTaskListForcedOpen","selectedList","sidebarDropProps","LABEL_FOR_TRASHED_TASKS","components_ToolBar","components_TaskListToggleButton","OptionButton","isSelected","OptionBar","options","_ref2$renderOption","renderOption","option","_ref2$renderSelectedO","renderSelectedOption","selectedOption","optionIndex","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","role","TaskDetails_templateObject2","DurationOptionBar","TaskDetails","_ref3$appActions","_ref3$appData","isCreatingTask","selectedTaskId","activeTask","handleUpdateTask","field","[object Object]","handleSaveDuration","newDuration","handleSaveIcon","newNotes","handleSaveLabel","handleSaveNotes","EMPTY_LABEL","EMPTY_NOTES","rawNotes","dangerouslySetInnerHTML","__html","marked","bottom","fontSize","left","overflow","right","top","minutesToHeight","minutes","duration","CardLabel","Math","min","CardIcon","TaskCardContainer","TaskCard_templateObject","onImmediatelySelectTask","onTransitionToTask","isShowingListManager","TaskCard_Container","data-task-id","onChangeTaskPosition","onCreateTask","incompleteTasks","unscheduledTasks","droppedOnTaskId","droppedOnTaskIndex","findIndex","taskCardDropProps","Button_GhostButton","CREATE_TASK_LABEL","components_TaskCard","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","floor","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","LABEL_FOR_TIMELINE","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","from","to","onClickTask","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isDraggingTask","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","DROP_ZONE_SIZE","pulsingAnimation","Trash_templateObject","AnimatedContainer","Trash_templateObject2","TrashDropZone","TrashIconContainer","Trash","onChangeIsShowingTrashContents","onDeleteTask","firstUnarchivedList","TrashedCard_templateObject2","random","minOpacity","translationDistance","TrashedCard_templateObject","RestoreButton","TrashedCard","restoreButtonTitle","onRestore","TrashedCard_Container","deletedLists","hasDeletedLists","handleRestoreList","EMPTY_TRASHED_LISTS","components_TrashedCard","LABEL_FOR_RESTORING_LIST","bind","deletedTasks","hasDeletedTasks","handleRestoreTask","EMPTY_TRASHED_TASKS","LABEL_FOR_RESTORING_TASK","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","isShowingSidebar","setIsShowingSidebar","_usePersistentState3","_usePersistentState4","setLists","_usePersistentState5","_usePersistentState6","setSelectedListId","_usePersistentState7","_usePersistentState8","setIsShowingListManager","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","setSelectedTaskId","_usePersistentState13","_usePersistentState14","themeName","setThemeName","setIsCreatingList","setIsCreatingTask","setIsDraggingTask","_useState7","_useState8","setIsShowingTrashContents","_useState9","_useState10","setIsTransitioning","currentListIndex","handleDragOver","handleDragEnd","overrides","newListId","currentLists","sample","MOTIVATIONAL_DESCRIPTORS","NEW_LIST_LABEL","setTimeout","updates","prevLists","prevTasks","newTaskId","currentTasks","NEW_TASK_LABEL","NEW_TASK_NOTES","clearTimeout","transition","callback","onChangeIsShowingListManager","newIsShowingListManager","firstUnarchivedTask","newIndex","tasksMinusTarget","slice","moveTaskToTimeline","moveTaskToTaskList","selectNextList","nextListIndex","nextIndex","selectPreviousList","prevListIndex","prevIndex","setTaskDuration","toggleTaskListVisibility","toggleDarkMode","toggleIsEditingCurrentTask","toggleIsShowingListManager","createNewTask","deleteCurrentTask","goBack","reduce","acc","index","cmd + arrowRight","cmd + arrowLeft","cmd + shift + arrowRight","cmd + shift + arrowLeft","cmd + shift + ]","cmd + shift + [","b","d","e","l","n","t","columnWidths","sidebar","listManager","taskDetails","timeline","styled_components_browser_esm","disableVendorPrefixes","GlobalStyles","components_Trash","components_Sidebar","components_TrashedTasks","components_TaskList","LABEL_FOR_TRASHED_LISTS","LABEL_FOR_LIST_MANAGER","LABEL_FOR_TASK_DETAILS","atoms_Transition","components_TrashedLists","components_ListManager","components_TaskDetails","components_Timeline","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.9c43a295.chunk.js","sourcesContent":["import React from 'react';\n\nconst STYLE_PREFIX_MAP = {\n    solid: 'fas',\n    regular: 'far',\n    light: 'fal',\n    duotone: 'fad',\n    brands: 'fab',\n};\n\nconst Icon = ({ iconName, styleName = 'regular', ...otherProps }) => (\n    <i\n        className={`${STYLE_PREFIX_MAP[styleName]} fa-${iconName}`}\n        {...otherProps}\n    />\n);\n\nexport default Icon;\n","import React from 'react';\nimport { darken, lighten, setLightness, transparentize } from 'polished';\nimport MOTIVATIONAL_DESCRIPTORS from './copy/motivational-descriptors';\nimport Icon from './Icon';\n\nexport const SIDEBAR_DEFAULT_WIDTH = '30vw';\nexport const SIDEBAR_EXTENDED_WIDTH = '40vw';\nexport const BORDER_RADIUS = '3px';\nexport const BORDER_WIDTH = '1px';\nexport const BULLET_SIZE = '10px';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '25px';\nexport const FONTS = {\n    NORMAL: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.5)` },\n    LARGE: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.75)` },\n};\nexport const HOURS_PER_SCREEN = 10;\nexport const LIST_CARD_HEIGHT = `calc(${GRID_UNIT} * 8)`;\nexport const LIST_CARD_SPACING = `calc(${GRID_UNIT} * 0.5)`;\nexport const LIST_CARD_WIDTH = `calc((100% - (${LIST_CARD_SPACING} * 2)) / 3)`;\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const ROUTE_TRANSITION_ANIMATION_DURATION = 250;\nexport const TIMELINE_FROM = '6:00';\nexport const TIMELINE_TO = '30:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.MOTIVATIONAL_DESCRIPTORS = MOTIVATIONAL_DESCRIPTORS;\nCOPY.EMPTY_LABEL = '...label?';\nCOPY.EMPTY_NOTES = '...notes?';\nCOPY.EMPTY_TRASHED_LISTS = 'No Trashed Lists';\nCOPY.EMPTY_TRASHED_TASKS = 'No Trashed Tasks';\nCOPY.LABEL_FOR_LIST_MANAGER = 'Switch Lists';\nCOPY.LABEL_FOR_RESTORING_LIST = 'Restore this List';\nCOPY.LABEL_FOR_RESTORING_TASK = 'Restore this Task';\nCOPY.LABEL_FOR_TASK_DETAILS = 'Back to Task';\nCOPY.LABEL_FOR_TIMELINE = \"Today's Schedule\";\nCOPY.LABEL_FOR_TRASHED_LISTS = 'Trashed Lists';\nCOPY.LABEL_FOR_TRASHED_TASKS = 'Trashed Tasks';\nCOPY.CREATE_LIST_LABEL = 'Create List';\nCOPY.CREATE_TASK_LABEL = 'Create Task';\nCOPY.NEW_LIST_LABEL = 'New List';\nCOPY.NEW_TASK_LABEL = `New Task`;\nCOPY.NEW_TASK_NOTES = '';\nCOPY.TIPS = {\n    BASICALLY:\n        'Make lists of tasks. Every day, schedule your most important ones',\n    CREATE_NEW_TASK: 'Press [N] to create a [N]ew task in the current list',\n    DELETE_TASK: 'Press [T] to move the selected task to the [T]rash',\n    MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE:\n        'Press [⌘]+[LEFT or RIGHT] to move the selected task to the TaskList or Timeline, respectively',\n    MOVE_BETWEEN_LISTS:\n        'Press [⌘]+[SHIFT]+[LEFT or RIGHT] to move between your lists',\n    SETTING_DURATION:\n        'Press keys [1] to [6] to quickly adjust your time estimate for the selected task',\n    TOGGLE_TASK_LIST:\n        'Press [B] to show / hide the side[B]ar of unscheduled tasks',\n    TOGGLE_DARK_MODE: 'Press [D] to toggle [D]ark Mode',\n    TOGGLE_LIST_MANAGER: 'Press [L] to see your [L]ists',\n};\n\nexport { COPY };\n\nexport const INITIAL_LISTS = [\n    {\n        id: 1,\n        isArchived: false,\n        label: 'User Manual',\n    },\n];\nexport const INITIAL_SELECTED_LIST_ID = (INITIAL_LISTS[0] || {}).id;\n\nexport const INITIAL_TASKS = Object.keys(COPY.TIPS).map(tipId => {\n    const label = COPY.TIPS[tipId];\n\n    return {\n        icon: '☝️',\n        id: tipId,\n        list_id: INITIAL_SELECTED_LIST_ID,\n        label: label,\n        isComplete: false,\n        notes: '',\n        scheduled: false,\n        scheduled_minutes: 30,\n        scheduled_time: '9:00',\n    };\n});\n\nexport const INITIAL_SELECTED_TASK_ID = (INITIAL_TASKS[0] || {}).id;\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = '#FFB73E';\nDARK.PRIMARY_FADED = darken(0.2, DARK.PRIMARY);\nDARK.BACKGROUND = '#050300';\nDARK.HIGH_CONTRAST_BACKGROUND = DARK.PRIMARY;\nDARK.HIGH_CONTRAST_TEXT = DARK.BACKGROUND;\nDARK.SHADED = setLightness(0.04, DARK.PRIMARY);\nDARK.SHADOW = transparentize(0.95, DARK.BACKGROUND);\nDARK.TEXT = DARK.PRIMARY;\nDARK.TEXT_FADED = setLightness(0.35, DARK.TEXT);\nDARK.TASK_BORDER = transparentize(0.5, DARK.PRIMARY);\nDARK.TASK_BORDER_HOVER = transparentize(0.5, DARK.PRIMARY);\nDARK.TASK_BORDER_ACTIVE = DARK.PRIMARY;\nDARK.BORDER = setLightness(0.15, DARK.PRIMARY);\nDARK.BORDER_FADED = DARK.TEXT_FADED;\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.PRIMARY_FADED = lighten(0.2, LIGHT.PRIMARY);\nLIGHT.BACKGROUND = '#FFFFFF';\nLIGHT.HIGH_CONTRAST_BACKGROUND = LIGHT.PRIMARY;\nLIGHT.HIGH_CONTRAST_TEXT = LIGHT.BACKGROUND;\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.SHADOW = transparentize(0.8, setLightness(0.25, LIGHT.PRIMARY));\nLIGHT.TEXT = setLightness(0.15, LIGHT.PRIMARY);\nLIGHT.TEXT_FADED = transparentize(0.4, LIGHT.TEXT);\nLIGHT.TASK_BORDER = transparentize(0.5, LIGHT.PRIMARY);\nLIGHT.TASK_BORDER_HOVER = transparentize(0.5, LIGHT.PRIMARY);\nLIGHT.TASK_BORDER_ACTIVE = LIGHT.PRIMARY;\nLIGHT.BORDER = transparentize(0.75, LIGHT.TEXT);\nLIGHT.BORDER_FADED = transparentize(0.25, LIGHT.TEXT_FADED);\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\n\nconst ICON_PACKS = {\n    EMOJI: {\n        DARK_MODE: '🌚',\n        END_ZONE: '🗑',\n        LEFT: '👈',\n        LIGHT_MODE: '🌞',\n        LIST_MANAGER: '📚',\n        RIGHT: '👉',\n        TASK_DETAILS: '📌',\n    },\n    FONT_AWESOME: {\n        DARK_MODE: 'moon-stars',\n        END_ZONE: 'trash-alt',\n        LEFT: 'long-arrow-left',\n        LIGHT_MODE: 'sun',\n        LIST_MANAGER: 'book',\n        RIGHT: 'long-arrow-right',\n        TASK_DETAILS: 'thumbtack',\n        TIP: 'gem',\n    },\n};\n\nObject.keys(ICON_PACKS.FONT_AWESOME).forEach(key => {\n    const ICON_NAME = ICON_PACKS.FONT_AWESOME[key];\n    ICON_PACKS.FONT_AWESOME[key] = (\n        <Icon iconName={ICON_NAME} styleName=\"solid\" />\n    );\n});\n\nconst ICONS = ICON_PACKS.FONT_AWESOME;\n\nICONS.TASK_DEFAULT = '📌';\n\nexport { ICONS };\n","export default [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\n","export default str => {\n    return typeof str === 'string'\n        ? str.trim().replace(/\\s([^ ]*)$/m, `${String.fromCharCode(160)}$1`)\n        : str;\n};\n","import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from './tokens';\nimport preventWidowsFunction from '../../utils/preventWidows';\n\nconst Container = styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = null,\n        marginX = null,\n        marginY = null,\n        padding = null,\n        paddingX = null,\n        paddingY = null,\n        theme,\n    }) => `\n        align-self: stretch;\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX !== null\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY !== null\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin !== null\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX !== null\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY !== null\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding !== null\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n\nconst Box = forwardRef(\n    ({ children, preventWidows = false, ...otherProps }, ref) => (\n        <Container ref={ref} {...otherProps}>\n            {preventWidows ? preventWidowsFunction(children) : children}\n        </Container>\n    )\n);\n\nexport default Box;\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        justify = 'stretch',\n        spacing = 0,\n        wrapped = false,\n    }) => `\n        align-items: ${align};\n        align-content: ${wrapped ? align : ''};\n        display: flex;\n        flex-direction: ${direction};\n        flex-wrap: ${wrapped ? 'wrap' : 'nowrap'};\n        justify-content: ${justify};\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_WIDTH,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isDisabled, theme }) => `\n        position: relative;\n        \n        &:before {\n            background-color: ${COLORS[theme.name].BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isDisabled ? 0.25 : 0};\n            pointer-events: ${isDisabled ? 'all' : 'none'};\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 200;\n        }\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})`\n    height: calc(100vh - ${GRID_UNIT});\n    overflow: auto;\n    position: relative;\n    ${UNIFIED_TRANSITION};\n\n    & > * {\n        align-self: stretch;\n    }\n`;\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        border-bottom:\n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({\n    children,\n    disabledIf = [false],\n    label,\n    ...otherProps\n}) => {\n    const isDisabled =\n        disabledIf.length && disabledIf.some(condition => condition === true);\n\n    return (\n        <Container isDisabled={isDisabled}>\n            <ColumnHeader>{label}</ColumnHeader>\n            <ContentContainer {...otherProps}>{children}</ContentContainer>\n        </Container>\n    );\n};\n\nexport const PrimaryAppColumn = styled(AppColumn)(\n    ({ theme }) => `\n        box-shadow: 0 0 10px 10px ${COLORS[theme.name].SHADOW};\n        border-left: ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        border-right: \n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        overflow: unset;\n        z-index: 11;\n    `\n);\n\nexport const SecondaryAppColumn = styled(AppColumn)(\n    ({ isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        flex-grow: 1;\n        overflow: auto;\n        position: relative;\n        \n        &:before {\n            box-shadow: ${\n                isTargetedForDrop\n                    ? `0 0 0 5px ${COLORS[theme.name].TASK_BORDER_HOVER} inset`\n                    : 'initial'\n            };\n            bottom: 0;\n            content: '';\n            left: 0;\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 1000;\n        }\n    `\n);\n\nexport default AppColumn;\n","export default str => parseInt(str, 10);\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport toInt from '../../utils/toInt';\nimport FlexBox from './FlexBox';\nimport {\n    BORDER_RADIUS,\n    BORDER_WIDTH,\n    COLORS,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    forwardedAs: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ isInverted = false, theme }) => `\n        align-self: unset;\n        background-color: ${\n            COLORS[theme.name][isInverted ? 'BACKGROUND' : 'PRIMARY']\n        };\n        border: 2px solid transparent;\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name][isInverted ? 'PRIMARY' : 'BACKGROUND']};\n        cursor: pointer;\n        transform: translateY(0);\n        ${UNIFIED_TRANSITION};\n        transition-property: border, color;\n        \n        &:focus,\n        &:hover {\n            border-color: ${\n                COLORS[theme.name][isInverted ? 'PRIMARY' : 'BACKGROUND']\n            };\n        }\n        &:active {\n            transform: translateY(2px);\n        }\n    `\n);\n\nconst StyledGhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        color: ${COLORS[theme.name].TEXT_FADED};\n        position: relative;\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst animation = keyframes`\n  from {\n      stroke-dashoffset: 0;\n  }\n  to {\n      stroke-dashoffset: 12px;\n  }\n`;\n\nconst TracerSVGElement = styled.svg`\n    overflow: visible;\n    position: absolute;\n`;\n\nconst Tracer = styled.rect(\n    ({ isAnimated, theme }) => css`\n        animation-name: ${isAnimated ? animation : ''};\n        animation-duration: 0.5s;\n        animation-direction: normal;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        fill: none;\n        stroke: ${COLORS[theme.name][isAnimated ? 'PRIMARY' : 'TEXT_FADED']};\n        stroke-width: calc(${BORDER_WIDTH} * 2);\n        stroke-dasharray: 6px, 6px;\n        position: relative;\n        z-index: 1000;\n    `\n);\n\nconst AnimatedTracer = ({ isAnimated, targetElementRef, ...otherProps }) => {\n    const [viewBoxDimensions, setViewBoxDimensions] = useState({\n        width: 0,\n        height: 0,\n    });\n\n    useEffect(() => {\n        if (targetElementRef.current) {\n            setViewBoxDimensions({\n                width: targetElementRef.current.offsetWidth,\n                height: targetElementRef.current.offsetHeight,\n            });\n        }\n    }, [targetElementRef]);\n\n    return (\n        <TracerSVGElement\n            preserveAspectRatio=\"none\"\n            viewBox={`0 0 ${viewBoxDimensions.width} ${viewBoxDimensions.height}`}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            {...otherProps}\n        >\n            <Tracer\n                width={viewBoxDimensions.width}\n                height={viewBoxDimensions.height}\n                isAnimated={isAnimated}\n                rx={toInt(BORDER_RADIUS) * 2}\n                x={0}\n                y={0}\n            />\n        </TracerSVGElement>\n    );\n};\n\nexport const GhostButton = ({ children, ...otherProps }) => {\n    const [isAnimated, setIsAnimated] = useState(false);\n\n    const buttonElementRef = useRef(null);\n\n    const handleMouseEnterAndLeave = () => setIsAnimated(!isAnimated);\n\n    return (\n        <StyledGhostButton\n            ref={buttonElementRef}\n            onMouseEnter={handleMouseEnterAndLeave}\n            onMouseLeave={handleMouseEnterAndLeave}\n            {...otherProps}\n        >\n            <AnimatedTracer\n                isAnimated={isAnimated}\n                targetElementRef={buttonElementRef}\n            />\n            {children}\n        </StyledGhostButton>\n    );\n};\n\nexport const ToggleButton = styled(Button).attrs(({ isInverted }) => ({\n    isInverted: !isInverted,\n}))``;\n\nexport default Button;\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, COLORS, FONTS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: ${FONTS.NORMAL.LINE_HEIGHT};\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: ${FONTS.NORMAL.SIZE};\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        ::placeholder {\n            color: ${COLORS[theme.name].PRIMARY};\n            opacity: 1;\n        }\n        ::selection {\n            color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport {\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Transition = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isTransitioning }) => `\n        opacity: ${isTransitioning ? 0 : 1};\n        ${UNIFIED_TRANSITION};\n        transition-duration: ${ROUTE_TRANSITION_ANIMATION_DURATION / 2}ms;\n    `\n);\n\nexport default Transition;\n","import { useState } from 'react';\n\nconst useDrag = dataTypes => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        Object.keys(dataTypes).map(dataType => {\n            evt.dataTransfer.setData(dataType, dataTypes[dataType]);\n            return dataType;\n        });\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import { useRef, useState } from 'react';\n\nconst useDrop = dataTypeHandlers => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        Object.keys(dataTypeHandlers).map(dataType => {\n            const data = evt.dataTransfer.getData(dataType);\n            const payload =\n                data.length === 0\n                    ? null\n                    : isNaN(data)\n                    ? data\n                    : parseFloat(data);\n\n            if (payload !== null) {\n                const dataTypeHandler = dataTypeHandlers[dataType];\n                dataTypeHandler(payload, evt);\n            }\n\n            return dataType;\n        });\n\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import { useEffect } from 'react';\nimport mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nconst buildKeyboardShortcutHandler = (keyMap, scopedToElementRef) => evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    const currentKeySequence = uniq(keysDown)\n        .map(keyDown => keyDown.toLowerCase())\n        .sort()\n        .join('+');\n\n    mapKeys(keyMap, (handler, sequence) => {\n        const shortcutKeySequence = sequence\n            .split('+')\n            .map(key => key.trim().toLowerCase())\n            .sort()\n            .join('+');\n\n        if (currentKeySequence === shortcutKeySequence) {\n            const scopedToElement = scopedToElementRef !== null;\n            const scopedElement = scopedToElement && scopedToElementRef.current;\n            const scopedToAnInput = scopedElement && isInput(scopedElement);\n            const firedOnAnInput = isInput(evt.target);\n\n            if (\n                (scopedElement && evt.target === scopedElement) ||\n                (firedOnAnInput && !scopedToAnInput)\n            ) {\n                evt.stopPropagation();\n            }\n\n            if (\n                (firedOnAnInput && !scopedToAnInput) ||\n                (scopedToElement && !scopedElement)\n            ) {\n                return false;\n            }\n\n            return handler(evt);\n        }\n    });\n};\n\nconst useKeyboardShortcuts = (keyMap, targetElementRef = null) => {\n    useEffect(() => {\n        const onKeyDown = buildKeyboardShortcutHandler(\n            keyMap,\n            targetElementRef\n        );\n\n        document.addEventListener('keydown', onKeyDown);\n\n        return () => document.removeEventListener('keydown', onKeyDown);\n    }, [keyMap, targetElementRef]);\n};\n\nexport default useKeyboardShortcuts;\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditable, isEditing, theme, tracingElementStyles = () => {} }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border:\n                ${\n                    isEditing\n                        ? 'none'\n                        : `2px dashed ${COLORS[theme.name].BORDER}`\n                };\n            box-shadow:\n                ${\n                    isEditing\n                        ? `0 0 0 2px ${COLORS[theme.name].PRIMARY}`\n                        : `0 0 0 0 ${COLORS[theme.name].PRIMARY}`\n                };\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.25 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.25 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n            ${tracingElementStyles(theme)}\n        }\n        \n        &:focus,\n        &:hover {\n            &:before {\n                opacity: ${isEditable ? 1 : 0};\n            }\n        }\n    `\n);\n\nconst StyledTextarea = styled.textarea`\n    display: block;\n    height: 100%;\n    width: 100%;\n`;\n\nconst Canvas = styled(Box)(\n    ({ isEmpty }) => `\n        opacity: ${isEmpty ? 0.6 : 1};\n    `\n);\n\nconst EditInPlace = ({\n    canvasStyles = {},\n    doubleClickToEdit = false,\n    isEditable = true,\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    tracingElementStyles = () => {},\n    value = '',\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const containerElementRef = useRef(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = useCallback(() => {\n        if (isEditable && !isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    }, [isEditable, isEditing, setBufferedValue, setIsEditing, value]);\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [handleClick, isRemotelyActivated]);\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const keyMap = useMemo(() => {\n        const saveAndClose = () => {\n            onSave(bufferedValue);\n            setIsEditing(false);\n        };\n\n        const close = () => {\n            setBufferedValue(value);\n            setIsEditing(false);\n        };\n\n        return {\n            'cmd + escape': close,\n            'shift + escape': close,\n            'cmd + enter': saveAndClose,\n            'shift + enter': saveAndClose,\n            'escape': saveAndClose,\n            'enter': evt => {\n                if (\n                    evt.target.tagName.toLowerCase() === 'textarea' &&\n                    isSingleLine\n                ) {\n                    saveAndClose();\n                    evt.preventDefault();\n                    return false;\n                }\n\n                if (evt.target === containerElementRef.current) {\n                    evt.preventDefault();\n                    handleClick();\n                }\n            },\n        };\n    }, [bufferedValue, handleClick, onSave, isSingleLine, value]);\n\n    useKeyboardShortcuts(keyMap, inputRef);\n\n    return (\n        <Container\n            isEditable={isEditable}\n            isEditing={isEditing}\n            ref={containerElementRef}\n            tabIndex={0}\n            tracingElementStyles={tracingElementStyles}\n            onClick={!doubleClickToEdit ? handleClick : null}\n            onDoubleClick={doubleClickToEdit ? handleClick : null}\n            {...otherProps}\n        >\n            <Canvas isEmpty={isEmpty} style={{ ...canvasStyles }}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <StyledTextarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                height: `${measuringElementHeight}px`,\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Canvas>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React, { useCallback, useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    GRID_UNIT,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport EditInPlace from './EditInPlace';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    direction: 'column',\n    justify: 'space-between',\n    spacing: 0.5,\n})(\n    ({ isActive, isTargetedForDrop, theme }) => `\n        background-color: ${\n            COLORS[theme.name][\n                isActive ? 'HIGH_CONTRAST_BACKGROUND' : 'PRIMARY_FADED'\n            ]\n        };\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 2px ${isActive ? COLORS[theme.name].SHADED : 'transparent'},\n            0 0 0 4px ${\n                isActive\n                    ? COLORS[theme.name][\n                          isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                      ]\n                    : 'transparent'\n            };\n        color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        cursor: pointer;\n        height: ${LIST_CARD_HEIGHT};\n        margin-bottom: ${LIST_CARD_SPACING};\n        margin-left: ${LIST_CARD_SPACING};\n        overflow: hidden;\n        position: relative;\n        transform: scale(${isTargetedForDrop ? 1.1 : 1});\n        width: ${LIST_CARD_WIDTH};\n        ${UNIFIED_TRANSITION};\n        \n        &:nth-child(3n+4) {\n            margin-left: 0;\n        }\n        \n        &:active,\n        &:focus,\n        &:hover {\n            box-shadow:\n                0 0 0 2px ${COLORS[theme.name].SHADED},\n                0 0 0 4px ${\n                    COLORS[theme.name][\n                        isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                    ]\n                };\n        }\n    `\n);\n\nexport const ListCardTaskIconContainer = styled(FlexBox).attrs({\n    justify: 'flex-start',\n    paddingX: 0.25,\n    paddingY: 0.25,\n    wrapped: true,\n})(\n    ({ isActive }) => `\n        background-color: rgba(255, 255, 255, ${isActive ? 0.75 : 0.25});\n        border-radius: ${BORDER_RADIUS};\n        border-top-right-radius: 0;\n        border-top-left-radius: 0;\n        margin: 5px;\n        width: calc(100% - (5px * 2));\n    `\n);\n\nexport const GhostListCard = styled(GhostButton).attrs({\n    align: 'center',\n    justify: 'center',\n})`\n    height: ${LIST_CARD_HEIGHT};\n    margin-bottom: ${LIST_CARD_SPACING};\n    width: ${LIST_CARD_WIDTH};\n`;\n\nexport const ListCardContainer = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n    justify: 'flex-start',\n    padding: 1,\n    wrapped: true,\n})(\n    ({ theme }) => `\n        align-content: flex-start;\n        background-color: ${COLORS[theme.name].SHADED};\n        height: 100%;\n        overflow: auto;\n        padding-bottom: calc(${GRID_UNIT} * 1.5);\n    `\n);\n\nconst ListCard = ({\n    appActions,\n    appData,\n    listId,\n    isEditable = true,\n    ...otherProps\n}) => {\n    const { onUpdateList, onUpdateTask } = appActions;\n\n    const { isCreatingList, lists, selectedListId, tasks } = appData;\n\n    const list = lists.find(list => list.id === listId);\n\n    const tasksInList = tasks.filter(\n        task => task.list_id === listId && !task.isComplete\n    );\n\n    const isActive = listId === selectedListId;\n\n    const listCardElementRef = useRef(null);\n\n    const [dragProps] = useDrag({ 'list-id': listId });\n\n    const [dropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const targetListId = toInt(evt.currentTarget.dataset.listId);\n            if (targetListId) {\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    list_id: targetListId,\n                });\n            }\n        },\n    });\n\n    const triggerClick = useCallback(evt => {\n        evt.preventDefault();\n        evt.target.click();\n    }, []);\n\n    const keyMap = useMemo(\n        () => ({\n            enter: triggerClick,\n            space: triggerClick,\n        }),\n        [triggerClick]\n    );\n\n    useKeyboardShortcuts(keyMap, listCardElementRef);\n\n    const tracingElementStyles = theme => `\n        border-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT}\n    `;\n\n    return (\n        <Container\n            data-list-id={listId}\n            isActive={isActive}\n            ref={listCardElementRef}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_BETWEEN_LISTS}\n            {...dragProps}\n            {...dropProps}\n            {...otherProps}\n        >\n            <EditInPlace\n                isEditable={isEditable}\n                isRemotelyActivated={\n                    isCreatingList && selectedListId === listId\n                }\n                marginX={0.75}\n                marginY={0.5}\n                style={{\n                    alignSelf: 'stretch',\n                    flexGrow: 0,\n                    flexShrink: 0,\n                }}\n                tracingElementStyles={tracingElementStyles}\n                value={list.label}\n                onSave={newLabel => {\n                    onUpdateList(listId, { label: newLabel });\n                }}\n            />\n            {tasksInList.length >= 1 && (\n                <ListCardTaskIconContainer isActive={isActive}>\n                    {tasksInList.map(task => (\n                        <span key={task.id}>{task.icon}</span>\n                    ))}\n                </ListCardTaskIconContainer>\n            )}\n        </Container>\n    );\n};\n\nexport default ListCard;\n","import sortBy from 'lodash/sortBy';\nimport React from 'react';\nimport { COPY } from './atoms/tokens';\nimport ListCard, { GhostListCard, ListCardContainer } from './ListCard';\n\nconst ListManager = ({ appActions, appData }) => {\n    const { onCreateList, onSelectList } = appActions;\n    const { lists } = appData;\n    const unarchivedLists = lists.filter(list => !list.isArchived);\n    const sortedLists = sortBy(unarchivedLists, [list => list.label]);\n\n    return (\n        <ListCardContainer>\n            <GhostListCard onClick={() => onCreateList()}>\n                {COPY.CREATE_LIST_LABEL}\n            </GhostListCard>\n            {sortedLists.map(list => (\n                <ListCard\n                    key={list.id}\n                    appActions={appActions}\n                    appData={appData}\n                    listId={list.id}\n                    onClick={() => onSelectList(list.id)}\n                />\n            ))}\n        </ListCardContainer>\n    );\n};\n\nexport default ListManager;\n","import React from 'react';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\n\nconst TaskListToggleButton = ({ isSidebarOpen, onChangeIsSidebarOpen }) => (\n    <ToggleButton\n        isActive={isSidebarOpen}\n        title={COPY.TIPS.TOGGLE_TASK_LIST}\n        onClick={() => onChangeIsSidebarOpen(!isSidebarOpen)}\n    >\n        {isSidebarOpen ? ICONS.LEFT : ICONS.RIGHT}\n    </ToggleButton>\n);\n\nexport default TaskListToggleButton;\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'space-between',\n    paddingX: 0.5,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React, { useEffect, useState } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport { SecondaryAppColumn } from './AppColumn';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\nimport SidebarToggleButton from './TaskListToggleButton';\nimport ToolBar from './ToolBar';\n\nconst Sidebar = ({ appActions, appData, children, ...otherProps }) => {\n    const { onChangeIsSidebarOpen, onChangeTheme, onUpdateTask } = appActions;\n\n    const {\n        isShowingTrashContents,\n        isSidebarOpen,\n        lists,\n        selectedListId,\n        theme,\n    } = appData;\n\n    const [isTaskListForcedOpen, setIsTaskListForcedOpen] = useState(false);\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const [sidebarDropProps] = useDrop({\n        'task-id': taskId => {\n            onUpdateTask(taskId, {\n                list_id: selectedListId,\n                scheduled: false,\n            });\n        },\n    });\n\n    useEffect(() => {\n        if (!isSidebarOpen && sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(true);\n            onChangeIsSidebarOpen(true);\n            return;\n        }\n\n        if (isTaskListForcedOpen && !sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(false);\n            onChangeIsSidebarOpen(false);\n        }\n    }, [\n        sidebarDropProps.isTargetedForDrop,\n        isTaskListForcedOpen,\n        isSidebarOpen,\n        setIsTaskListForcedOpen,\n        onChangeIsSidebarOpen,\n    ]);\n\n    return (\n        <SecondaryAppColumn\n            label={\n                !isSidebarOpen\n                    ? ''\n                    : isShowingTrashContents\n                    ? COPY.LABEL_FOR_TRASHED_TASKS\n                    : selectedList.label\n            }\n            {...sidebarDropProps}\n            {...otherProps}\n        >\n            {!isSidebarOpen ? (\n                <SidebarToggleButton\n                    isSidebarOpen={isSidebarOpen}\n                    onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                />\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={COPY.TIPS.TOGGLE_DARK_MODE}\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT'\n                                ? ICONS.DARK_MODE\n                                : ICONS.LIGHT_MODE}\n                        </ToggleButton>\n                        <SidebarToggleButton\n                            isSidebarOpen={isSidebarOpen}\n                            onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                        />\n                    </ToolBar>\n\n                    {children}\n                </>\n            )}\n        </SecondaryAppColumn>\n    );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0.75};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map((option, optionIndex) => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(\n                              renderOption(option, optionIndex),\n                              optionIndex\n                          )\n                        : renderOption(option, optionIndex)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    ICONS,\n    DURATION_OPTIONS,\n    FONTS,\n    BORDER_WIDTH,\n} from './atoms/tokens';\n\nconst TaskHeader = styled(FlexBox).attrs({\n    forwardedAs: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: ${FONTS.LARGE.SIZE};\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    align-self: center;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst DurationOptionBar = styled(OptionBar)(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        border-top: ${BORDER_WIDTH} solid ${COLORS[theme.name].BACKGROUND};\n    `\n);\n\nconst TaskDetails = ({ appActions = {}, appData = {} }) => {\n    const { onUpdateTask } = appActions;\n    const { isCreatingTask, selectedTaskId, tasks } = appData;\n    const activeTask = tasks.find(task => task.id === selectedTaskId) || {};\n    const { icon, id, label, notes, scheduled_minutes } = activeTask;\n    const isEmpty = !activeTask.id;\n\n    const handleUpdateTask = useCallback(\n        (field, value) => onUpdateTask(id, { [field]: value }),\n        [id, onUpdateTask]\n    );\n\n    const handleSaveDuration = useCallback(\n        newDuration => handleUpdateTask('scheduled_minutes', newDuration),\n        [handleUpdateTask]\n    );\n\n    const handleSaveIcon = useCallback(\n        newNotes => handleUpdateTask('icon', newNotes),\n        [handleUpdateTask]\n    );\n\n    const handleSaveLabel = useCallback(\n        newLabel => handleUpdateTask('label', newLabel),\n        [handleUpdateTask]\n    );\n\n    const handleSaveNotes = useCallback(\n        newNotes => handleUpdateTask('notes', newNotes),\n        [handleUpdateTask]\n    );\n\n    return (\n        !isEmpty && (\n            <>\n                <TaskHeader>\n                    <TaskHeaderLabel>\n                        <EditInPlace\n                            isRemotelyActivated={isCreatingTask}\n                            placeholder={COPY.EMPTY_LABEL}\n                            value={label}\n                            onSave={handleSaveLabel}\n                        />\n                    </TaskHeaderLabel>\n                    <TaskHeaderIcon>\n                        <EditInPlace\n                            placeholder={ICONS.TASK_DEFAULT}\n                            value={icon}\n                            onSave={handleSaveIcon}\n                        />\n                    </TaskHeaderIcon>\n                </TaskHeader>\n\n                <DurationOptionBar\n                    options={DURATION_OPTIONS}\n                    renderSelectedOption={option => <span>{option} mins</span>}\n                    selectedOption={scheduled_minutes}\n                    title={COPY.TIPS.SETTING_DURATION}\n                    onChange={handleSaveDuration}\n                />\n\n                <EditInPlace\n                    isFlexible\n                    isMultiLine\n                    margin={1}\n                    placeholder={COPY.EMPTY_NOTES}\n                    render={rawNotes => (\n                        <div\n                            className=\"markdown\"\n                            dangerouslySetInnerHTML={{\n                                __html: marked(rawNotes),\n                            }}\n                        />\n                    )}\n                    canvasStyles={{\n                        bottom: 0,\n                        fontSize: FONTS.LARGE.SIZE,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                    value={notes}\n                    onSave={handleSaveNotes}\n                />\n            </>\n        )\n    );\n};\n\nexport default TaskDetails;\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 ${isActive ? 2 : 1}px\n            ${\n                COLORS[theme.name][\n                    isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER'\n                ]\n            };\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        width: 100%;\n        z-index: ${isActive ? 100 : 10};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n            \n        &::selection {\n            /*color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};*/\n            color: purple;\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        }\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${\n                COLORS[theme.name][\n                    isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                ]\n            };\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].TASK_BORDER_ACTIVE};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${\n                COLORS[theme.name].TASK_BORDER_ACTIVE\n            } inset;\n        }\n        \n        ${CardLabel} {\n            color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n            min-height: ${minutesToHeight(Math.min(30, duration))};\n        }\n\n        ${CardIcon} {\n            height: ${minutesToHeight(Math.min(30, duration))};\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'center',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ duration, theme }) => `\n        font-size: ${duration <= 15 ? FONTS.NORMAL.SIZE : FONTS.LARGE.SIZE};\n        width: auto;\n    `\n);\n\nexport const TaskCardContainer = styled(FlexBox).attrs({\n    isFlexible: true,\n    justify: 'flex-start',\n    direction: 'column',\n    spacing: 0.5,\n    padding: 1,\n})``;\n\nconst TaskCard = ({ appActions, appData, task, ...otherProps }) => {\n    const { onImmediatelySelectTask, onTransitionToTask } = appActions;\n\n    const { isShowingListManager, selectedTaskId } = appData;\n\n    const { icon, id, label, scheduled_minutes } = task;\n\n    const isActive = task.id === selectedTaskId;\n\n    const [dragProps] = useDrag({ 'task-id': id });\n\n    const handleClick = () => {\n        if (isShowingListManager) {\n            onImmediatelySelectTask(id);\n            return;\n        }\n\n        onTransitionToTask(id);\n    };\n\n    return (\n        <Container\n            data-task-id={id}\n            duration={scheduled_minutes}\n            isActive={isActive}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <CardLabel>{label}</CardLabel>\n            <CardIcon duration={scheduled_minutes}>{icon}</CardIcon>\n        </Container>\n    );\n};\n\nexport default memo(TaskCard);\n","import React, { memo } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\n\nconst TaskList = ({ appActions, appData, ...otherProps }) => {\n    const { onChangeTaskPosition, onCreateTask } = appActions;\n\n    const { incompleteTasks, lists, selectedListId } = appData;\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const unscheduledTasks = incompleteTasks.filter(\n        task =>\n            !task.scheduled &&\n            task.list_id === selectedListId &&\n            !selectedList.isArchived\n    );\n\n    const [taskCardDropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n            const droppedOnTaskIndex = appData.tasks.findIndex(\n                task => task.id === droppedOnTaskId\n            );\n            onChangeTaskPosition(taskId, droppedOnTaskIndex);\n        },\n    });\n\n    return (\n        <TaskCardContainer {...otherProps}>\n            <GhostButton\n                style={{\n                    height: minutesToHeight(30),\n                }}\n                title={COPY.TIPS.CREATE_NEW_TASK}\n                onClick={() => onCreateTask()}\n            >\n                {COPY.CREATE_TASK_LABEL}\n            </GhostButton>\n            {unscheduledTasks.map(task => (\n                <TaskCard\n                    key={task.id}\n                    appActions={appActions}\n                    appData={appData}\n                    task={task}\n                    {...taskCardDropProps}\n                />\n            ))}\n        </TaskCardContainer>\n    );\n};\n\nexport default memo(TaskList);\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop({\n            'task-id': taskId =>\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    scheduled: true,\n                    scheduled_time: newTime,\n                }),\n        });\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COLORS, COPY, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: COPY.LABEL_FOR_TIMELINE,\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].TASK_BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${COLORS[theme.name].BORDER};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            opacity: ${isFaded ? 0.5 : 1};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop({ 'task-id': () => {} });\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst DROP_ZONE_SIZE = `calc(${GRID_UNIT} * 4)`;\n\nconst pulsingAnimation = ({ from, to }) => keyframes`\n    0% {\n        transform: scale(${from});\n    }\n    100% {\n        transform: scale(${to});\n    }\n`;\n\nconst AnimatedContainer = styled(FlexBox)(\n    ({ isDraggingTask, isTargetedForDrop }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop\n            ? pulsingAnimation({ from: 1.6, to: 2.4 })\n            : isDraggingTask\n            ? pulsingAnimation({ from: 1, to: 1.6 })\n            : 'unset'};\n        animation-timing-function: ease-in-out;\n        bottom: 0;\n        height: ${DROP_ZONE_SIZE};\n        position: fixed;\n        right: 0;\n        transform-origin: bottom right;\n        transform: scale(${isDraggingTask ? 1.5 : 1});\n        width: ${DROP_ZONE_SIZE};\n        z-index: 1000;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst TrashDropZone = styled(AnimatedContainer)(\n    ({ isDraggingTask }) => `\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n    `\n);\n\nconst TrashIconContainer = styled(AnimatedContainer).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 1,\n})(\n    ({ isDraggingTask, isShowingTrashContents, isTargetedForDrop, theme }) => `\n        color: ${\n            isTargetedForDrop\n                ? '#FF0000'\n                : COLORS[theme.name][\n                      isDraggingTask || isShowingTrashContents\n                          ? 'PRIMARY'\n                          : 'TEXT_FADED'\n                  ]\n        };\n        cursor: pointer;\n        font-size: 3rem;\n        opacity: ${!isTargetedForDrop && !isDraggingTask ? 0.6 : 1};\n        \n        &:hover {\n            color: ${COLORS[theme.name].PRIMARY};\n        }\n    `\n);\n\nconst Trash = ({ appActions, appData, ...otherProps }) => {\n    const {\n        onChangeIsShowingTrashContents,\n        onDeleteTask,\n        onSelectList,\n        onUpdateList,\n    } = appActions;\n\n    const {\n        isDraggingTask,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n    } = appData;\n\n    const [dropProps] = useDrop({\n        'list-id': listId => {\n            if (selectedListId === listId) {\n                const firstUnarchivedList = lists.find(\n                    list => list.id !== listId && !list.isArchived\n                );\n\n                if (firstUnarchivedList) {\n                    onSelectList(firstUnarchivedList.id);\n                }\n            }\n\n            onUpdateList(listId, {\n                isArchived: true,\n            });\n        },\n        'task-id': onDeleteTask,\n    });\n\n    const handleClick = () =>\n        onChangeIsShowingTrashContents(!isShowingTrashContents);\n\n    return (\n        <>\n            <TrashIconContainer\n                isDraggingTask={isDraggingTask}\n                isShowingTrashContents={isShowingTrashContents}\n                isTargetedForDrop={dropProps.isTargetedForDrop}\n                title={COPY.TIPS.DELETE_TASK}\n                onClick={handleClick}\n            >\n                {ICONS.END_ZONE}\n            </TrashIconContainer>\n            <TrashDropZone\n                isDraggingTask={isDraggingTask}\n                {...dropProps}\n                {...otherProps}\n            />\n        </>\n    );\n};\n\nexport default Trash;\n","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport random from 'lodash/random';\nimport FlexBox from './atoms/FlexBox';\nimport Icon from './atoms/Icon';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst animation = ({ minOpacity, translationDistance }) => keyframes`\n    0% {\n        transform: translateY(-${translationDistance}px);\n        opacity: ${minOpacity};\n    }\n    100% {\n        transform: translateY(${translationDistance}px);\n        opacity: 1;\n    }\n`;\n\nconst Container = styled.div(\n    () => css`\n        animation-direction: alternate;\n        animation-duration: ${random(300, 400)}ms;\n        animation-iteration-count: infinite;\n        animation-name: ${animation({\n            translationDistance: random(0.5, 2),\n            minOpacity: random(0.75, 0.9),\n        })};\n        animation-timing-function: ease-in-out;\n        position: relative;\n\n        & > * {\n            width: auto;\n        }\n    `\n);\n\nconst RestoreButton = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 0.25,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        border: 2px solid ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n        border-radius: 100px;\n        color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n        cursor: pointer;\n        height: calc(${GRID_UNIT});\n        position: absolute;\n        right: 0;\n        top: 0;\n        transform: translate(50%, -50%);\n        width: calc(${GRID_UNIT});\n        z-index: 1000;\n        \n        &:hover {\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n            color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        }\n    `\n);\n\nconst TrashedCard = ({\n    children,\n    restoreButtonTitle,\n    onRestore,\n    ...otherProps\n}) => {\n    return (\n        <Container {...otherProps}>\n            <RestoreButton title={restoreButtonTitle} onClick={onRestore}>\n                <Icon iconName=\"reply\" />\n            </RestoreButton>\n            {children}\n        </Container>\n    );\n};\n\nexport default TrashedCard;\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport ListCard, { ListCardContainer } from './ListCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedLists = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateList } = appActions;\n\n    const { lists } = appData;\n\n    const deletedLists = lists.filter(list => list.isArchived);\n\n    const hasDeletedLists = deletedLists.length;\n\n    const handleRestoreList = listId =>\n        onUpdateList(listId, { isArchived: false });\n\n    return (\n        <>\n            {!hasDeletedLists && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_LISTS}\n                </FlexBox>\n            )}\n            {!!hasDeletedLists && (\n                <ListCardContainer {...otherProps}>\n                    {deletedLists.map(list => (\n                        <TrashedCard\n                            key={list.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_LIST}\n                            onRestore={handleRestoreList.bind(this, list.id)}\n                        >\n                            <ListCard\n                                appActions={appActions}\n                                appData={appData}\n                                isEditable={false}\n                                listId={list.id}\n                            />\n                        </TrashedCard>\n                    ))}\n                </ListCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedLists);\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedTasks = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateTask } = appData;\n\n    const { tasks } = appData;\n\n    const deletedTasks = tasks.filter(task => task.isComplete);\n\n    const hasDeletedTasks = deletedTasks.length;\n\n    const handleRestoreTask = taskId =>\n        onUpdateTask(taskId, { isComplete: false });\n\n    return (\n        <>\n            {!hasDeletedTasks && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_TASKS}\n                </FlexBox>\n            )}\n            {!!hasDeletedTasks && (\n                <TaskCardContainer {...otherProps}>\n                    {deletedTasks.map(task => (\n                        <TrashedCard\n                            key={task.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_TASK}\n                            style={{ width: '100%' }}\n                            onRestore={handleRestoreTask.bind(this, task.id)}\n                        >\n                            <TaskCard\n                                appActions={appActions}\n                                appData={appData}\n                                isActive\n                                task={task}\n                            />\n                        </TrashedCard>\n                    ))}\n                </TaskCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedTasks);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                ![null, 'undefined'].includes(savedState)\n                    ? JSON.parse(savedState)\n                    : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import sample from 'lodash/sample';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { StyleSheetManager, ThemeProvider } from 'styled-components';\nimport { PrimaryAppColumn } from './components/AppColumn';\nimport { ToggleButton } from './components/atoms/Button';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport {\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    SIDEBAR_DEFAULT_WIDTH,\n    SIDEBAR_EXTENDED_WIDTH,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\nimport Transition from './components/atoms/Transition';\nimport ListManager from './components/ListManager';\nimport Sidebar from './components/Sidebar';\nimport TaskDetails from './components/TaskDetails';\nimport TaskList from './components/TaskList';\nimport Timeline from './components/Timeline';\nimport ToolBar from './components/ToolBar';\nimport Trash from './components/Trash';\nimport TrashedLists from './components/TrashedLists';\nimport TrashedTasks from './components/TrashedTasks';\nimport useKeyboardShortcuts from './hooks/useKeyboardShortcuts';\nimport usePersistentState from './hooks/usePersistentState';\n\nfunction App() {\n    const [isShowingSidebar, setIsShowingSidebar] = usePersistentState(\n        'is-showing-sidebar',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        INITIAL_SELECTED_LIST_ID\n    );\n    const [isShowingListManager, setIsShowingListManager] = usePersistentState(\n        'is-showing-list-manager',\n        true\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        INITIAL_SELECTED_TASK_ID\n    );\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingList, setIsCreatingList] = useState(false);\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const [isShowingTrashContents, setIsShowingTrashContents] = useState(false);\n    const [isTransitioning, setIsTransitioning] = useState(false);\n    const unarchivedLists = useMemo(\n        () => lists.filter(list => !list.isArchived),\n        [lists]\n    );\n    const currentListIndex = unarchivedLists.findIndex(\n        list => list.id === selectedListId\n    );\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n    const hasUnarchivedList = lists.filter(list => !list.isArchived).length;\n    const isSidebarOpen = hasUnarchivedList && isShowingSidebar;\n\n    useEffect(() => {\n        const handleDragOver = () => setIsDraggingTask(true);\n        const handleDragEnd = () => setIsDraggingTask(false);\n        document.addEventListener('dragover', handleDragOver);\n        document.addEventListener('dragend', handleDragEnd);\n        document.addEventListener('drop', handleDragEnd);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n            document.removeEventListener('dragend', handleDragEnd);\n            document.removeEventListener('drop', handleDragEnd);\n        };\n    }, []);\n\n    const onCreateList = useCallback(\n        (overrides = {}) => {\n            const newListId = Date.now();\n\n            setLists(currentLists =>\n                currentLists.concat([\n                    {\n                        id: newListId,\n                        isArchived: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_LIST_LABEL\n                        }`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedListId(newListId);\n\n            setIsCreatingList(true);\n\n            setTimeout(() => setIsCreatingList(false), 1000);\n        },\n        [setSelectedListId, setLists]\n    );\n\n    const onUpdateList = useCallback(\n        (listId, updates) => {\n            setLists(prevLists =>\n                prevLists.map(list => {\n                    if (list.id === listId) {\n                        return {\n                            ...list,\n                            ...updates,\n                        };\n                    }\n                    return list;\n                })\n            );\n        },\n        [setLists]\n    );\n\n    const onSelectList = listId => {\n        setSelectedListId(listId);\n        setIsShowingSidebar(true);\n        setIsShowingTrashContents(false);\n    };\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                [\n                    {\n                        icon: ICONS.TASK_DEFAULT,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_TASK_LABEL\n                        }`,\n                        notes: COPY.NEW_TASK_NOTES,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ].concat(currentTasks)\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingTask(true);\n\n            setIsShowingListManager(false);\n        },\n        [selectedListId, setIsShowingListManager, setSelectedTaskId, setTasks]\n    );\n\n    useEffect(() => {\n        if (isCreatingTask) {\n            setIsShowingListManager(false);\n            const timer = setTimeout(() => setIsCreatingTask(false), 100);\n            return () => clearTimeout(timer);\n        }\n    }, [isCreatingTask, setIsCreatingTask, setIsShowingListManager]);\n\n    const transition = useCallback(\n        callback => {\n            setIsTransitioning(true);\n            setTimeout(() => {\n                callback();\n                setIsTransitioning(false);\n            }, ROUTE_TRANSITION_ANIMATION_DURATION / 2);\n        },\n        [setIsTransitioning]\n    );\n\n    const onImmediatelySelectTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            setSelectedTaskId(taskId);\n        },\n        [isShowingListManager, setIsShowingListManager, setSelectedTaskId]\n    );\n\n    const onTransitionToTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            transition(() => setSelectedTaskId(taskId));\n        },\n        [\n            isShowingListManager,\n            setIsShowingListManager,\n            setSelectedTaskId,\n            transition,\n        ]\n    );\n\n    const onChangeIsSidebarOpen = setIsShowingSidebar;\n\n    const onChangeIsShowingListManager = useCallback(\n        newIsShowingListManager => {\n            transition(() => {\n                setIsShowingListManager(newIsShowingListManager);\n\n                if (newIsShowingListManager) {\n                    setIsShowingSidebar(true);\n                }\n            });\n        },\n        [setIsShowingSidebar, setIsShowingListManager, transition]\n    );\n\n    const onChangeIsShowingTrashContents = useCallback(() => {\n        if (!isShowingSidebar) {\n            setIsShowingSidebar(true);\n        }\n        if (!isShowingListManager) {\n            setIsShowingListManager(true);\n        }\n        setIsShowingTrashContents(!isShowingTrashContents);\n    }, [\n        isShowingListManager,\n        isShowingSidebar,\n        isShowingTrashContents,\n        setIsShowingListManager,\n        setIsShowingSidebar,\n        setIsShowingTrashContents,\n    ]);\n\n    const onDeleteTask = useCallback(\n        taskId => {\n            if (selectedTaskId === taskId) {\n                const firstUnarchivedTask = tasks.find(\n                    task =>\n                        task.id !== taskId &&\n                        task.list_id === selectedListId &&\n                        !task.isComplete\n                );\n\n                if (firstUnarchivedTask) {\n                    onImmediatelySelectTask(firstUnarchivedTask.id);\n                } else {\n                    onChangeIsShowingListManager(true);\n                }\n            }\n\n            onUpdateTask(taskId, {\n                isComplete: true,\n            });\n        },\n        [\n            onChangeIsShowingListManager,\n            onImmediatelySelectTask,\n            onUpdateTask,\n            selectedListId,\n            tasks,\n            selectedTaskId,\n        ]\n    );\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const moveTaskToTimeline = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: true,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const moveTaskToTaskList = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: false,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const selectNextList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const nextListIndex = currentListIndex + 1;\n            const nextIndex =\n                nextListIndex > unarchivedLists.length - 1 ? 0 : nextListIndex;\n            setSelectedListId(unarchivedLists[nextIndex].id);\n            setIsShowingListManager(true);\n        },\n        [\n            currentListIndex,\n            setIsShowingListManager,\n            setSelectedListId,\n            unarchivedLists,\n        ]\n    );\n\n    const selectPreviousList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const prevListIndex = currentListIndex - 1;\n            const prevIndex =\n                prevListIndex < 0 ? unarchivedLists.length - 1 : prevListIndex;\n            setSelectedListId(unarchivedLists[prevIndex].id);\n            setIsShowingListManager(true);\n        },\n        [\n            currentListIndex,\n            setIsShowingListManager,\n            setSelectedListId,\n            unarchivedLists,\n        ]\n    );\n\n    const setTaskDuration = useCallback(\n        duration => {\n            onUpdateTask(selectedTaskId, {\n                scheduled_minutes: duration,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const toggleTaskListVisibility = useCallback(\n        evt => {\n            evt.preventDefault();\n\n            if (isShowingSidebar) {\n                setIsShowingTrashContents(false);\n            }\n\n            onChangeIsSidebarOpen(!isShowingSidebar);\n        },\n        [isShowingSidebar, onChangeIsSidebarOpen]\n    );\n\n    const toggleDarkMode = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n        },\n        [onChangeTheme, themeName]\n    );\n\n    const toggleIsEditingCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            setIsCreatingTask(true);\n        },\n        [setIsCreatingTask]\n    );\n\n    const toggleIsShowingListManager = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeIsShowingListManager(!isShowingListManager);\n        },\n        [isShowingListManager, onChangeIsShowingListManager]\n    );\n\n    const createNewTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onCreateTask();\n        },\n        [onCreateTask]\n    );\n\n    const deleteCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onDeleteTask(selectedTaskId);\n        },\n        [onDeleteTask, selectedTaskId]\n    );\n\n    const goBack = useCallback(() => {\n        setIsShowingTrashContents(current => {\n            if (current) {\n                return false;\n            }\n        });\n\n        setIsShowingListManager(current => !current);\n    }, [setIsShowingListManager, setIsShowingTrashContents]);\n\n    const keyMap = useMemo(() => {\n        return {\n            ...[15, 30, 45, 60, 90, 120].reduce((acc, duration, index) => {\n                return {\n                    ...acc,\n                    [index + 1]: setTaskDuration.bind(null, duration),\n                };\n            }, {}),\n            'cmd + arrowRight': moveTaskToTimeline,\n            'cmd + arrowLeft': moveTaskToTaskList,\n            'cmd + shift + arrowRight': selectNextList,\n            'cmd + shift + arrowLeft': selectPreviousList,\n            'cmd + shift + ]': selectNextList,\n            'cmd + shift + [': selectPreviousList,\n            'b': toggleTaskListVisibility,\n            'd': toggleDarkMode,\n            'e': toggleIsEditingCurrentTask,\n            'escape': goBack,\n            'l': toggleIsShowingListManager,\n            'n': createNewTask,\n            't': deleteCurrentTask,\n        };\n    }, [\n        createNewTask,\n        deleteCurrentTask,\n        goBack,\n        moveTaskToTaskList,\n        moveTaskToTimeline,\n        selectNextList,\n        selectPreviousList,\n        setTaskDuration,\n        toggleTaskListVisibility,\n        toggleDarkMode,\n        toggleIsEditingCurrentTask,\n        toggleIsShowingListManager,\n    ]);\n\n    useKeyboardShortcuts(keyMap);\n\n    const appActions = {\n        onChangeIsSidebarOpen,\n        onChangeTaskPosition,\n        onChangeIsShowingListManager,\n        onChangeIsShowingTrashContents,\n        onChangeTheme,\n        onCreateList,\n        onCreateTask,\n        onDeleteTask,\n        onSelectList,\n        onImmediatelySelectTask,\n        onTransitionToTask,\n        onUpdateList,\n        onUpdateTask,\n    };\n\n    const appData = {\n        incompleteTasks,\n        isSidebarOpen,\n        isCreatingList,\n        isCreatingTask,\n        isDraggingTask,\n        isShowingListManager,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    const columnWidths = isSidebarOpen\n        ? {\n              sidebar: SIDEBAR_DEFAULT_WIDTH,\n              listManager: '40vw',\n              taskDetails: '40vw',\n              timeline: SIDEBAR_DEFAULT_WIDTH,\n          }\n        : {\n              sidebar: `calc(${GRID_UNIT} * 2)`,\n              listManager: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              taskDetails: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              timeline: SIDEBAR_EXTENDED_WIDTH,\n          };\n\n    return (\n        <StyleSheetManager disableVendorPrefixes>\n            <ThemeProvider theme={{ name: themeName }}>\n                <GlobalStyle />\n                <Trash appActions={appActions} appData={appData} />\n                <FlexBox align=\"stretch\">\n                    <Sidebar\n                        appActions={appActions}\n                        appData={appData}\n                        style={{\n                            width: columnWidths.sidebar,\n                        }}\n                    >\n                        {isShowingTrashContents ? (\n                            <TrashedTasks\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : (\n                            <TaskList\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        )}\n                    </Sidebar>\n\n                    <PrimaryAppColumn\n                        label={\n                            isShowingTrashContents\n                                ? COPY.LABEL_FOR_TRASHED_LISTS\n                                : isShowingListManager\n                                ? COPY.LABEL_FOR_LIST_MANAGER\n                                : COPY.LABEL_FOR_TASK_DETAILS\n                        }\n                        style={{\n                            width: isShowingListManager\n                                ? columnWidths.listManager\n                                : columnWidths.taskDetails,\n                        }}\n                    >\n                        <ToolBar>\n                            <ToggleButton\n                                isActive={isShowingListManager}\n                                title={COPY.TIPS.TOGGLE_LIST_MANAGER}\n                                onClick={() =>\n                                    onChangeIsShowingListManager(\n                                        !isShowingListManager\n                                    )\n                                }\n                            >\n                                {isShowingListManager ? (\n                                    <FlexBox spacing={0.25}>\n                                        {ICONS.TASK_DETAILS}\n                                        <span>\n                                            {COPY.LABEL_FOR_TASK_DETAILS}\n                                        </span>\n                                    </FlexBox>\n                                ) : (\n                                    <FlexBox spacing={0.25}>\n                                        {ICONS.LIST_MANAGER}\n                                        <span>\n                                            {COPY.LABEL_FOR_LIST_MANAGER}\n                                        </span>\n                                    </FlexBox>\n                                )}\n                            </ToggleButton>\n                        </ToolBar>\n                        <Transition isTransitioning={isTransitioning}>\n                            {isShowingTrashContents ? (\n                                <TrashedLists\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            ) : isShowingListManager ? (\n                                <ListManager\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            ) : (\n                                <TaskDetails\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            )}\n                        </Transition>\n                    </PrimaryAppColumn>\n\n                    <Timeline\n                        appActions={appActions}\n                        appData={appData}\n                        selectedTaskId={selectedTaskId}\n                        from={TIMELINE_FROM}\n                        style={{\n                            width: columnWidths.timeline,\n                        }}\n                        tasks={incompleteTasks}\n                        to={TIMELINE_TO}\n                    />\n                </FlexBox>\n            </ThemeProvider>\n        </StyleSheetManager>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}