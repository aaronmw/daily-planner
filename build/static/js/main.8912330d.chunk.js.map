{"version":3,"sources":["hooks/useDrop.js","components/atoms/tokens.js","utils/minutesToHeight.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","components/atoms/Button.js","components/OptionBar.js","components/TaskCard.js","hooks/useDrag.js","components/Backlog.js","components/CompletedTasksDropZone.js","hooks/useKeyboardShortcuts.js","components/EditInPlace.js","components/TaskDetails.js","utils/strToHoursAndMinutes.js","utils/toInt.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/atoms/GlobalStyles.js","hooks/usePersistentState.js","index.js"],"names":["useDrop","type","callback","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","isTargetedForDrop","setIsTargetedForDrop","droppable","onDragEnter","evt","preventDefault","onDragOver","onDragLeave","onDrop","payload","dataTransfer","getData","isNaN","parseFloat","DEFAULT_TASK_ICON","DURATION_OPTIONS","INITIAL_TASKS","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","DARK","HIGH_CONTRAST_BACKGROUND","PRIMARY","HIGH_CONTRAST_TEXT","BACKGROUND","BORDER_HOVER","setLightness","BORDER_IDLE","SHADED","lighten","TEXT","TEXT_FADED","BORDER_NEUTRAL","LIGHT","rgba","COLORS","minutesToHeight","minutes","concat","styled","div","_ref","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","name","Box","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","Container","FlexBox","attrs","ContentContainer","_ref2","ColumnHeader","_ref3","AppColumn","_ref4","children","label","otherProps","objectWithoutProperties","react_default","a","createElement","Button","as","GhostButton","OptionButton","isSelected","OptionBar","options","_ref3$renderOption","renderOption","option","_ref3$renderSelectedO","renderSelectedOption","selectedOption","onChange","OptionBar_Container","map","key","onClick","duration","isActive","isDragging","isDraggingOver","Label","TaskCard","appActions","task","onSelectTask","icon","id","scheduled_minutes","_useDrag","setIsDragging","_useState3","_useState4","setIsDraggingOver","draggable","onDragEnd","onDragStart","setData","useDrag","dragProps","TaskCard_Container","assign","tabIndex","style","maxHeight","overflow","hasTasks","BacklogDropZone","CreateFirstTaskTip","_templateObject","Backlog","appData","selectedTaskId","tasks","onClickTask","onChangeTheme","onCreateTask","onUpdateTask","_useDrop","taskId","scheduled","dropProps","unscheduledTasks","filter","Backlog_Container","components_OptionBar","toLowerCase","bottom","left","position","right","top","width","role","aria-label","height","components_TaskCard","pulsingAnimation","keyframes","CompletedTasksDropZone_templateObject","css","_templateObject2","transparentize","CompletedTaskDropZone","isComplete","currentSelectedTaskId","CompletedTasksDropZone_Container","useKeyboardShortcuts","keyMap","keysPressed","shiftKey","push","metaKey","sortedKeysPressed","uniq","sort","mapKeys","handler","sequence","sequenceArray","split","trim","join","isEditing","isEmpty","EditInPlace","_ref2$isMultiLine","isMultiLine","_ref2$isRemotelyActiv","isRemotelyActivated","_ref2$placeholder","placeholder","_ref2$render","render","value","_ref2$value","_ref2$wrapperStyles","wrapperStyles","_ref2$onSave","onSave","setIsEditing","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","inputRef","useRef","measuringElementRef","isSingleLine","useEffect","handleClick","current","select","focus","el","offsetHeight","saveAndClose","close","_useKeyboardShortcuts","cmd+escape","shift+escape","cmd+enter","shift+enter","escape","enter","ignoreKey","onKeyDown","EditInPlace_Container","Fragment","ref","pointerEvents","opacity","outline","whiteSpace","disabled","rows","display","onBlur","target","isLoading","ANIMATION_DURATION","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","TaskDetails_templateObject2","TaskDetails","_ref3$appActions","_ref3$isCreatingTask","isCreatingTask","_ref3$task","setIsLoading","notes","handleUpdateTask","field","[object Object]","useLayoutEffect","newTimer","setTimeout","clearTimeout","TaskDetails_Container","newDuration","components_EditInPlace","empty_label","newLabel","newNotes","empty_notes","rawNotes","className","dangerouslySetInnerHTML","__html","marked","strToHoursAndMinutes","str","val","parseInt","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","Math","floor","scheduled_time","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","TimelineDropZone_TimelineDropTarget","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","offsetMinutes","CurrentTimeMarker","Timeline","_ref5","from","to","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","createGlobalStyle","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","setTasks","_usePersistentState3","_usePersistentState4","themeName","setThemeName","_usePersistentState5","_usePersistentState6","setSelectedTaskId","setIsCreatingTask","isDraggingTask","setIsDraggingTask","taskLabelElementRef","activeTask","incompleteTasks","values","hasIncompleteTasks","handleDragEnd","onUpdateTasks","updates","prevState","objectSpread2","overrides","newTaskId","sample","motivational_descriptors","new_task_label","new_task_notes","styled_components_browser_esm","GlobalStyles","CompletedTasksDropZone","components_Timeline","components_TaskDetails","components_Backlog","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.8912330d.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useDrop = (type, callback = () => {}) => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        setIsTargetedForDrop(true);\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n        setIsTargetedForDrop(true);\n    };\n\n    const onDragLeave = () => {\n        setIsTargetedForDrop(false);\n    };\n\n    const onDrop = evt => {\n        const payload = evt.dataTransfer.getData(type);\n        if (payload) {\n            callback(isNaN(payload) ? payload : parseFloat(payload));\n        }\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import sample from 'lodash/sample';\nimport { lighten, rgba, setLightness } from 'polished';\n\nexport const BORDER_RADIUS = '3px';\nexport const BULLET_SIZE = '10px';\nexport const DEFAULT_TASK_ICON = '📌';\nexport const END_ZONE_ICON = '🗑';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '30px';\nexport const HOURS_PER_SCREEN = 8;\nexport const INITIAL_TASKS = {};\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const TIMELINE_FROM = '7:00';\nexport const TIMELINE_TO = '24:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.motivational_descriptors = [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\nCOPY.empty_label = '...label?';\nCOPY.empty_notes = '...notes?';\nCOPY.new_task_label = `New Task`;\nCOPY.new_task_notes = '';\n\nexport { COPY };\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = PRIMARY;\nDARK.BACKGROUND = '#000209';\nDARK.HIGH_CONTRAST_BACKGROUND = DARK.PRIMARY;\nDARK.HIGH_CONTRAST_TEXT = DARK.BACKGROUND;\nDARK.BORDER_HOVER = setLightness(0.5, PRIMARY);\nDARK.BORDER_IDLE = setLightness(0.3, PRIMARY);\nDARK.SHADED = lighten(0.1, DARK.BACKGROUND);\nDARK.TEXT = setLightness(0.85, DARK.PRIMARY);\nDARK.TEXT_FADED = setLightness(0.4, DARK.TEXT);\nDARK.BORDER_NEUTRAL = setLightness(0.15, DARK.TEXT);\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.BACKGROUND = 'white';\nLIGHT.HIGH_CONTRAST_BACKGROUND = LIGHT.PRIMARY;\nLIGHT.HIGH_CONTRAST_TEXT = LIGHT.BACKGROUND;\nLIGHT.BORDER_HOVER = rgba('#0094FF', 0.5);\nLIGHT.BORDER_IDLE = rgba('#0094FF', 0.3);\nLIGHT.BORDER_NEUTRAL = setLightness(0.75, LIGHT.BACKGROUND);\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.TEXT = setLightness(0.15, LIGHT.PRIMARY);\nLIGHT.TEXT_FADED = LIGHT.BORDER_NEUTRAL;\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","import styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from './tokens';\n\nexport default styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = 0,\n        marginX = 0,\n        marginY = 0,\n        padding = 0,\n        paddingX = 0,\n        paddingY = 0,\n        theme,\n    }) => `\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER_NEUTRAL}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        isFlexible = false,\n        justify = 'stretch',\n        spacing = 0,\n    }) => `\n        align-items: ${align};\n        display: flex;\n        flex-direction: ${direction};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        justify-content: ${justify};\n        width: 100%;\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n        \n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})(\n    ({ theme }) => `\n        height: calc(100vh - ${GRID_UNIT});\n        overflow: auto;\n        position: relative;\n        \n        & > * {\n            align-self: stretch;\n        }\n    `\n);\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n    paddingX: 0.5,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        border-bottom: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({ children, label, ...otherProps }) => (\n    <Container>\n        <ColumnHeader>{label}</ColumnHeader>\n        <ContentContainer {...otherProps}>{children}</ContentContainer>\n    </Container>\n);\n\nexport default AppColumn;\n","import styled from 'styled-components';\nimport { BORDER_RADIUS, COLORS, UNIFIED_TRANSITION } from './tokens';\nimport FlexBox from './FlexBox';\n\nconst Button = styled(FlexBox).attrs({\n    as: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].PRIMARY};\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].TEXT};\n        cursor: pointer;\n        transform: scale(1);\n        ${UNIFIED_TRANSITION};\n        \n        &:focus,\n        &:hover {\n            transform: scale(1.1);\n        }\n        &:active {\n            transform: scale(0.9);\n            filter: hue-rotate(20deg);\n        }\n    `\n);\n\nexport const GhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        border-radius: ${BORDER_RADIUS};\n        border: 2px dashed ${COLORS[theme.name].BORDER_IDLE};\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            border-color: ${COLORS[theme.name].BORDER_HOVER};\n        }\n    `\n);\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    justify: 'space-between',\n    paddingX: 1,\n    paddingY: 0.25,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        width: 100%;\n        z-index: 10;\n        \n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst OptionButton = styled(Button)(\n    ({ isSelected, theme }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <Container {...otherProps}>\n        {options.map(option => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(renderOption(option))\n                        : renderOption(option)}\n                </OptionButton>\n            );\n        })}\n    </Container>\n);\n\nexport default OptionBar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n})(\n    ({ duration, isActive, isDragging, isDraggingOver, theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow: ${`0 0 0 2px ${\n            COLORS[theme.name][isActive ? 'PRIMARY' : 'BORDER_IDLE']\n        }`};\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        min-height: ${minutesToHeight(20)};\n        opacity: ${isDragging ? 0.5 : 1};\n        padding: 0 calc(${GRID_UNIT} / 2) 0\n            calc(${GRID_UNIT} / 2 + ${LABEL_STRIP_WIDTH});\n        pointer-events: ${isDraggingOver ? 'none' : 'auto'};\n        position: relative;\n        transition-property: opacity, top;\n        width: 100%;\n        z-index: ${isActive ? 10 : 'initial'};\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].BORDER_HOVER};\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY} inset;\n        }\n    `\n);\n\nconst Label = styled(FlexBox).attrs({\n    spacing: 0.5,\n})(\n    ({ isActive, theme }) => `\n        align-items: center;\n        color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n        display: flex;\n        justify-content: space-between;\n        height: 100%;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst TaskCard = ({ appActions, isActive, task, ...otherProps }) => {\n    const { onSelectTask } = appActions;\n    const { icon, id, label, scheduled_minutes } = task;\n    const [dragProps] = useDrag('task-id', id);\n\n    const handleClick = () => onSelectTask(id);\n\n    return (\n        <Container\n            duration={scheduled_minutes}\n            isActive={isActive}\n            tabIndex={0}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <Label isActive={isActive}>\n                <div\n                    style={{\n                        maxHeight: '100%',\n                        overflow: 'auto',\n                    }}\n                >\n                    {label}\n                </div>\n                <span>{icon}</span>\n            </Label>\n        </Container>\n    );\n};\n\nexport default TaskCard;\n","import { useState } from 'react';\n\nexport default (type, payload) => {\n    const [isDragging, setIsDragging] = useState(false);\n    const [isDraggingOver, setIsDraggingOver] = useState(false);\n\n    const onDragStart = evt => {\n        evt.dataTransfer.setData(type, payload);\n        setIsDragging(true);\n    };\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n        setIsDraggingOver(false);\n    };\n\n    const onDragEnter = () => setIsDraggingOver(true);\n\n    const onDragLeave = () => setIsDraggingOver(false);\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        isDraggingOver,\n        onDragEnd,\n        onDragEnter,\n        onDragLeave,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport AppColumn from './AppColumn';\nimport Box from './atoms/Box';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport OptionBar from './OptionBar';\nimport TaskCard from './TaskCard';\nimport { COLORS, DEFAULT_TASK_ICON, GRID_UNIT } from './atoms/tokens';\n\nconst Container = styled(AppColumn).attrs({\n    label: 'Backlog',\n})(\n    ({ hasTasks, isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        flex-grow: 1;\n        overflow: ${hasTasks ? 'auto' : 'visible'};\n    `\n);\n\nconst BacklogDropZone = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isTargetedForDrop, theme }) => `\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].BORDER_HOVER} inset`\n                : 'initial'\n        };\n        position: relative;\n    `\n);\n\nconst CreateFirstTaskTip = styled(Box)`\n    position: absolute;\n    left: calc(100% + ${GRID_UNIT} * 2);\n    top: 50%;\n    transform: translateY(-50%);\n    white-space: nowrap;\n`;\n\nconst Backlog = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    tasks,\n    onClickTask,\n    ...otherProps\n}) => {\n    const { onChangeTheme, onCreateTask, onUpdateTask } = appActions;\n    const { theme } = appData;\n    const [dropProps] = useDrop('task-id', taskId =>\n        onUpdateTask(taskId, {\n            scheduled: false,\n        })\n    );\n    const unscheduledTasks = tasks.filter(task => !task.scheduled);\n    const hasTasks = tasks.length;\n\n    const handleClickNewTask = () => onCreateTask();\n\n    return (\n        <Container {...otherProps}>\n            <OptionBar\n                options={['DARK', 'LIGHT']}\n                renderOption={option => option.toLowerCase()}\n                renderSelectedOption={option => `${option} mode`}\n                selectedOption={theme}\n                onChange={onChangeTheme}\n            />\n            <BacklogDropZone {...dropProps}>\n                <FlexBox\n                    justify=\"flex-start\"\n                    direction=\"column\"\n                    spacing={1}\n                    padding={1}\n                    style={{\n                        bottom: 0,\n                        left: 0,\n                        overflow: hasTasks ? 'auto' : 'visible',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                >\n                    <div style={{ position: 'relative', width: '100%' }}>\n                        {!hasTasks && (\n                            <CreateFirstTaskTip>\n                                <span\n                                    role=\"img\"\n                                    aria-label=\"left-pointing hand\"\n                                >\n                                    👈\n                                </span>{' '}\n                                Create your first task\n                            </CreateFirstTaskTip>\n                        )}\n                        <GhostButton\n                            style={{\n                                height: minutesToHeight(30),\n                            }}\n                            onClick={handleClickNewTask}\n                        >\n                            New Task\n                        </GhostButton>\n                    </div>\n                    {unscheduledTasks.map(task => (\n                        <TaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            isActive={selectedTaskId === task.id}\n                            task={task}\n                        />\n                    ))}\n                </FlexBox>\n            </BacklogDropZone>\n        </Container>\n    );\n};\n\nexport default Backlog;\n","import React from 'react';\nimport { transparentize } from 'polished';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport { COLORS, END_ZONE_ICON, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst DROP_ZONE_RADIUS = '20vw';\n\nconst pulsingAnimation = ({ theme }) => keyframes`\n    0% {\n        box-shadow: 0 0 0 0 ${COLORS[theme.name].PRIMARY};\n        transform: scale(1);\n    }\n    100% {\n        box-shadow: 0 0 50px 0 ${COLORS[theme.name].PRIMARY};\n        transform: scale(1.2);\n    }\n`;\n\nconst Container = styled.div(\n    ({ isDragging, isTargetedForDrop, theme }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop ? pulsingAnimation : 'unset'};\n        animation-timing-function: ease-in-out;\n        background: ${transparentize(\n            isTargetedForDrop ? 0 : isDragging ? 0.35 : 0.8,\n            COLORS[theme.name].PRIMARY\n        )};\n        bottom: calc(${DROP_ZONE_RADIUS} * -1);\n        border-radius: calc(${DROP_ZONE_RADIUS} * 2);\n        height: calc(${DROP_ZONE_RADIUS} * 2);\n        pointer-events: ${isDragging ? 'all' : 'none'};\n        position: fixed;\n        right: calc(${DROP_ZONE_RADIUS} * -1);\n        transform: scale(${isDragging ? 0.5 : 0.25});\n        width: calc(${DROP_ZONE_RADIUS} * 2);\n        z-index: 100;\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            align-items: center;\n            content: '${END_ZONE_ICON}';\n            display: flex;\n            font-size: 8rem;\n            justify-content: center;\n            height: calc(${DROP_ZONE_RADIUS} * 1.25);\n            left: 0;\n            position: absolute;\n            top: 0;\n            width: calc(${DROP_ZONE_RADIUS} * 1.25);\n        }\n    `\n);\n\nconst CompletedTaskDropZone = ({ appActions, isDragging, ...otherProps }) => {\n    const { onSelectTask, onUpdateTask } = appActions;\n    const [dropProps] = useDrop('task-id', taskId => {\n        onUpdateTask(taskId, {\n            isComplete: true,\n        });\n        onSelectTask(currentSelectedTaskId => {\n            return currentSelectedTaskId === taskId\n                ? null\n                : currentSelectedTaskId;\n        });\n    });\n\n    return <Container isDragging={isDragging} {...dropProps} {...otherProps} />;\n};\n\nexport default CompletedTaskDropZone;\n","import mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst useKeyboardShortcuts = keyMap => {\n    const onKeyDown = evt => {\n        const keysPressed = [];\n\n        if (evt.shiftKey) {\n            keysPressed.push('shift');\n        }\n\n        if (evt.metaKey) {\n            keysPressed.push('cmd');\n        }\n\n        keysPressed.push(evt.key.toLowerCase());\n\n        const sortedKeysPressed = uniq(keysPressed).sort();\n\n        mapKeys(keyMap, (handler, sequence) => {\n            const sequenceArray = sequence\n                .split('+')\n                .map(key => key.trim())\n                .sort();\n\n            if (sortedKeysPressed.join('+') === sequenceArray.join('+')) {\n                handler(evt);\n            }\n        });\n    };\n\n    return [onKeyDown];\n};\n\nexport default useKeyboardShortcuts;\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditing, isEmpty, theme }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        opacity: ${isEmpty ? 0.5 : 1};\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border: 2px dashed ${COLORS[theme.name].BORDER_HOVER};\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.5 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.5 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            &:before {\n                opacity: 1;\n            }\n        }\n    `\n);\n\nconst EditInPlace = ({\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    value = '',\n    wrapperStyles = {},\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [isRemotelyActivated]);\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = () => {\n        if (!isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    };\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const saveAndClose = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const close = () => {\n        setBufferedValue(value);\n        setIsEditing(false);\n    };\n\n    const ignoreKey = evt => {\n        evt.preventDefault();\n        return false;\n    };\n\n    const [onKeyDown] = useKeyboardShortcuts({\n        'cmd+escape': close,\n        'shift+escape': close,\n        'cmd+enter': saveAndClose,\n        'shift+enter': saveAndClose,\n        escape: saveAndClose,\n        enter: evt => {\n            if (isSingleLine) {\n                saveAndClose();\n                ignoreKey(evt);\n            }\n        },\n    });\n\n    return (\n        <Container\n            isEditing={isEditing}\n            isEmpty={isEmpty}\n            tabIndex={0}\n            onClick={handleClick}\n            {...otherProps}\n        >\n            <Box style={wrapperStyles}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                outline: '2px dotted red',\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <textarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                display: 'block',\n                                height: `${measuringElementHeight}px`,\n                                width: '100%',\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                            onKeyDown={onKeyDown}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Box>\n        </Container>\n    );\n};\n\nexport default EditInPlace;\n","import React, { useLayoutEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport AppColumn from './AppColumn';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    DEFAULT_TASK_ICON,\n    DURATION_OPTIONS,\n} from './atoms/tokens';\n\nconst ANIMATION_DURATION = 200;\n\nconst Container = styled(AppColumn)(\n    ({ isLoading, theme }) => `\n        box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1);\n        border-left: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        border-right: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        overflow: unset;\n        z-index: 11;\n        \n        // Blackout curtain\n        &:before {\n            background-color: ${COLORS[theme.name].BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isLoading ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            transition: opacity ${ANIMATION_DURATION / 2 / 1000}s ease-in-out;\n            z-index: 10;\n        }\n    `\n);\n\nconst TaskHeader = styled(FlexBox).attrs({\n    as: 'h1',\n    align: 'flex-start',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: 1.4rem;\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-self: stretch;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst TaskDetails = ({\n    appActions = {},\n    appData = {},\n    isCreatingTask = false,\n    task = {},\n    ...otherProps\n}) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const { onUpdateTask } = appActions;\n    const { icon, id, label, notes, scheduled_minutes } = task;\n    const isEmpty = !task.id;\n\n    const handleUpdateTask = (field, value) =>\n        onUpdateTask(id, { [field]: value });\n\n    const handleSaveDuration = newDuration =>\n        handleUpdateTask('scheduled_minutes', newDuration);\n\n    const handleSaveIcon = newNotes => handleUpdateTask('icon', newNotes);\n\n    const handleSaveLabel = newLabel => handleUpdateTask('label', newLabel);\n\n    const handleSaveNotes = newNotes => handleUpdateTask('notes', newNotes);\n\n    useLayoutEffect(() => {\n        setIsLoading(true);\n        const newTimer = setTimeout(\n            () => setIsLoading(false),\n            ANIMATION_DURATION / 2\n        );\n        return () => clearTimeout(newTimer);\n    }, [task.id]);\n\n    return (\n        <Container\n            isLoading={isLoading}\n            label=\"Selected Task Details\"\n            {...otherProps}\n        >\n            {!isEmpty && !isLoading && (\n                <>\n                    <OptionBar\n                        renderSelectedOption={option => `${option} mins`}\n                        selectedOption={scheduled_minutes}\n                        options={DURATION_OPTIONS}\n                        onChange={handleSaveDuration}\n                    />\n\n                    <TaskHeader>\n                        <TaskHeaderLabel>\n                            <EditInPlace\n                                isRemotelyActivated={isCreatingTask}\n                                placeholder={COPY.empty_label}\n                                value={label}\n                                onSave={handleSaveLabel}\n                            />\n                        </TaskHeaderLabel>\n                        <TaskHeaderIcon>\n                            <EditInPlace\n                                placeholder={DEFAULT_TASK_ICON}\n                                value={icon}\n                                onSave={handleSaveIcon}\n                            />\n                        </TaskHeaderIcon>\n                    </TaskHeader>\n\n                    <EditInPlace\n                        isFlexible\n                        isMultiLine\n                        margin={1}\n                        placeholder={COPY.empty_notes}\n                        render={rawNotes => (\n                            <div\n                                className=\"markdown\"\n                                dangerouslySetInnerHTML={{\n                                    __html: marked(rawNotes),\n                                }}\n                            />\n                        )}\n                        wrapperStyles={{\n                            bottom: 0,\n                            left: 0,\n                            overflow: 'auto',\n                            position: 'absolute',\n                            right: 0,\n                            top: 0,\n                        }}\n                        value={notes}\n                        onSave={handleSaveNotes}\n                    />\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default TaskDetails;\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","export default str => parseInt(str, 10);\n","import React from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = ({\n    appActions,\n    quarterInMinutes,\n    ...otherProps\n}) => {\n    const { onUpdateTask } = appActions;\n    const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n    const newOffsetMinutes =\n        fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n    const newTime = minutesToTime(newOffsetMinutes);\n    const [dropProps] = useDrop('task-id', taskId =>\n        onUpdateTask(taskId, {\n            scheduled: true,\n            scheduled_time: newTime,\n        })\n    );\n\n    return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n};\n\nconst TimelineDropZone = ({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n);\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: \"Today's Plan\",\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${transparentize(\n                isFaded ? 0.8 : 0.5,\n                COLORS[theme.name].BORDER_NEUTRAL\n            )};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ offsetMinutes }) => `\n        position: absolute;\n        left: calc(${GRID_UNIT} * 3);\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n        z-index: 2;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 500);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const handleDragOver = () => setIsTargetedForDrop(true);\n    const handleDragLeave = () => setIsTargetedForDrop(false);\n    const handleDragEnd = () => setIsTargetedForDrop(false);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                isTargetedForDrop={isTargetedForDrop}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n                onDragEnd={handleDragEnd}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default Timeline;\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, COLORS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: 1.4em;\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: 15px;\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(JSON.parse(savedState) || initialState);\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport sample from 'lodash/sample';\nimport values from 'lodash/values';\nimport Backlog from './components/Backlog';\nimport CompletedTasksDropZone from './components/CompletedTasksDropZone';\nimport TaskDetails from './components/TaskDetails';\nimport Timeline from './components/Timeline';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport usePersistentState from './hooks/usePersistentState';\nimport {\n    COPY,\n    DEFAULT_TASK_ICON,\n    INITIAL_TASKS,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\n\n/*\n    tasks: {\n        1: {\n            id: 1,\n            icon: '🧺',\n            isComplete: false,\n            label: 'Take out the laundry',\n            notes:\n                'This is a note. **This is bold, I think?**\\n\\nWith two lines!\\n\\n- And a list\\n\\n- Of things\\n\\n- Like this!\\n\\n> Look, a blockquote! Oooh',\n            scheduled: false,\n            scheduled_minutes: 30,\n            scheduled_time: '14:00',\n        },\n    },\n*/\n\nfunction App() {\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        null\n    );\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const taskLabelElementRef = useRef(null);\n    const activeTask = tasks[selectedTaskId];\n    const incompleteTasks = values(tasks).filter(task => !task.isComplete);\n    const hasIncompleteTasks = incompleteTasks.length;\n\n    const handleDragOver = () => setIsDraggingTask(true);\n\n    const handleDragEnd = () => setIsDraggingTask(false);\n\n    useEffect(() => {\n        handleDragEnd();\n    }, [tasks]);\n\n    const onUpdateTasks = updates => {\n        setTasks(prevState => ({\n            ...prevState,\n            ...updates,\n        }));\n    };\n\n    const onUpdateTask = (taskId, updates) => {\n        setTasks(prevState => ({\n            ...prevState,\n            [taskId]: {\n                ...prevState[taskId],\n                ...updates,\n            },\n        }));\n    };\n\n    const onCreateTask = (overrides = {}) => {\n        const newTaskId = Date.now();\n        const now = new Date();\n        const currentHour = now.getHours();\n        const currentMinute = now.getMinutes();\n\n        onUpdateTasks({\n            [newTaskId]: {\n                icon: DEFAULT_TASK_ICON,\n                id: newTaskId,\n                isComplete: false,\n                label: `${sample(COPY.motivational_descriptors)} ${\n                    COPY.new_task_label\n                }`,\n                notes: COPY.new_task_notes,\n                scheduled: false,\n                scheduled_minutes: 30,\n                scheduled_time: `${currentHour}:${currentMinute}`,\n                ...overrides,\n            },\n        });\n\n        setSelectedTaskId(newTaskId);\n\n        setIsCreatingTask(true);\n\n        // setTimeout(() => setIsCreatingTask(false), 1000);\n    };\n\n    const appActions = {\n        onChangeTheme: setThemeName,\n        onCreateTask,\n        onSelectTask: setSelectedTaskId,\n        onUpdateTask,\n        onUpdateTasks,\n    };\n\n    const appData = {\n        selectedTaskId,\n        taskLabelElementRef,\n        tasks,\n        theme: themeName,\n    };\n\n    return (\n        <ThemeProvider theme={{ name: themeName }}>\n            <GlobalStyle />\n            <CompletedTasksDropZone\n                appActions={appActions}\n                isDragging={isDraggingTask}\n            />\n            <FlexBox\n                align=\"stretch\"\n                direction=\"row-reverse\"\n                onDragOver={handleDragOver}\n                onDragEnd={handleDragEnd}\n            >\n                <Timeline\n                    appActions={appActions}\n                    selectedTaskId={selectedTaskId}\n                    from={TIMELINE_FROM}\n                    style={{\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                        width: '30vw',\n                        pointerEvents: hasIncompleteTasks ? 'all' : 'none',\n                    }}\n                    tasks={incompleteTasks}\n                    to={TIMELINE_TO}\n                />\n                <TaskDetails\n                    appActions={appActions}\n                    appData={appData}\n                    task={activeTask}\n                    isCreatingTask={isCreatingTask}\n                    style={{\n                        width: '40vw',\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                    }}\n                />\n                <Backlog\n                    appActions={appActions}\n                    appData={appData}\n                    selectedTaskId={selectedTaskId}\n                    style={{\n                        width: '30vw',\n                    }}\n                    tasks={incompleteTasks}\n                />\n            </FlexBox>\n        </ThemeProvider>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}