{"version":3,"sources":["components/atoms/tokens.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","hooks/useDrop.js","utils/minutesToHeight.js","components/atoms/Button.js","components/OptionBar.js","components/TaskCard.js","hooks/useDrag.js","components/Backlog.js","components/CompletedTasksDropZone.js","components/EditInPlace.js","components/TaskDetails.js","utils/strToHoursAndMinutes.js","utils/toInt.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/atoms/GlobalStyles.js","hooks/usePersistentState.js","index.js"],"names":["DURATION_OPTIONS","INITIAL_TASKS","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","DARK","HIGH_CONTRAST_BACKGROUND","PRIMARY","HIGH_CONTRAST_TEXT","BACKGROUND","BORDER_HOVER","setLightness","BORDER_IDLE","SHADED","lighten","TEXT","TEXT_FADED","BORDER_NEUTRAL","LIGHT","rgba","COLORS","styled","div","_ref","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","concat","name","Box","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","Container","FlexBox","attrs","ContentContainer","_ref2","ColumnHeader","_ref3","AppColumn","_ref4","children","label","otherProps","Object","objectWithoutProperties","react_default","a","createElement","useDrop","type","callback","_useState","useState","_useState2","slicedToArray","isTargetedForDrop","setIsTargetedForDrop","droppable","onDragEnter","evt","preventDefault","onDragOver","onDragLeave","onDrop","payload","dataTransfer","getData","isNaN","parseFloat","minutesToHeight","minutes","Button","as","GhostButton","OptionButton","isSelected","OptionBar","options","_ref3$renderOption","renderOption","option","_ref3$renderSelectedO","renderSelectedOption","selectedOption","onChange","OptionBar_Container","map","key","onClick","duration","isActive","isDragging","isDraggingOver","Label","TaskCard","appActions","task","onSelectTask","icon","id","scheduled_minutes","_useDrag","setIsDragging","_useState3","_useState4","setIsDraggingOver","draggable","onDragEnd","onDragStart","setData","useDrag","dragProps","TaskCard_Container","assign","style","maxHeight","overflow","CreateFirstTaskTip","_templateObject","Backlog","appData","selectedTaskId","tasks","onClickTask","onChangeTheme","onUpdateTask","onUpdateTasks","_useDrop","taskId","scheduled","dropProps","incompleteTasks","filter","Backlog_Container","components_OptionBar","toLowerCase","position","bottom","left","right","top","width","length","role","aria-label","height","newTaskId","Date","now","currentHour","getHours","currentMinute","getMinutes","[object Object]","isComplete","notes","scheduled_time","components_TaskCard","pulsingAnimation","keyframes","CompletedTasksDropZone_templateObject","css","_templateObject2","transparentize","CompletedTaskDropZone","currentSelectedTaskId","CompletedTasksDropZone_Container","isEditing","isEmpty","EditInPlace","_ref2$isMultiLine","isMultiLine","_ref2$placeholder","placeholder","_ref2$render","render","value","_ref2$value","_ref2$wrapperStyles","wrapperStyles","_ref2$onSave","onSave","setIsEditing","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","inputRef","useRef","measuringElementRef","trim","useEffect","current","select","focus","el","offsetHeight","EditInPlace_Container","Fragment","ref","pointerEvents","opacity","outline","whiteSpace","disabled","rows","display","onBlur","target","onKeyDown","metaKey","shiftKey","isLoading","ANIMATION_DURATION","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","TaskDetails_templateObject2","TaskDetails","_ref3$task","setIsLoading","handleUpdateTask","field","useLayoutEffect","newTimer","setTimeout","clearTimeout","TaskDetails_Container","newDuration","components_EditInPlace","newLabel","newNotes","rawNotes","className","dangerouslySetInnerHTML","__html","marked","strToHoursAndMinutes","str","split","val","parseInt","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","Math","floor","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","TimelineDropZone_TimelineDropTarget","Timeline_templateObject","TimelineContainer","Timeline_templateObject2","HalfHourRow","_templateObject3","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","offsetMinutes","CurrentTimeMarker","Timeline","from","to","currentTime","setCurrentTime","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","createGlobalStyle","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","setTasks","_usePersistentState3","_usePersistentState4","themeName","setThemeName","_usePersistentState5","_usePersistentState6","setSelectedTaskId","activeTask","values","hasIncompleteTasks","handleDragEnd","arguments","undefined","updates","prevState","objectSpread2","styled_components_browser_esm","GlobalStyles","CompletedTasksDropZone","components_Timeline","components_TaskDetails","rootElement","document","getElementById","ReactDOM"],"mappings":"6NAMaA,EAAmB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,KAGxCC,EAAgB,GAEhBC,EAAgB,OAChBC,EAAc,QACdC,EAAqB,oCAErBC,EACI,iBAKXC,EAAO,CACbA,QAHgB,UAIhBA,WAAkB,WAClBA,EAAKC,yBAA2BD,EAAKE,QACrCF,EAAKG,mBAAqBH,EAAKI,WAC/BJ,EAAKK,aAAeC,YAAa,GAPjB,WAQhBN,EAAKO,YAAcD,YAAa,GARhB,WAShBN,EAAKQ,OAASC,YAAQ,GAAKT,EAAKI,YAChCJ,EAAKU,KAAOJ,YAAa,IAAMN,EAAKE,SACpCF,EAAKW,WAAaL,YAAa,GAAKN,EAAKU,MACzCV,EAAKY,eAAiBN,YAAa,IAAMN,EAAKU,MAE9C,IAAMG,EAAQ,CACdA,QAfgB,UAgBhBA,WAAmB,SACnBA,EAAMZ,yBAA2BY,EAAMX,QACvCW,EAAMV,mBAAqBU,EAAMT,WACjCS,EAAMR,aAAeS,YAAK,UAAW,IACrCD,EAAMN,YAAcO,YAAK,UAAW,IACpCD,EAAMD,eAAiBN,YAAa,IAAMO,EAAMT,YAChDS,EAAML,OAASF,YAAa,IAAMO,EAAMX,SACxCW,EAAMH,KAAOJ,YAAa,IAAMO,EAAMX,SACtCW,EAAMF,WAAaE,EAAMD,eAElB,IAAMG,EAAS,CAClBf,OACAa,SC5CWG,MAAOC,IAClB,SAAAC,GAAA,IAAAC,EAAAD,EACIE,cADJ,IAAAD,KAAAE,EAAAH,EAEII,kBAFJ,IAAAD,KAAAE,EAAAL,EAGIM,cAHJ,IAAAD,EAGa,EAHbA,EAAAE,EAAAP,EAIIQ,eAJJ,IAAAD,EAIc,EAJdA,EAAAE,EAAAT,EAKIU,eALJ,IAAAD,EAKc,EALdA,EAAAE,EAAAX,EAMIY,eANJ,IAAAD,EAMc,EANdA,EAAAE,EAAAb,EAOIc,gBAPJ,IAAAD,EAOe,EAPfA,EAAAE,EAAAf,EAQIgB,gBARJ,IAAAD,EAQe,EARfA,EASIE,EATJjB,EASIiB,MATJ,+BAAAC,OAYQhB,EAAM,aAAAgB,OAAgBrB,EAAOoB,EAAME,MAAMzB,gBAAmB,OAZpE,0BAAAwB,OAciBd,EAAa,EAAI,EAdlC,4BAAAc,OAemBd,EAAa,EAAI,EAfpC,eAAAc,OAiBQV,EAAO,2CAAAU,OAEqBV,EAFrB,OAAAU,ODdM,OCcN,+CAAAA,OAGsBV,EAHtB,OAAAU,ODdM,OCcN,wBAKD,GAtBd,cAAAA,OAyBQR,EAAO,0CAAAQ,OAEoBR,EAFpB,OAAAQ,ODtBM,OCsBN,gDAAAA,OAGuBR,EAHvB,OAAAQ,ODtBM,OCsBN,wBAKD,GA9Bd,cAAAA,OAiCQZ,EAAM,sCAAAY,OAEiBZ,EAFjB,OAAAY,OD9BO,OC8BP,wBAIA,GArCd,cAAAA,OAwCQJ,EAAQ,4CAAAI,OAEqBJ,EAFrB,OAAAI,ODrCK,OCqCL,gDAAAA,OAGsBJ,EAHtB,OAAAI,ODrCK,OCqCL,wBAKF,GA7Cd,cAAAA,OAgDQF,EAAQ,2CAAAE,OAEoBF,EAFpB,OAAAE,OD7CK,OC6CL,iDAAAA,OAGuBF,EAHvB,OAAAE,OD7CK,OC6CL,wBAKF,GArDd,cAAAA,OAwDQN,EAAO,uCAAAM,OAEiBN,EAFjB,OAAAM,ODrDM,OCqDN,wBAID,GA5Dd,YCAWpB,cAAOsB,EAAPtB,CACX,SAAAE,GAAA,IAAAqB,EAAArB,EACIsB,aADJ,IAAAD,EACY,SADZA,EAAAE,EAAAvB,EAEIwB,iBAFJ,IAAAD,EAEgB,MAFhBA,EAAApB,EAAAH,EAGII,kBAHJ,IAAAD,KAAAsB,EAAAzB,EAII0B,eAJJ,IAAAD,EAIc,UAJdA,EAAAE,EAAA3B,EAKI4B,eALJ,IAAAD,EAKc,EALdA,EAAA,gCAAAT,OAOmBI,EAPnB,uDAAAJ,OASsBM,EATtB,0BAAAN,OAUiBd,EAAa,EAAI,EAVlC,4BAAAc,OAWmBd,EAAa,EAAI,EAXpC,gCAAAc,OAYuBQ,EAZvB,+CAAAR,OAgBQU,EAAO,qEAAAV,OAIuB,QAAdM,EAAsB,OAAS,MAJxC,WAAAN,OAKeU,EALf,OAAAV,OFdM,OEcN,+CAQD,GAxBd,YCCEW,EAAY/B,YAAOgC,GAASC,MAAM,CACpCP,UAAW,SACXpB,YAAY,GAFEN,CAId,SAAAE,KAAGiB,MAAH,2BAKEe,EAAmBlC,YAAOgC,GAASC,MAAM,CAC3CP,UAAW,UADU1B,CAGrB,SAAAmC,KAAGhB,MAAH,wCAAAC,OHXqB,OGWrB,4IAWEgB,EAAepC,YAAOgC,GAASC,MAAM,CACvCL,QAAS,SACTZ,SAAU,IAFOhB,CAIjB,SAAAqC,GAAA,IAAGlB,EAAHkB,EAAGlB,MAAH,+BAAAC,OACkBrB,EAAOoB,EAAME,MAAMjC,WADrC,sBAAAgC,OAEarB,EAAOoB,EAAME,MAAM1B,WAFhC,wCAAAyB,OAG+BrB,EAAOoB,EAAME,MAAMzB,eAHlD,oDAAAwB,OH1BqB,OG0BrB,oHAoBWkB,EAPG,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,MAAUC,EAAvBC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,6BACdM,EAAAC,EAAAC,cAAChB,EAAD,KACIc,EAAAC,EAAAC,cAACX,EAAD,KAAeK,GACfI,EAAAC,EAAAC,cAACb,EAAqBQ,EAAaF,YC/C5BQ,EAAA,SAACC,EAAMC,GAAa,IAAAC,EACmBC,oBAAS,GAD5BC,EAAAV,OAAAW,EAAA,EAAAX,CAAAQ,EAAA,GACxBI,EADwBF,EAAA,GACLG,EADKH,EAAA,GAiC/B,MAAO,CATW,CACdE,oBACAE,WAAW,EACXC,YAxBgB,SAAAC,GAChBA,EAAIC,iBACJJ,GAAqB,IAuBrBK,WApBe,SAAAF,GACfA,EAAIC,kBAoBJE,YAjBgB,WAChBN,GAAqB,IAiBrBO,OAdW,SAAAJ,GACX,IAAMK,EAAUL,EAAIM,aAAaC,QAAQjB,GACrCe,GACAd,EAASiB,MAAMH,GAAWA,EAAUI,WAAWJ,IAEnDR,GAAqB,OCjBda,EAAA,SAAAC,GAAO,sCAAAlD,OLCG,OKDH,SAAAA,OLEU,EKFV,aAAAA,OAE0CkD,EAF1C,eAAAlD,OLCG,OKDH,WAAAA,OAGakD,EAHb,mBCFhBC,EAASvE,YAAOgC,GAASC,MAAM,CACjCuC,GAAI,SACJ5C,QAAS,SACTZ,SAAU,GACVE,SAAU,KAJClB,CAMX,SAAAE,GAAA,IAAGiB,EAAHjB,EAAGiB,MAAH,+BAAAC,OACkBrB,EAAOoB,EAAME,MAAMnC,QADrC,8BAAAkC,ONRyB,MMQzB,sBAAAA,OAGarB,EAAOoB,EAAME,MAAM3B,KAHhC,uEAAA0B,OAMMtC,EANN,sNAmBS2F,EAAczE,YAAOuE,EAAPvE,CACvB,SAAAmC,GAAA,IAAGhB,EAAHgB,EAAGhB,MAAH,+DAAAC,ON5ByB,MM4BzB,kCAAAA,OAGyBrB,EAAOoB,EAAME,MAAM9B,YAH5C,sGAAA6B,OAQwBrB,EAAOoB,EAAME,MAAMhC,aAR3C,wBAaWkF,ICrCTxC,EAAY/B,YAAOgC,GAASC,MAAM,CACpCL,QAAS,gBACTZ,SAAU,EACVE,SAAU,IACVY,QAAS,IAJK9B,CAMd,SAAAE,GAAA,IAAGiB,EAAHjB,EAAGiB,MAAH,qCAAAC,OACwBrB,EAAOoB,EAAME,MAAMjC,WAD3C,sBAAAgC,OAEarB,EAAOoB,EAAME,MAAM1B,WAFhC,mGAAAyB,OAOiBrB,EAAOoB,EAAME,MAAM3B,KAPpC,wBAYEgF,EAAe1E,YAAOuE,EAAPvE,CACjB,SAAAmC,GAAA,IAAGwC,EAAHxC,EAAGwC,WAAHxC,EAAehB,MAAf,2FAAAC,OAGmBuD,EAAa,IAAM,IAHtC,wBAAAvD,OAIeuD,EAAa,EAAI,EAJhC,qCAAAvD,OAMMtC,EANN,yBAAAsC,OAQMW,EARN,4DAyCW6C,EA3BG,SAAAvC,GAAA,IACdwC,EADcxC,EACdwC,QADcC,EAAAzC,EAEd0C,oBAFc,IAAAD,EAEC,SAAAE,GAAM,OAAIA,GAFXF,EAAAG,EAAA5C,EAGd6C,4BAHc,IAAAD,EAGS,SAAAD,GAAM,OAAIA,GAHnBC,EAIdE,EAJc9C,EAId8C,eACAC,EALc/C,EAKd+C,SACG1C,EANWC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,sFAQdQ,EAAAC,EAAAC,cAACsC,EAAc3C,EACVmC,EAAQS,IAAI,SAAAN,GACT,IAAML,EAAaK,IAAWG,EAE9B,OACItC,EAAAC,EAAAC,cAAC2B,EAAD,CACIa,IAAKP,EACLL,WAAYA,EACZa,QAAS,kBAAMJ,EAASJ,KAEvBL,EACKO,EAAqBH,EAAaC,IAClCD,EAAaC,QC7CjCjD,EAAY/B,YAAOgC,GAASC,MAAM,CACpCT,MAAO,cADOxB,CAGd,SAAAE,GAAA,IAAGuF,EAAHvF,EAAGuF,SAAUC,EAAbxF,EAAawF,SAAUC,EAAvBzF,EAAuByF,WAAYC,EAAnC1F,EAAmC0F,eAAgBzE,EAAnDjB,EAAmDiB,MAAnD,qCAAAC,OACwBrB,EAAOoB,EAAME,MAAMjC,WAD3C,8BAAAgC,ORfyB,MQezB,uCAAAA,OAIQrB,EAAOoB,EAAME,MAAMqE,EAAW,UAAY,gBAJlD,iDAAAtE,OAOciD,EAAgBoB,GAP9B,2BAAArE,OAQkBiD,EAAgB,IARlC,wBAAAjD,OASeuE,EAAa,GAAM,EATlC,+BAAAvE,ORVqB,OQUrB,8BAAAA,ORVqB,OQUrB,WAAAA,OALsB,MAKtB,gCAAAA,OAYsBwE,EAAiB,OAAS,OAZhD,uHAAAxE,OAgBesE,EAAW,GAAK,UAhB/B,eAAAtE,OAiBMtC,EAjBN,2DAAAsC,OAoB4BrB,EAAOoB,EAAME,MAAMnC,QApB/C,8CAAAkC,ORfyB,MQezB,2CAAAA,ORfyB,MQezB,wGAAAA,OA0BmBsE,EAAW,EAAI,GA1BlC,kFAAAtE,OALsB,MAKtB,mBAAAA,OA8BUtC,EA9BV,iFAAAsC,OAkCgCrB,EAAOoB,EAAME,MAAMhC,aAlCnD,iFAAA+B,OAsCgCrB,EAAOoB,EAAME,MAAMnC,QAtCnD,kFAAAkC,OA0CgCrB,EAAOoB,EAAME,MAAMnC,QA1CnD,8BA+CE2G,EAAQ7F,YAAOgC,GAASC,MAAM,CAChCH,QAAS,IADC9B,CAGV,SAAAmC,GAAA,IAAGuD,EAAHvD,EAAGuD,SAAUvE,EAAbgB,EAAahB,MAAb,wDAAAC,OAEarB,EAAOoB,EAAME,MAAMqE,EAAW,OAAS,cAFpD,mHAAAtE,OAMkBiD,EAAgB,IANlC,eAAAjD,OAOMtC,EAPN,yBAAAsC,OASMW,EATN,qCAAAX,OAUiBrB,EAAOoB,EAAME,MAAM3B,KAVpC,wBA6CWoG,EA9BE,SAAAzD,GAAmD,IAAhD0D,EAAgD1D,EAAhD0D,WAAYL,EAAoCrD,EAApCqD,SAAUM,EAA0B3D,EAA1B2D,KAAStD,EAAiBC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,kCACxD4D,EAAiBF,EAAjBE,aACAC,EAAuCF,EAAvCE,KAAMC,EAAiCH,EAAjCG,GAAI1D,EAA6BuD,EAA7BvD,MAAO2D,EAAsBJ,EAAtBI,kBAFuCC,EChFrD,SAACpD,EAAMe,GAAY,IAAAb,EACMC,oBAAS,GADfC,EAAAV,OAAAW,EAAA,EAAAX,CAAAQ,EAAA,GACvBwC,EADuBtC,EAAA,GACXiD,EADWjD,EAAA,GAAAkD,EAEcnD,oBAAS,GAFvBoD,EAAA7D,OAAAW,EAAA,EAAAX,CAAA4D,EAAA,GAEvBX,EAFuBY,EAAA,GAEPC,EAFOD,EAAA,GA4B9B,MAAO,CAVW,CACdE,WAAW,EACXf,aACAC,iBACAe,UAbc,WACdL,GAAc,GACdG,GAAkB,IAYlB/C,YATgB,kBAAM+C,GAAkB,IAUxC3C,YARgB,kBAAM2C,GAAkB,IASxCG,YArBgB,SAAAjD,GAChBA,EAAIM,aAAa4C,QAAQ5D,EAAMe,GAC/BsC,GAAc,MD6EEQ,CAAQ,UAAWX,GAAhCY,EAHyDpE,OAAAW,EAAA,EAAAX,CAAA0D,EAAA,MAOhE,OACIxD,EAAAC,EAAAC,cAACiE,EAADrE,OAAAsE,OAAA,CACIxB,SAAUW,EACVV,SAAUA,EACVF,QANY,kBAAMS,EAAaE,KAO3BY,EACArE,GAEJG,EAAAC,EAAAC,cAAC8C,EAAD,CAAOH,SAAUA,GACb7C,EAAAC,EAAAC,cAAA,OACImE,MAAO,CACHC,UAAW,OACXC,SAAU,SAGb3E,GAELI,EAAAC,EAAAC,cAAA,YAAOmD,kNE9FvB,IAAMnE,EAAY/B,YAAOsC,GAAWL,MAAM,CACtCQ,MAAO,WADOzC,CAGd,SAAAE,GAAA,IAAGqD,EAAHrD,EAAGqD,kBAAmBpC,EAAtBjB,EAAsBiB,MAAtB,qCAAAC,OACwBrB,EAAOoB,EAAME,MAAM7B,OAD3C,2BAAA4B,OAGQmC,EAAiB,aAAAnC,OACErB,EAAOoB,EAAME,MAAMhC,aADrB,UAEX,UALd,oCAWEgI,EAAqBrH,YAAOsB,EAAPtB,CAAHsH,IVnBC,QU2BVC,EAAA,SAAApF,GAOT,IANF4D,EAME5D,EANF4D,WACAyB,EAKErF,EALFqF,QACAC,EAIEtF,EAJFsF,eACAC,EAGEvF,EAHFuF,MAEGhF,GACDP,EAFFwF,YAEEhF,OAAAC,EAAA,EAAAD,CAAAR,EAAA,kEAEEyF,EAIA7B,EAJA6B,cACA3B,EAGAF,EAHAE,aACA4B,EAEA9B,EAFA8B,aACAC,EACA/B,EADA+B,cAEI3G,EAAUqG,EAAVrG,MAPN4G,EAQkB/E,EAAQ,UAAW,SAAAgF,GAAM,OACzCH,EAAaG,EAAQ,CACjBC,WAAW,MAFZC,EARLvF,OAAAW,EAAA,EAAAX,CAAAoF,EAAA,MAaII,EAAkBT,EAAMU,OAAO,SAAApC,GAAI,OAAKA,EAAKiC,YAuBnD,OACIpF,EAAAC,EAAAC,cAACsF,EAAD1F,OAAAsE,OAAA,GAAeiB,EAAexF,GAC1BG,EAAAC,EAAAC,cAACuF,EAAD,CACIzD,QAAS,CAAC,OAAQ,SAClBE,aAAc,SAAAC,GAAM,OAAIA,EAAOuD,eAC/BrD,qBAAsB,SAAAF,GAAM,SAAA5D,OAAO4D,EAAP,UAC5BG,eAAgBhE,EAChBiE,SAAUwC,IAEd/E,EAAAC,EAAAC,cAACzB,EAAD,CACIhB,YAAU,EACV4G,MAAO,CACHsB,SAAU,aAGd3F,EAAAC,EAAAC,cAACf,EAAD,CACIJ,QAAQ,aACRF,UAAU,SACVI,QAAS,EACThB,QAAS,EACToG,MAAO,CACHuB,OAAQ,EACRC,KAAM,EACNtB,SAAU,OACVoB,SAAU,WACVG,MAAO,EACPC,IAAK,IAGT/F,EAAAC,EAAAC,cAAA,OAAKmE,MAAO,CAAEsB,SAAU,WAAYK,MAAO,SACrB,IAAjBnB,EAAMoB,QACHjG,EAAAC,EAAAC,cAACsE,EAAD,KACIxE,EAAAC,EAAAC,cAAA,QACIgG,KAAK,MACLC,aAAW,sBAFf,gBAKQ,IANZ,0BAUJnG,EAAAC,EAAAC,cAAC0B,EAAD,CACIyC,MAAO,CACH+B,OAAQ5E,EAAgB,KAE5BmB,QAlEG,WACvB,IAAM0D,EAAYC,KAAKC,MACjBA,EAAM,IAAID,KACVE,EAAcD,EAAIE,WAClBC,EAAgBH,EAAII,aAE1B1B,EAAc,CACV2B,CAACP,GAAY,CACThD,KV5DiB,eU6DjBC,GAAI+C,EACJQ,YAAY,EACZjH,MAAO,WACPkH,MAAO,GACP1B,WAAW,EACX7B,kBAAmB,GACnBwD,eAAc,GAAAxI,OAAKiI,EAAL,KAAAjI,OAAoBmI,MAG1CtD,EAAaiD,KA4CG,aASHf,EAAgB7C,IAAI,SAAAU,GAAI,OACrBnD,EAAAC,EAAAC,cAAC8G,EAAD,CACItE,IAAKS,EAAKG,GACVJ,WAAYA,EACZL,SAAU+B,IAAmBzB,EAAKG,GAClCH,KAAMA,sqCC9HlC,IAEM8D,EAAmB,SAAA5J,GAAA,IAAGiB,EAAHjB,EAAGiB,MAAH,OAAe4I,YAAdC,IAEIjK,EAAOoB,EAAME,MAAMnC,QAIhBa,EAAOoB,EAAME,MAAMnC,UAK9C6C,EAAY/B,IAAOC,IACrB,SAAAkC,GAAA,IAAGwD,EAAHxD,EAAGwD,WAAYpC,EAAfpB,EAAeoB,kBAAmBpC,EAAlCgB,EAAkChB,MAAlC,OAA8C8I,YAA9CC,IAIsB3G,EAAoBuG,EAAmB,QAE3CK,YACV5G,EAAoB,EAAIoC,EAAa,IAAO,GAC5C5F,EAAOoB,EAAME,MAAMnC,SAtBN,qBA2BCyG,EAAa,MAAQ,OA3BtB,OA8BEA,EAAa,GAAM,IA9BrB,OAiCf7G,EXlCmB,eWCJ,iBAkEVsL,EAhBe,SAAA/H,GAA+C,IAA5C0D,EAA4C1D,EAA5C0D,WAAYJ,EAAgCtD,EAAhCsD,WAAejD,EAAiBC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,6BACjE4D,EAA+BF,EAA/BE,aAAc4B,EAAiB9B,EAAjB8B,aADmDE,EAErD/E,EAAQ,UAAW,SAAAgF,GACnCH,EAAaG,EAAQ,CACjB0B,YAAY,IAEhBzD,EAAa,SAAAoE,GACT,OAAOA,IAA0BrC,EAC3B,KACAqC,MAPPnC,EAFkEvF,OAAAW,EAAA,EAAAX,CAAAoF,EAAA,MAazE,OAAOlF,EAAAC,EAAAC,cAACuH,EAAD3H,OAAAsE,OAAA,CAAWtB,WAAYA,GAAgBuC,EAAexF,sBC3D3DX,EAAY/B,YAAOsB,GAAKW,MAAM,CAChC3B,YAAY,GADEN,CAGd,SAAAE,GAAA,IAAGqK,EAAHrK,EAAGqK,UAAWC,EAAdtK,EAAcsK,QAASrJ,EAAvBjB,EAAuBiB,MAAvB,2BAAAC,OACcmJ,EAAY,OAAS,UADnC,qDAAAnJ,OAGeoJ,EAAU,GAAM,EAH/B,4BAAApJ,OAImBmJ,EAAY,OAAS,OAJxC,yIAAAnJ,OAU6BrB,EAAOoB,EAAME,MAAMhC,aAVhD,kCAAA+B,OZXyB,MYWzB,sDAAAA,OAamBmJ,EAAY,EAAI,EAbnC,iGAAAnJ,OZNqB,OYMrB,2CAAAA,OZNqB,OYMrB,4CAAAA,OZNqB,OYMrB,0CAAAA,OZNqB,OYMrB,+BAAAA,OAoBUtC,EApBV,oIA+IW2L,EAhHK,SAAAtI,GAQd,IAAAuI,EAAAvI,EAPFwI,mBAOE,IAAAD,KAAAE,EAAAzI,EANF0I,mBAME,IAAAD,EANY,QAMZA,EAAAE,EAAA3I,EALF4I,cAKE,IAAAD,EALO,SAAAE,GAAK,OAAIA,GAKhBF,EAAAG,EAAA9I,EAJF6I,aAIE,IAAAC,EAJM,GAINA,EAAAC,EAAA/I,EAHFgJ,qBAGE,IAAAD,EAHc,GAGdA,EAAAE,EAAAjJ,EAFFkJ,cAEE,IAAAD,EAFO,aAEPA,EADC1I,EACDC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,yEAAAgB,EACgCC,oBAAS,GADzCC,EAAAV,OAAAW,EAAA,EAAAX,CAAAQ,EAAA,GACKoH,EADLlH,EAAA,GACgBiI,EADhBjI,EAAA,GAAAkD,EAEwCnD,mBAAS4H,GAFjDxE,EAAA7D,OAAAW,EAAA,EAAAX,CAAA4D,EAAA,GAEKgF,EAFL/E,EAAA,GAEoBgF,EAFpBhF,EAAA,GAAAiF,EAG0DrI,mBAAS,MAHnEsI,EAAA/I,OAAAW,EAAA,EAAAX,CAAA8I,EAAA,GAGKE,EAHLD,EAAA,GAG6BE,EAH7BF,EAAA,GAIIG,EAAWC,iBAAO,MAClBC,EAAsBD,iBAAO,MAC7BtB,EAA2B,KAAjBQ,EAAMgB,OAEtBC,oBAAU,WACNT,EAAiBR,IAClB,CAACA,IAEJiB,oBAAU,WACF1B,GAAasB,EAASK,UACtBL,EAASK,QAAQC,SACjBN,EAASK,QAAQE,UAEtB,CAACP,EAAUtB,IAEd0B,oBAAU,WACN,IAAMI,EAAKN,EAAoBG,QAC3BG,GACAT,EAA0BS,EAAGC,eAElC,CAACf,EAAehB,EAAWwB,IAkC9B,OACIlJ,EAAAC,EAAAC,cAACwJ,EAAD5J,OAAAsE,OAAA,CACIsD,UAAWA,EACXC,QAASA,EACThF,QApCY,WAChBgG,EAAiBR,GACjBM,GAAa,KAmCL5I,GAEJG,EAAAC,EAAAC,cAACzB,EAAD,CAAK4F,MAAOiE,GACPZ,EACG1H,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0J,SAAA,KACI3J,EAAAC,EAAAC,cAAA,OACI0J,IAAKV,EACL7E,MAAO,CACHsB,SAAU,WACVkE,cAAe,OACfC,QAAS,EACTC,QAAS,iBACTC,WAAY,WACZhE,MAAO,SAGV0C,EAXL,KAaA1I,EAAAC,EAAAC,cAAA,YACI+J,UAAWvC,EACXkC,IAAKZ,EACLkB,KAAM,EACN7F,MAAO,CACH8F,QAAS,QACT/D,OAAM,GAAA7H,OAAKuK,EAAL,MACN9C,MAAO,QAEXmC,MAAOO,EACP0B,OA5DL,WACf5B,EAAOE,GACPD,GAAa,IA2DOlG,SAxDH,SAAAzB,GACjB6H,EAAiB7H,EAAIuJ,OAAOlC,QAwDRmC,UArDF,SAAAxJ,GAClB,MAAgB,WAAZA,EAAI4B,KACJiG,EAAiBR,QACjBM,GAAa,IAGD,UAAZ3H,EAAI4B,OACA5B,EAAIyJ,SAAWzJ,EAAI0J,WAAa1C,KAChCU,EAAOE,GACPD,GAAa,IAEZX,QALT,GAMQhH,EAAIC,kBACG,OA4CHmH,EAAOP,EAAUK,EAAcG,8RCtInD,IAEMjJ,GAAY/B,YAAOsC,EAAPtC,CACd,SAAAE,GAAA,IAAGoN,EAAHpN,EAAGoN,UAAWnM,EAAdjB,EAAciB,MAAd,8FAAAC,OAE6BrB,EAAOoB,EAAME,MAAMzB,eAFhD,uCAAAwB,OAG8BrB,EAAOoB,EAAME,MAAMzB,eAHjD,+IAAAwB,OAS4BrB,EAAOoB,EAAME,MAAMjC,WAT/C,oGAAAgC,OAamBkM,EAAY,EAAI,EAbnC,uJAAAlM,OAkB8BmM,GAlB9B,+DAwBEC,GAAaxN,YAAOgC,GAASC,MAAM,CACrCuC,GAAI,KACJhD,MAAO,aACPM,QAAS,IACTd,SAAU,EACVE,SAAU,KALKlB,CAOf,SAAAmC,GAAA,IAAGhB,EAAHgB,EAAGhB,MAAH,qCAAAC,OACwBrB,EAAOoB,EAAME,MAAM7B,OAD3C,iGAQEiO,GAAkBzN,YAAOsB,GAAKW,MAAM,CACtC8G,KAAM,SADc/I,CAAH0N,MAOfC,GAAiB3N,YAAOsB,GAAKW,MAAM,CACrC8G,KAAM,OADa/I,CAAH4N,MA6FLC,GApFK,SAAAxL,GAA8C,IAA3C0D,EAA2C1D,EAA3C0D,WAA2C+H,EAAAzL,EAA/B2D,YAA+B,IAAA8H,EAAxB,GAAwBA,EAAjBpL,EAAiBC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,uBAAAc,EAC5BC,oBAAS,GADmBC,EAAAV,OAAAW,EAAA,EAAAX,CAAAQ,EAAA,GACvDmK,EADuDjK,EAAA,GAC5C0K,EAD4C1K,EAAA,GAEtDwE,EAAiB9B,EAAjB8B,aACA3B,EAA8CF,EAA9CE,KAAMC,EAAwCH,EAAxCG,GAAI1D,EAAoCuD,EAApCvD,MAAOkH,EAA6B3D,EAA7B2D,MAAOvD,EAAsBJ,EAAtBI,kBAC1BoE,GAAWxE,EAAKG,GAChB6H,EAAmB,SAACC,EAAOjD,GAAR,OACrBnD,EAAa1B,EAAI,CAAEsD,CAACwE,GAAQjD,KAgBhC,OATAkD,0BAAgB,WACZH,GAAa,GACb,IAAMI,EAAWC,WACb,kBAAML,GAAa,IACnBR,KAEJ,OAAO,kBAAMc,aAAaF,KAC3B,CAACnI,EAAKG,KAGLtD,EAAAC,EAAAC,cAACuL,GAAD3L,OAAAsE,OAAA,CACIqG,UAAWA,EACX7K,MAAM,yBACFC,IAEF8H,IAAY8C,GACVzK,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0J,SAAA,KACI3J,EAAAC,EAAAC,cAACuF,EAAD,CACIpD,qBAAsB,SAAAF,GAAM,SAAA5D,OAAO4D,EAAP,UAC5BG,eAAgBiB,EAChBvB,QAASnG,EACT0G,SA3BO,SAAAmJ,GAAW,OAClCP,EAAiB,oBAAqBO,MA6B1B1L,EAAAC,EAAAC,cAACyK,GAAD,KACI3K,EAAAC,EAAAC,cAAC0K,GAAD,KACI5K,EAAAC,EAAAC,cAACyL,EAAD,CACI3D,YAAY,WACZG,MAAOvI,EACP4I,OAhCJ,SAAAoD,GAAQ,OAAIT,EAAiB,QAASS,OAmC1C5L,EAAAC,EAAAC,cAAC4K,GAAD,KACI9K,EAAAC,EAAAC,cAACyL,EAAD,CACI3D,YbpHC,eaqHDG,MAAO9E,EACPmF,OAxCL,SAAAqD,GAAQ,OAAIV,EAAiB,OAAQU,QA6C5C7L,EAAAC,EAAAC,cAACyL,EAAD,CACIlO,YAAU,EACVqK,aAAW,EACXnK,OAAQ,EACRqK,YAAa9L,EACbgM,OAAQ,SAAA4D,GAAQ,OACZ9L,EAAAC,EAAAC,cAAA,OACI6L,UAAU,WACVC,wBAAyB,CACrBC,OAAQC,IAAOJ,OAI3BxD,cAAe,CACX1C,OAAQ,EACRC,KAAM,EACNtB,SAAU,OACVoB,SAAU,WACVG,MAAO,EACPC,IAAK,GAEToC,MAAOrB,EACP0B,OAjEI,SAAAqD,GAAQ,OAAIV,EAAiB,QAASU,4BClFnDM,GAAA,SAAAC,GAAG,OAAKA,EAAMA,EAAIC,MAAM,KAAK5J,IAAI,SAAA6J,GAAG,OCF7BC,SDEuCD,ECFzB,MDEiC,CAAC,EAAG,sKEOzE,IAAMpN,GAAY/B,IAAOC,IAAVoP,MAQTC,GAA2BtP,IAAOC,IACpC,SAAAC,GAAA,IAAGqD,EAAHrD,EAAGqD,kBAAmBpC,EAAtBjB,EAAsBiB,MAAtB,8EAAAC,OAGciD,EAAgB,IAH9B,gDAAAjD,OAMQmC,EAAiB,cAAAnC,OAAiBrB,EAAOoB,EAAME,MAAMnC,SAAY,GANzE,aAWEqQ,GAAqB,SAAApN,GAIrB,ICjCSmC,ED8BXyB,EAGE5D,EAHF4D,WACAyJ,EAEErN,EAFFqN,iBACG9M,EACDC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,mCACM0F,EAAiB9B,EAAjB8B,aADN4H,EAE+BT,GAAqBpQ,GAFpD8Q,EAAA/M,OAAAW,EAAA,EAAAX,CAAA8M,EAAA,GAEKE,EAFLD,EAAA,GAEgBE,EAFhBF,EAAA,GAKIG,GCtCKvL,EDqCK,GAAZqL,EAAiBC,EAAiC,GAAnBJ,ECrCjB,GAAApO,OAAO0O,KAAKC,MAAMzL,EAAU,IAA5B,KAAAlD,OAAmCkD,EAAU,KDiC7DyD,EAMkB/E,EAAQ,UAAW,SAAAgF,GAAM,OACzCH,EAAaG,EAAQ,CACjBC,WAAW,EACX2B,eAAgBiG,MAHjB3H,EANLvF,OAAAW,EAAA,EAAAX,CAAAoF,EAAA,MAaF,OAAOlF,EAAAC,EAAAC,cAACuM,GAAD3M,OAAAsE,OAAA,GAA8BiB,EAAexF,KAiBzCsN,GAdU,SAAA3N,GAAiD,IAA9C0D,EAA8C1D,EAA9C0D,WAAYkK,EAAkC5N,EAAlC4N,aAAiBvN,EAAiBC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,+BACtE,OACIQ,EAAAC,EAAAC,cAACmN,GAAcxN,EACVyN,KAAMF,EAAe,IAAI3K,IAAI,SAAAkK,GAAgB,OAC1C3M,EAAAC,EAAAC,cAACqN,GAAD,CACI7K,IAAKiK,EACLzJ,WAAYA,EACZyJ,iBAAkBA,4YE7CtC,IAEMzN,GAAY/B,YAAOsC,GAAWL,MAAM,CACtCQ,MAAO,gBADOzC,CAAHqQ,MAITC,GAAoBtQ,IAAOC,IAAVsQ,MAUjBC,GAAcxQ,IAAOC,IAAVwQ,KAEHpM,EAAgB,KAGxBqM,GAAgB1Q,IAAOC,IACzB,SAAAC,GAAA,IAAGyQ,EAAHzQ,EAAGyQ,UAAWC,EAAd1Q,EAAc0Q,QAASzP,EAAvBjB,EAAuBiB,MAAvB,0BAAAC,OAEQuP,EACM,cACAxG,YAAeyG,EAAU,EAAI,EAAG7Q,EAAOoB,EAAME,MAAM1B,YAJjE,0CAAAyB,OAtBqB,OAsBrB,QAAAA,OlB1BqB,OkB0BrB,6MAAAA,OAc4B+I,YAChByG,EAAU,GAAM,GAChB7Q,EAAOoB,EAAME,MAAMzB,gBAhB/B,6EAAAwB,OAtBqB,OAsBrB,uGA4BEyP,GAAoB7Q,YAAO8F,EAAP9F,CACtB,SAAAmC,GAAA,IAAG2O,EAAH3O,EAAG2O,cAAH,2DAAA1P,OlBvDqB,OkBuDrB,2BAAAA,OlBvDqB,OkBuDrB,oBAAAA,OAIWiD,EAAgByM,GAJ3B,wDAUEC,GAAoB/Q,IAAOC,IAC7B,SAAAoC,GAAA,IAAGyO,EAAHzO,EAAGyO,cAAH,+KAAA1P,OAOWiD,EAAgByM,GAP3B,mCA4GWE,GAhGE,SAAAzO,GAQX,IAPFwD,EAOExD,EAPFwD,WACA0B,EAMElF,EANFkF,eACAwJ,EAKE1O,EALF0O,KACAvJ,EAIEnF,EAJFmF,MACAwJ,EAGE3O,EAHF2O,GAEGxO,GACDH,EAFFoF,YAEEhF,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,oEAAAY,EACoCC,mBAAS,MAD7CC,EAAAV,OAAAW,EAAA,EAAAX,CAAAQ,EAAA,GACKgO,EADL9N,EAAA,GACkB+N,EADlB/N,EAAA,GAAAoM,EAEmCT,GAAqBmC,GAFxDzB,EAAA/M,OAAAW,EAAA,EAAAX,CAAA8M,EAAA,GAEKpG,EAFLqG,EAAA,GAEkBnG,EAFlBmG,EAAA,GAAA2B,EAG8BrC,GAAqBiC,GAHnDK,EAAA3O,OAAAW,EAAA,EAAAX,CAAA0O,EAAA,GAGKE,EAHLD,EAAA,GAGe1B,EAHf0B,EAAA,GAAA/K,EAI8BnD,oBAAS,GAJvCoD,EAAA7D,OAAAW,EAAA,EAAAX,CAAA4D,EAAA,GAIKiL,EAJLhL,EAAA,GAIeiL,EAJfjL,EAAA,GAKIkL,EAAiBhK,EAAMU,OAAO,SAAApC,GAAI,OAAIA,EAAKiC,YAL/C0J,EAM0B3C,GAAqBkC,GAN/CU,EAAAjP,OAAAW,EAAA,EAAAX,CAAAgP,EAAA,GAMKE,EANLD,EAAA,GAMaE,EANbF,EAAA,GAOIG,EAAaF,EAASN,EACtBtB,EACO,GAAT4B,EAAcC,GAAwB,GAAXP,EAAgB3B,GACzCoC,EAAuBlG,iBAAO,MAC9BmG,EAAuBnG,iBAAO,MA0BpC,OAxBAG,oBAAU,WACN,IAAMiG,EAAa,WACf,IAAM9I,EAAM,IAAID,KAChBiI,EAAc,GAAAhQ,OAAIgI,EAAIE,WAAR,KAAAlI,OAAsBgI,EAAII,eACxCiI,GAAY,IAEhBS,IACA,IAAMC,EAAQC,YAAYF,EAAY,KACtC,OAAO,kBAAMG,cAAcF,KAC5B,IAEHlG,oBAAU,WAEFuF,GACAQ,EAAqB9F,SACrB+F,EAAqB/F,SAErB+F,EAAqB/F,QAAQoG,SACzB,EACAN,EAAqB9F,QAAQqG,UAAY,MAGlD,CAACf,EAAUQ,EAAsBC,IAGhCpP,EAAAC,EAAAC,cAACyP,GAAc9P,EACXG,EAAAC,EAAAC,cAACuN,GAAD,CAAmB7D,IAAKwF,GACnBP,EAAepM,IAAI,SAAAU,GAAQ,IAAAyM,EACFzD,GAClBhJ,EAAK4D,gBAFe8I,EAAA/P,OAAAW,EAAA,EAAAX,CAAA8P,EAAA,GAIlB3B,EACM,GALY4B,EAAA,GAAAA,EAAA,IAKY,GAAXnB,EAAgB3B,GAEzC,OACI/M,EAAAC,EAAAC,cAAC8N,GAAD,CACItL,IAAKS,EAAKG,GACVJ,WAAYA,EACZL,SAAU+B,IAAmBzB,EAAKG,GAClC2K,cAAeA,EACf9K,KAAMA,MAIlBnD,EAAAC,EAAAC,cAACgO,GAAD,CACItE,IAAKuF,EACLlB,cACkB,GAAdzH,EACAE,GACY,GAAXgI,EAAgB3B,KAGzB/M,EAAAC,EAAAC,cAAC4P,GAAD,CACI5M,WAAYA,EACZkK,aAAcA,IAEjBE,KAAM4B,GAAYzM,IAAI,SAAAsN,GAAI,OACvB/P,EAAAC,EAAAC,cAAC8P,EAAA,SAAD,CAAUtN,IAAKqN,GACX/P,EAAAC,EAAAC,cAACyN,GAAD,KACI3N,EAAAC,EAAAC,cAAC2N,GAAD,CAAeC,UAAoB,IAATiC,IACpBrB,EAAWqB,GAAQ,IAAM,GAD/B,QAIJ/P,EAAAC,EAAAC,cAACyN,GAAD,KACI3N,EAAAC,EAAAC,cAAC2N,GAAD,CAAeE,SAAO,IAChBW,EAAWqB,GAAQ,IAAM,GAD/B,cCvKbE,eACX,SAAA5S,GAAA,IAAGiB,EAAHjB,EAAGiB,MAAH,qXAAAC,OAcsBrB,EAAOoB,EAAME,MAAMjC,WAdzC,0BAAAgC,OAeiBrB,EAAOoB,EAAME,MAAM3B,KAfpC,4WAAA0B,OnBGqB,OmBHrB,oFAAAA,OAkCqBrB,EAAOoB,EAAME,MAAM1B,WAlCxC,wHAAAyB,OAqCwCrB,EAAOoB,EAAME,MAAM1B,WArC3D,4CAAAyB,OnBGqB,OmBHrB,0FAAAA,OnBGqB,OmBHrB,sHAAAA,OA8CsCrB,EAAOoB,EAAME,MAAM1B,WA9CzD,0EAAAyB,OnBGqB,OmBHrB,YAAAA,OnBGqB,OmBHrB,gFAAAA,OnBGqB,OmBHrB,8SAAAA,OA6DqCrB,EAAOoB,EAAME,MAAM1B,WA7DxD,6EAAAyB,OnBDuB,OmBCvB,mCAAAA,OnBDuB,OmBCvB,0DCFW2R,GAAA,SAACxN,EAAKyN,GAAiB,IAAA7P,EACFC,oBAAS,GADPC,EAAAV,OAAAW,EAAA,EAAAX,CAAAQ,EAAA,GAC3BqO,EAD2BnO,EAAA,GACjBoO,EADiBpO,EAAA,GAAAkD,EAERnD,mBAAS4P,GAFDxM,EAAA7D,OAAAW,EAAA,EAAAX,CAAA4D,EAAA,GAE3B0M,EAF2BzM,EAAA,GAEpB0M,EAFoB1M,EAAA,GAkBlC,OAdAyF,oBAAU,WACN,IAAKuF,EAAU,CACX,IAAM2B,EAAaC,OAAOC,aAAaC,QAAQ/N,GAC/C2N,EAASK,KAAKC,MAAML,IAAeH,GACnCvB,GAAY,KAEjB,CAAClM,EAAKyN,EAAcxB,IAEvBvF,oBAAU,WACFuF,GACA4B,OAAOC,aAAaI,QAAQlO,EAAKgO,KAAKG,UAAUT,KAErD,CAACzB,EAAUjM,EAAK0N,IAEZ,CAACA,EAAOC,ICcnB,SAASS,KAAM,IAAAC,EACeb,GAAmB,QAASpU,GAD3CkV,EAAAlR,OAAAW,EAAA,EAAAX,CAAAiR,EAAA,GACJlM,EADImM,EAAA,GACGC,EADHD,EAAA,GAAAE,EAEuBhB,GAAmB,aAAc,QAFxDiB,EAAArR,OAAAW,EAAA,EAAAX,CAAAoR,EAAA,GAEJE,EAFID,EAAA,GAEOE,EAFPF,EAAA,GAAAG,EAGiCpB,GACxC,mBACA,MALOqB,EAAAzR,OAAAW,EAAA,EAAAX,CAAAwR,EAAA,GAGJ1M,EAHI2M,EAAA,GAGYC,EAHZD,EAAA,GAAAjR,EAOyBC,oBAAS,GAPlCC,EAAAV,OAAAW,EAAA,EAAAX,CAAAQ,EAAA,GAOJwC,EAPItC,EAAA,GAOQiD,EAPRjD,EAAA,GAQLiR,EAAa5M,EAAMD,GACnBU,EAAkBoM,IAAO7M,GAAOU,OAAO,SAAApC,GAAI,OAAKA,EAAK0D,aACrD8K,EAAqBrM,EAAgBW,OAIrC2L,EAAgB,kBAAMnO,GAAc,IAE1C2F,oBAAU,WACNwI,KACD,CAAC/M,IAEJ,IAiBM3B,EAAa,CACf6B,cAAesM,EACfjO,aAAcoO,EACdxM,aApBiB,WAAkC,IAAjCG,EAAiC0M,UAAA5L,OAAA,QAAA6L,IAAAD,UAAA,GAAAA,UAAA,GAAxBvL,KAAKC,MAAOwL,EAAYF,UAAA5L,OAAA,EAAA4L,UAAA,QAAAC,EACnDb,EAAS,SAAAe,GAAS,OAAAlS,OAAAmS,EAAA,EAAAnS,QAAAmS,EAAA,EAAAnS,CAAA,GACXkS,GADW,IAEdpL,CAACzB,GAADrF,OAAAmS,EAAA,EAAAnS,QAAAmS,EAAA,EAAAnS,CAAA,GACOkS,EAAU7M,IACV4M,QAgBX9M,cAXkB,SAAA8M,GAClBd,EAAS,SAAAe,GAAS,OAAAlS,OAAAmS,EAAA,EAAAnS,QAAAmS,EAAA,EAAAnS,CAAA,GACXkS,GACAD,OAWLpN,EAAU,CACZC,iBACAC,QACAvG,MAAO8S,GAGX,OACIpR,EAAAC,EAAAC,cAACgS,EAAA,EAAD,CAAe5T,MAAO,CAAEE,KAAM4S,IAC1BpR,EAAAC,EAAAC,cAACiS,GAAD,MACAnS,EAAAC,EAAAC,cAACkS,EAAD,CACIlP,WAAYA,EACZJ,WAAYA,IAEhB9C,EAAAC,EAAAC,cAACf,EAAD,CACIR,MAAM,UACNE,UAAU,cACVmC,WAhDW,kBAAMyC,GAAc,IAiD/BK,UAAW8N,GAEX5R,EAAAC,EAAAC,cAACmS,GAAD,CACInP,WAAYA,EACZ0B,eAAgBA,EAChBwJ,KAAMrS,EACNsI,MAAO,CACHyF,QAAS6H,EAAqB,EAAI,IAClC3L,MAAO,OACP6D,cAAe8H,EAAqB,MAAQ,QAEhD9M,MAAOS,EACP+I,GAAIrS,IAERgE,EAAAC,EAAAC,cAACoS,GAAD,CACIpP,WAAYA,EACZC,KAAMsO,EACNpN,MAAO,CACH2B,MAAO,OACP8D,QAAS6H,EAAqB,EAAI,OAG1C3R,EAAAC,EAAAC,cAACwE,EAAD,CACIxB,WAAYA,EACZyB,QAASA,EACTC,eAAgBA,EAChBP,MAAO,CACH2B,MAAO,QAEXnB,MAAOS,MAO3B,IAAMiN,GAAcC,SAASC,eAAe,QAC5CC,IAASxK,OAAOlI,EAAAC,EAAAC,cAAC4Q,GAAD,MAASyB","file":"static/js/main.21b5fab4.chunk.js","sourcesContent":["import { lighten, rgba, setLightness, transparentize } from 'polished';\n\nexport const BORDER_RADIUS = '3px';\nexport const BULLET_SIZE = '10px';\nexport const DEFAULT_TASK_ICON = '📌';\nexport const END_ZONE_ICON = '🗑';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '30px';\nexport const HOURS_PER_SCREEN = 8;\nexport const INITIAL_TASKS = {};\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const TIMELINE_FROM = '7:00';\nexport const TIMELINE_TO = '24:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nexport const COPY = {\n    empty_notes: 'Add task notes',\n};\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = PRIMARY;\nDARK.BACKGROUND = '#000209';\nDARK.HIGH_CONTRAST_BACKGROUND = DARK.PRIMARY;\nDARK.HIGH_CONTRAST_TEXT = DARK.BACKGROUND;\nDARK.BORDER_HOVER = setLightness(0.5, PRIMARY);\nDARK.BORDER_IDLE = setLightness(0.3, PRIMARY);\nDARK.SHADED = lighten(0.1, DARK.BACKGROUND);\nDARK.TEXT = setLightness(0.85, DARK.PRIMARY);\nDARK.TEXT_FADED = setLightness(0.4, DARK.TEXT);\nDARK.BORDER_NEUTRAL = setLightness(0.15, DARK.TEXT);\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.BACKGROUND = 'white';\nLIGHT.HIGH_CONTRAST_BACKGROUND = LIGHT.PRIMARY;\nLIGHT.HIGH_CONTRAST_TEXT = LIGHT.BACKGROUND;\nLIGHT.BORDER_HOVER = rgba('#0094FF', 0.5);\nLIGHT.BORDER_IDLE = rgba('#0094FF', 0.3);\nLIGHT.BORDER_NEUTRAL = setLightness(0.75, LIGHT.BACKGROUND);\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.TEXT = setLightness(0.15, LIGHT.PRIMARY);\nLIGHT.TEXT_FADED = LIGHT.BORDER_NEUTRAL;\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\n","import styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from './tokens';\n\nexport default styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = 0,\n        marginX = 0,\n        marginY = 0,\n        padding = 0,\n        paddingX = 0,\n        paddingY = 0,\n        theme,\n    }) => `\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER_NEUTRAL}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        isFlexible = false,\n        justify = 'stretch',\n        spacing = 0,\n    }) => `\n        align-items: ${align};\n        display: flex;\n        flex-direction: ${direction};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        justify-content: ${justify};\n        width: 100%;\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport { transparentize } from 'polished';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n        \n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})(\n    ({ theme }) => `\n        height: calc(100vh - ${GRID_UNIT});\n        overflow: auto;\n        position: relative;\n        \n        & > * {\n            align-self: stretch;\n        }\n    `\n);\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n    paddingX: 0.5,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        border-bottom: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({ children, label, ...otherProps }) => (\n    <Container>\n        <ColumnHeader>{label}</ColumnHeader>\n        <ContentContainer {...otherProps}>{children}</ContentContainer>\n    </Container>\n);\n\nexport default AppColumn;\n","import { useState } from 'react';\n\nexport default (type, callback) => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        setIsTargetedForDrop(true);\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = () => {\n        setIsTargetedForDrop(false);\n    };\n\n    const onDrop = evt => {\n        const payload = evt.dataTransfer.getData(type);\n        if (payload) {\n            callback(isNaN(payload) ? payload : parseFloat(payload));\n        }\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","import styled from 'styled-components';\nimport { BORDER_RADIUS, COLORS, UNIFIED_TRANSITION } from './tokens';\nimport FlexBox from './FlexBox';\n\nconst Button = styled(FlexBox).attrs({\n    as: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].PRIMARY};\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].TEXT};\n        cursor: pointer;\n        transform: scale(1);\n        ${UNIFIED_TRANSITION};\n        \n        &:focus,\n        &:hover {\n            transform: scale(1.1);\n        }\n        &:active {\n            transform: scale(0.9);\n            filter: hue-rotate(20deg);\n        }\n    `\n);\n\nexport const GhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        border-radius: ${BORDER_RADIUS};\n        border: 2px dashed ${COLORS[theme.name].BORDER_IDLE};\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            border-color: ${COLORS[theme.name].BORDER_HOVER};\n        }\n    `\n);\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    justify: 'space-between',\n    paddingX: 1,\n    paddingY: 0.25,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        width: 100%;\n        z-index: 10;\n        \n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst OptionButton = styled(Button)(\n    ({ isSelected, theme }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <Container {...otherProps}>\n        {options.map(option => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(renderOption(option))\n                        : renderOption(option)}\n                </OptionButton>\n            );\n        })}\n    </Container>\n);\n\nexport default OptionBar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n})(\n    ({ duration, isActive, isDragging, isDraggingOver, theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow: ${`0 0 0 2px ${\n            COLORS[theme.name][isActive ? 'PRIMARY' : 'BORDER_IDLE']\n        }`};\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        min-height: ${minutesToHeight(20)};\n        opacity: ${isDragging ? 0.5 : 1};\n        padding: 0 calc(${GRID_UNIT} / 2) 0\n            calc(${GRID_UNIT} / 2 + ${LABEL_STRIP_WIDTH});\n        pointer-events: ${isDraggingOver ? 'none' : 'auto'};\n        position: relative;\n        transition-property: opacity, top;\n        width: 100%;\n        z-index: ${isActive ? 10 : 'initial'};\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].BORDER_HOVER};\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY} inset;\n        }\n    `\n);\n\nconst Label = styled(FlexBox).attrs({\n    spacing: 0.5,\n})(\n    ({ isActive, theme }) => `\n        align-items: center;\n        color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n        display: flex;\n        justify-content: space-between;\n        height: 100%;\n        max-height: ${minutesToHeight(20)};\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst TaskCard = ({ appActions, isActive, task, ...otherProps }) => {\n    const { onSelectTask } = appActions;\n    const { icon, id, label, scheduled_minutes } = task;\n    const [dragProps] = useDrag('task-id', id);\n\n    const handleClick = () => onSelectTask(id);\n\n    return (\n        <Container\n            duration={scheduled_minutes}\n            isActive={isActive}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <Label isActive={isActive}>\n                <div\n                    style={{\n                        maxHeight: '100%',\n                        overflow: 'auto',\n                    }}\n                >\n                    {label}\n                </div>\n                <span>{icon}</span>\n            </Label>\n        </Container>\n    );\n};\n\nexport default TaskCard;\n","import { useState } from 'react';\n\nexport default (type, payload) => {\n    const [isDragging, setIsDragging] = useState(false);\n    const [isDraggingOver, setIsDraggingOver] = useState(false);\n\n    const onDragStart = evt => {\n        evt.dataTransfer.setData(type, payload);\n        setIsDragging(true);\n    };\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n        setIsDraggingOver(false);\n    };\n\n    const onDragEnter = () => setIsDraggingOver(true);\n\n    const onDragLeave = () => setIsDraggingOver(false);\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        isDraggingOver,\n        onDragEnd,\n        onDragEnter,\n        onDragLeave,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport AppColumn from './AppColumn';\nimport Box from './atoms/Box';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport OptionBar from './OptionBar';\nimport TaskCard from './TaskCard';\nimport { COLORS, DEFAULT_TASK_ICON, GRID_UNIT } from './atoms/tokens';\n\nconst Container = styled(AppColumn).attrs({\n    label: 'Backlog',\n})(\n    ({ isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].BORDER_HOVER} inset`\n                : 'initial'\n        };\n        flex-grow: 1;\n    `\n);\n\nconst CreateFirstTaskTip = styled(Box)`\n    position: absolute;\n    left: calc(100% + ${GRID_UNIT} * 2);\n    top: 50%;\n    transform: translateY(-50%);\n    white-space: nowrap;\n`;\n\nexport default ({\n    appActions,\n    appData,\n    selectedTaskId,\n    tasks,\n    onClickTask,\n    ...otherProps\n}) => {\n    const {\n        onChangeTheme,\n        onSelectTask,\n        onUpdateTask,\n        onUpdateTasks,\n    } = appActions;\n    const { theme } = appData;\n    const [dropProps] = useDrop('task-id', taskId =>\n        onUpdateTask(taskId, {\n            scheduled: false,\n        })\n    );\n    const incompleteTasks = tasks.filter(task => !task.scheduled);\n\n    const handleClickNewTask = () => {\n        const newTaskId = Date.now();\n        const now = new Date();\n        const currentHour = now.getHours();\n        const currentMinute = now.getMinutes();\n\n        onUpdateTasks({\n            [newTaskId]: {\n                icon: DEFAULT_TASK_ICON,\n                id: newTaskId,\n                isComplete: false,\n                label: 'New Task',\n                notes: '',\n                scheduled: false,\n                scheduled_minutes: 30,\n                scheduled_time: `${currentHour}:${currentMinute}`,\n            },\n        });\n        onSelectTask(newTaskId);\n    };\n\n    return (\n        <Container {...dropProps} {...otherProps}>\n            <OptionBar\n                options={['DARK', 'LIGHT']}\n                renderOption={option => option.toLowerCase()}\n                renderSelectedOption={option => `${option} mode`}\n                selectedOption={theme}\n                onChange={onChangeTheme}\n            />\n            <Box\n                isFlexible\n                style={{\n                    position: 'relative',\n                }}\n            >\n                <FlexBox\n                    justify=\"flex-start\"\n                    direction=\"column\"\n                    spacing={1}\n                    padding={1}\n                    style={{\n                        bottom: 0,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                >\n                    <div style={{ position: 'relative', width: '100%' }}>\n                        {tasks.length === 0 && (\n                            <CreateFirstTaskTip>\n                                <span\n                                    role=\"img\"\n                                    aria-label=\"left-pointing hand\"\n                                >\n                                    👈\n                                </span>{' '}\n                                Create your first task\n                            </CreateFirstTaskTip>\n                        )}\n                        <GhostButton\n                            style={{\n                                height: minutesToHeight(30),\n                            }}\n                            onClick={handleClickNewTask}\n                        >\n                            New Task\n                        </GhostButton>\n                    </div>\n                    {incompleteTasks.map(task => (\n                        <TaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            isActive={selectedTaskId === task.id}\n                            task={task}\n                        />\n                    ))}\n                </FlexBox>\n            </Box>\n        </Container>\n    );\n};\n","import React from 'react';\nimport { lighten, transparentize } from 'polished';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport { COLORS, END_ZONE_ICON, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst DROP_ZONE_RADIUS = '20vw';\n\nconst pulsingAnimation = ({ theme }) => keyframes`\n    0% {\n        box-shadow: 0 0 0 0 ${COLORS[theme.name].PRIMARY};\n        transform: scale(1);\n    }\n    100% {\n        box-shadow: 0 0 50px 0 ${COLORS[theme.name].PRIMARY};\n        transform: scale(1.2);\n    }\n`;\n\nconst Container = styled.div(\n    ({ isDragging, isTargetedForDrop, theme }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop ? pulsingAnimation : 'unset'};\n        animation-timing-function: ease-in-out;\n        background: ${transparentize(\n            isTargetedForDrop ? 0 : isDragging ? 0.35 : 0.8,\n            COLORS[theme.name].PRIMARY\n        )};\n        bottom: calc(${DROP_ZONE_RADIUS} * -1);\n        border-radius: calc(${DROP_ZONE_RADIUS} * 2);\n        height: calc(${DROP_ZONE_RADIUS} * 2);\n        pointer-events: ${isDragging ? 'all' : 'none'};\n        position: fixed;\n        right: calc(${DROP_ZONE_RADIUS} * -1);\n        transform: scale(${isDragging ? 0.5 : 0.25});\n        width: calc(${DROP_ZONE_RADIUS} * 2);\n        z-index: 100;\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            align-items: center;\n            content: '${END_ZONE_ICON}';\n            display: flex;\n            font-size: 8rem;\n            justify-content: center;\n            height: calc(${DROP_ZONE_RADIUS} * 1.25);\n            left: 0;\n            position: absolute;\n            top: 0;\n            width: calc(${DROP_ZONE_RADIUS} * 1.25);\n        }\n    `\n);\n\nconst CompletedTaskDropZone = ({ appActions, isDragging, ...otherProps }) => {\n    const { onSelectTask, onUpdateTask } = appActions;\n    const [dropProps] = useDrop('task-id', taskId => {\n        onUpdateTask(taskId, {\n            isComplete: true,\n        });\n        onSelectTask(currentSelectedTaskId => {\n            return currentSelectedTaskId === taskId\n                ? null\n                : currentSelectedTaskId;\n        });\n    });\n\n    return <Container isDragging={isDragging} {...dropProps} {...otherProps} />;\n};\n\nexport default CompletedTaskDropZone;\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport Box from './atoms/Box';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditing, isEmpty, theme }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        opacity: ${isEmpty ? 0.5 : 1};\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border: 2px dashed ${COLORS[theme.name].BORDER_HOVER};\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.5 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.5 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            &:before {\n                opacity: 1;\n            }\n        }\n    `\n);\n\nconst EditInPlace = ({\n    isMultiLine = false,\n    placeholder = 'Empty',\n    render = value => value,\n    value = '',\n    wrapperStyles = {},\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = value.trim() === '';\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = () => {\n        setBufferedValue(value);\n        setIsEditing(true);\n    };\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const handleKeyDown = evt => {\n        if (evt.key === 'Escape') {\n            setBufferedValue(value);\n            setIsEditing(false);\n            return;\n        }\n        if (evt.key === 'Enter') {\n            if (evt.metaKey || evt.shiftKey || !isMultiLine) {\n                onSave(bufferedValue);\n                setIsEditing(false);\n            }\n            if (!isMultiLine) {\n                evt.preventDefault();\n                return false;\n            }\n        }\n    };\n\n    return (\n        <Container\n            isEditing={isEditing}\n            isEmpty={isEmpty}\n            onClick={handleClick}\n            {...otherProps}\n        >\n            <Box style={wrapperStyles}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                outline: '2px dotted red',\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <textarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                display: 'block',\n                                height: `${measuringElementHeight}px`,\n                                width: '100%',\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                            onKeyDown={handleKeyDown}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Box>\n        </Container>\n    );\n};\n\nexport default EditInPlace;\n","import React, { useLayoutEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport AppColumn from './AppColumn';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    DEFAULT_TASK_ICON,\n    DURATION_OPTIONS,\n} from './atoms/tokens';\n\nconst ANIMATION_DURATION = 200;\n\nconst Container = styled(AppColumn)(\n    ({ isLoading, theme }) => `\n        box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1);\n        border-left: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        border-right: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        overflow: unset;\n        z-index: 1;\n        \n        // Blackout curtain\n        &:before {\n            background-color: ${COLORS[theme.name].BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isLoading ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            transition: opacity ${ANIMATION_DURATION / 2 / 1000}s ease-in-out;\n            z-index: 10;\n        }\n    `\n);\n\nconst TaskHeader = styled(FlexBox).attrs({\n    as: 'h1',\n    align: 'flex-start',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: 1.4rem;\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box).attrs({\n    role: 'image',\n})`\n    flex-grow: 1;\n    justify-self: stretch;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst TaskDetails = ({ appActions, task = {}, ...otherProps }) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const { onUpdateTask } = appActions;\n    const { icon, id, label, notes, scheduled_minutes } = task;\n    const isEmpty = !task.id;\n    const handleUpdateTask = (field, value) =>\n        onUpdateTask(id, { [field]: value });\n    const handleSaveDuration = newDuration =>\n        handleUpdateTask('scheduled_minutes', newDuration);\n    const handleSaveIcon = newNotes => handleUpdateTask('icon', newNotes);\n    const handleSaveLabel = newLabel => handleUpdateTask('label', newLabel);\n    const handleSaveNotes = newNotes => handleUpdateTask('notes', newNotes);\n\n    useLayoutEffect(() => {\n        setIsLoading(true);\n        const newTimer = setTimeout(\n            () => setIsLoading(false),\n            ANIMATION_DURATION / 2\n        );\n        return () => clearTimeout(newTimer);\n    }, [task.id]);\n\n    return (\n        <Container\n            isLoading={isLoading}\n            label=\"Selected Task Details\"\n            {...otherProps}\n        >\n            {!isEmpty && !isLoading && (\n                <>\n                    <OptionBar\n                        renderSelectedOption={option => `${option} mins`}\n                        selectedOption={scheduled_minutes}\n                        options={DURATION_OPTIONS}\n                        onChange={handleSaveDuration}\n                    />\n\n                    <TaskHeader>\n                        <TaskHeaderLabel>\n                            <EditInPlace\n                                placeholder=\"Untitled\"\n                                value={label}\n                                onSave={handleSaveLabel}\n                            />\n                        </TaskHeaderLabel>\n                        <TaskHeaderIcon>\n                            <EditInPlace\n                                placeholder={DEFAULT_TASK_ICON}\n                                value={icon}\n                                onSave={handleSaveIcon}\n                            />\n                        </TaskHeaderIcon>\n                    </TaskHeader>\n\n                    <EditInPlace\n                        isFlexible\n                        isMultiLine\n                        margin={1}\n                        placeholder={COPY.empty_notes}\n                        render={rawNotes => (\n                            <div\n                                className=\"markdown\"\n                                dangerouslySetInnerHTML={{\n                                    __html: marked(rawNotes),\n                                }}\n                            />\n                        )}\n                        wrapperStyles={{\n                            bottom: 0,\n                            left: 0,\n                            overflow: 'auto',\n                            position: 'absolute',\n                            right: 0,\n                            top: 0,\n                        }}\n                        value={notes}\n                        onSave={handleSaveNotes}\n                    />\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default TaskDetails;\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","export default str => parseInt(str, 10);\n","import React from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = ({\n    appActions,\n    quarterInMinutes,\n    ...otherProps\n}) => {\n    const { onUpdateTask } = appActions;\n    const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n    const newOffsetMinutes =\n        fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n    const newTime = minutesToTime(newOffsetMinutes);\n    const [dropProps] = useDrop('task-id', taskId =>\n        onUpdateTask(taskId, {\n            scheduled: true,\n            scheduled_time: newTime,\n        })\n    );\n\n    return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n};\n\nconst TimelineDropZone = ({ appActions, totalMinutes, ...otherProps }) => {\n    return (\n        <Container {...otherProps}>\n            {range(totalMinutes / 15).map(quarterInMinutes => (\n                <TimelineDropTarget\n                    key={quarterInMinutes}\n                    appActions={appActions}\n                    quarterInMinutes={quarterInMinutes}\n                />\n            ))}\n        </Container>\n    );\n};\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: \"Today's Plan\",\n})``;\n\nconst TimelineContainer = styled.div`\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    overflow: auto;\n    user-select: none;\n`;\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n    \n        &:before {\n            background-color: ${transparentize(\n                isFaded ? 0.8 : 0.5,\n                COLORS[theme.name].BORDER_NEUTRAL\n            )};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ offsetMinutes }) => `\n        position: absolute;\n        left: calc(${GRID_UNIT} * 3);\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n        z-index: 2;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 500);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer ref={timelineContainerRef}>\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default Timeline;\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, COLORS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            line-height: 1.4em;\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(JSON.parse(savedState) || initialState);\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport values from 'lodash/values';\nimport AppColumn from './components/AppColumn';\nimport Backlog from './components/Backlog';\nimport CompletedTasksDropZone from './components/CompletedTasksDropZone';\nimport TaskDetails from './components/TaskDetails';\nimport Timeline from './components/Timeline';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport usePersistentState from './hooks/usePersistentState';\nimport {\n    INITIAL_TASKS,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\n\n/*\n    tasks: {\n        1: {\n            id: 1,\n            icon: '🧺',\n            isComplete: false,\n            label: 'Take out the laundry',\n            notes:\n                'This is a note. **This is bold, I think?**\\n\\nWith two lines!\\n\\n- And a list\\n\\n- Of things\\n\\n- Like this!\\n\\n> Look, a blockquote! Oooh',\n            scheduled: false,\n            scheduled_minutes: 30,\n            scheduled_time: '14:00',\n        },\n    },\n*/\n\nfunction App() {\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        null\n    );\n    const [isDragging, setIsDragging] = useState(false);\n    const activeTask = tasks[selectedTaskId];\n    const incompleteTasks = values(tasks).filter(task => !task.isComplete);\n    const hasIncompleteTasks = incompleteTasks.length;\n\n    const handleDragOver = () => setIsDragging(true);\n\n    const handleDragEnd = () => setIsDragging(false);\n\n    useEffect(() => {\n        handleDragEnd();\n    }, [tasks]);\n\n    const onUpdateTask = (taskId = Date.now(), updates) => {\n        setTasks(prevState => ({\n            ...prevState,\n            [taskId]: {\n                ...prevState[taskId],\n                ...updates,\n            },\n        }));\n    };\n\n    const onUpdateTasks = updates => {\n        setTasks(prevState => ({\n            ...prevState,\n            ...updates,\n        }));\n    };\n\n    const appActions = {\n        onChangeTheme: setThemeName,\n        onSelectTask: setSelectedTaskId,\n        onUpdateTask,\n        onUpdateTasks,\n    };\n\n    const appData = {\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    return (\n        <ThemeProvider theme={{ name: themeName }}>\n            <GlobalStyle />\n            <CompletedTasksDropZone\n                appActions={appActions}\n                isDragging={isDragging}\n            />\n            <FlexBox\n                align=\"stretch\"\n                direction=\"row-reverse\"\n                onDragOver={handleDragOver}\n                onDragEnd={handleDragEnd}\n            >\n                <Timeline\n                    appActions={appActions}\n                    selectedTaskId={selectedTaskId}\n                    from={TIMELINE_FROM}\n                    style={{\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                        width: '30vw',\n                        pointerEvents: hasIncompleteTasks ? 'all' : 'none',\n                    }}\n                    tasks={incompleteTasks}\n                    to={TIMELINE_TO}\n                />\n                <TaskDetails\n                    appActions={appActions}\n                    task={activeTask}\n                    style={{\n                        width: '40vw',\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                    }}\n                />\n                <Backlog\n                    appActions={appActions}\n                    appData={appData}\n                    selectedTaskId={selectedTaskId}\n                    style={{\n                        width: '30vw',\n                    }}\n                    tasks={incompleteTasks}\n                />\n            </FlexBox>\n        </ThemeProvider>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}