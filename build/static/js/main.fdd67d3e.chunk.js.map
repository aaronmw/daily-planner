{"version":3,"sources":["components/atoms/Icon.js","components/atoms/tokens.js","components/atoms/copy/motivational-descriptors.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","components/atoms/Button.js","components/atoms/GlobalStyles.js","components/atoms/Transition.js","hooks/useKeyboardShortcuts.js","components/EditInPlace.js","hooks/useDrag.js","hooks/useDrop.js","utils/toInt.js","components/ListCard.js","components/ListManager.js","components/TaskListToggleButton.js","components/ToolBar.js","components/Sidebar.js","components/OptionBar.js","components/TaskDetails.js","utils/minutesToHeight.js","components/TaskCard.js","components/TaskList.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/Trash.js","components/TrashContents.js","hooks/usePersistentState.js","index.js"],"names":["STYLE_PREFIX_MAP","solid","regular","light","duotone","brands","Icon","_ref","iconName","_ref$styleName","styleName","otherProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","SIDEBAR_DEFAULT_WIDTH","SIDEBAR_EXTENDED_WIDTH","DURATION_OPTIONS","GRID_UNIT","FONTS","NORMAL","LINE_HEIGHT","SIZE","LARGE","INITIAL_LISTS","id","isArchived","label","INITIAL_SELECTED_LIST_ID","INITIAL_TASKS","INITIAL_SELECTED_TASK_ID","LIST_CARD_HEIGHT","LIST_CARD_SPACING","LIST_CARD_WIDTH","MIN_SLOT_HEIGHT","ROUTE_TRANSITION_ANIMATION_DURATION","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","CREATE_NEW_TASK","DELETE_TASK","MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE","MOVE_BETWEEN_LISTS","PREFIX","SETTING_DURATION","TOGGLE_TASK_LIST","TOGGLE_DARK_MODE","TOGGLE_LIST_MANAGER","DARK","PRIMARY_FADED","darken","PRIMARY","BACKGROUND","HIGH_CONTRAST_BACKGROUND","HIGH_CONTRAST_TEXT","SHADED","setLightness","SHADOW","transparentize","TEXT","TEXT_FADED","TASK_BORDER","TASK_BORDER_HOVER","TASK_BORDER_ACTIVE","BORDER","BORDER_FADED","LIGHT","lighten","COLORS","ICON_PACKS","EMOJI","DARK_MODE","END_ZONE","LEFT","LIGHT_MODE","LIST_MANAGER","RIGHT","TASK_DETAILS","FONT_AWESOME","ICON_NAME","STYLE_NAME","keys","forEach","key","_ICON_PACKS$FONT_AWES","atoms_Icon","ICONS","TASK_DEFAULT","styled","div","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","name","Box","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","_ref$wrapped","wrapped","Container","FlexBox","attrs","ContentContainer","_ref2","ColumnHeader","_ref3","AppColumn","_ref4","children","PrimaryAppColumn","_ref5","SecondaryAppColumn","_ref6","isTargetedForDrop","Button","as","GhostButton","ToggleButton","isActive","createGlobalStyle","Transition","isTransitioning","INPUT_TAG_NAMES","isInput","node","tagName","map","toLowerCase","includes","useKeyboardShortcuts","keyMap","targetElementRef","arguments","length","undefined","current","useEffect","onKeyDown","scopedToElementRef","evt","keysDown","ctrlKey","push","shiftKey","metaKey","currentKeySequence","uniq","keyDown","sort","join","mapKeys","handler","sequence","shortcutKeySequence","split","trim","scopedElement","scopedToAnInput","elementWithFocusIsAnInput","document","activeElement","target","stopPropagation","buildKeyboardShortcutHandler","addEventListener","removeEventListener","isEditing","_ref$tracingElementSt","tracingElementStyles","StyledTextarea","textarea","_templateObject","Canvas","isEmpty","memo","_ref3$doubleClickToEd","doubleClickToEdit","_ref3$isMultiLine","isMultiLine","_ref3$isRemotelyActiv","isRemotelyActivated","_ref3$placeholder","placeholder","_ref3$render","render","value","_ref3$tracingElementS","_ref3$value","_ref3$canvasStyles","canvasStyles","_ref3$onSave","onSave","_useState","useState","_useState2","slicedToArray","setIsEditing","_useState3","_useState4","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","containerElementRef","useRef","inputRef","measuringElementRef","isSingleLine","select","focus","el","offsetHeight","handleClick","useCallback","useMemo","saveAndClose","close","cmd + escape","shift + escape","cmd + enter","shift + enter","escape","enter","preventDefault","EditInPlace_Container","ref","tabIndex","onClick","onDoubleClick","style","objectSpread2","Fragment","position","pointerEvents","opacity","whiteSpace","width","disabled","rows","height","onBlur","onChange","useDrag","dataTypes","isDragging","setIsDragging","draggable","onDragEnd","onDragStart","dataType","dataTransfer","setData","useDrop","dataTypeHandlers","setIsTargetedForDrop","targetedElement","droppable","onDragEnter","onDragOver","onDragLeave","onDrop","data","getData","payload","isNaN","parseFloat","dataTypeHandler","toInt","str","parseInt","StyledListCard","ListCardTaskIconContainer","ListCard","appActions","listId","onUpdateTask","listCardElementRef","_useDrag","list-id","dragProps","_useDrop","task-id","taskId","targetListId","currentTarget","dataset","isComplete","list_id","dropProps","triggerClick","click","space","data-list-id","title","TIPS","GhostListCard","ListCard_templateObject","ListManager","appData","onCreateList","onSelectList","onUpdateList","incompleteTasks","isCreatingList","lists","selectedListId","unarchivedLists","filter","list","sortedLists","sortBy","ListManager_Container","CREATE_LIST_LABEL","tasksInList","task","ListCard_ListCard","components_EditInPlace","alignSelf","flexGrow","flexShrink","newLabel","icon","TaskListToggleButton","isSidebarOpen","onChangeIsSidebarOpen","ToolBar","Sidebar","onChangeTheme","isShowingTrashContents","isTaskListForcedOpen","setIsTaskListForcedOpen","selectedList","find","scheduled","sidebarDropProps","LABEL_FOR_TRASH","components_ToolBar","components_TaskListToggleButton","OptionButton","isSelected","OptionBar","options","_ref2$renderOption","renderOption","option","_ref2$renderSelectedO","renderSelectedOption","selectedOption","optionIndex","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","role","_templateObject2","DurationOptionBar","TaskDetails","_ref3$appActions","_ref3$appData","isCreatingTask","selectedTaskId","activeTask","tasks","notes","scheduled_minutes","handleUpdateTask","field","[object Object]","handleSaveDuration","newDuration","handleSaveIcon","newNotes","handleSaveLabel","handleSaveNotes","EMPTY_LABEL","EMPTY_NOTES","rawNotes","dangerouslySetInnerHTML","__html","marked","bottom","left","overflow","right","top","minutesToHeight","minutes","duration","CardLabel","Math","min","CardIcon","onImmediatelySelectTask","onTransitionToTask","isShowingListManager","TaskCard_Container","data-task-id","onChangeTaskPosition","onCreateTask","unscheduledTasks","droppedOnTaskId","droppedOnTaskIndex","findIndex","taskCardDropProps","CREATE_TASK_LABEL","components_TaskCard","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","floor","scheduled_time","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","LABEL_FOR_TIMELINE","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","from","to","onClickTask","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isDraggingTask","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","DROP_ZONE_SIZE","pulsingAnimation","keyframes","Trash_templateObject","AnimatedContainer","css","Trash_templateObject2","TrashDropZone","TrashIconContainer","Trash","onChangeIsShowingTrashContents","onDeleteTask","firstUnarchivedList","deletedTasks","hasDeletedTasks","EMPTY_TRASH","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","isShowingSidebar","setIsShowingSidebar","_usePersistentState3","_usePersistentState4","setLists","_usePersistentState5","_usePersistentState6","setSelectedListId","_usePersistentState7","_usePersistentState8","setIsShowingListManager","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","setSelectedTaskId","_usePersistentState13","_usePersistentState14","themeName","setThemeName","setIsCreatingList","setIsCreatingTask","setIsDraggingTask","_useState7","_useState8","setIsShowingTrashContents","_useState9","_useState10","setIsTransitioning","currentListIndex","hasIncompleteTasks","handleDragOver","handleDragEnd","overrides","newListId","currentLists","sample","MOTIVATIONAL_DESCRIPTORS","NEW_LIST_LABEL","setTimeout","updates","prevLists","prevTasks","newTaskId","currentTasks","NEW_TASK_LABEL","NEW_TASK_NOTES","clearTimeout","transition","callback","onChangeIsShowingListManager","newIsShowingListManager","firstUnarchivedTask","newIndex","tasksMinusTarget","slice","moveTaskToTimeline","moveTaskToTaskList","selectNextList","nextListIndex","nextIndex","selectPreviousList","prevListIndex","prevIndex","setTaskDuration","toggleTaskListVisibility","toggleDarkMode","toggleIsEditingCurrentTask","toggleIsShowingListManager","createNewTask","deleteCurrentTask","reduce","acc","index","bind","cmd + arrowRight","cmd + arrowLeft","cmd + shift + arrowRight","cmd + shift + arrowLeft","cmd + shift + ]","cmd + shift + [","b","d","e","l","n","t","columnWidths","sidebar","listManager","taskDetails","timeline","styled_components_browser_esm","GlobalStyles","components_Trash","components_Sidebar","components_TrashContents","components_TaskList","LABEL_FOR_LIST_MANAGER","LABEL_FOR_TASK_DETAILS","atoms_Transition","components_ListManager","components_TaskDetails","components_Timeline","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.fdd67d3e.chunk.js","sourcesContent":["import React from 'react';\n\nconst STYLE_PREFIX_MAP = {\n    solid: 'fas',\n    regular: 'far',\n    light: 'fal',\n    duotone: 'fad',\n    brands: 'fab',\n};\n\nconst Icon = ({ iconName, styleName = 'regular', ...otherProps }) => (\n    <i\n        className={`${STYLE_PREFIX_MAP[styleName]} fa-${iconName}`}\n        {...otherProps}\n    />\n);\n\nexport default Icon;\n","import React from 'react';\nimport { darken, lighten, setLightness, transparentize } from 'polished';\nimport MOTIVATIONAL_DESCRIPTORS from './copy/motivational-descriptors';\nimport Icon from './Icon';\n\nexport const SIDEBAR_DEFAULT_WIDTH = '30vw';\nexport const SIDEBAR_EXTENDED_WIDTH = '40vw';\nexport const BORDER_RADIUS = '3px';\nexport const BORDER_WIDTH = '1px';\nexport const BULLET_SIZE = '10px';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '30px';\nexport const FONTS = {\n    NORMAL: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.5)` },\n    LARGE: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.75)` },\n};\nexport const HOURS_PER_SCREEN = 10;\nexport const INITIAL_LISTS = [\n    {\n        id: 1,\n        isArchived: false,\n        label: 'Default List',\n    },\n];\nexport const INITIAL_SELECTED_LIST_ID = (INITIAL_LISTS[0] || {}).id;\nexport const INITIAL_TASKS = [];\nexport const INITIAL_SELECTED_TASK_ID = (INITIAL_TASKS[0] || {}).id;\nexport const LIST_CARD_HEIGHT = `calc(${GRID_UNIT} * 8)`;\nexport const LIST_CARD_SPACING = `calc(${GRID_UNIT} * 0.5)`;\nexport const LIST_CARD_WIDTH = `calc((100% - (${LIST_CARD_SPACING} * 2)) / 3)`;\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const ROUTE_TRANSITION_ANIMATION_DURATION = 250;\nexport const TIMELINE_FROM = '6:00';\nexport const TIMELINE_TO = '30:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.MOTIVATIONAL_DESCRIPTORS = MOTIVATIONAL_DESCRIPTORS;\nCOPY.EMPTY_LABEL = '...label?';\nCOPY.EMPTY_NOTES = '...notes?';\nCOPY.EMPTY_TRASH = 'Trash is Empty';\nCOPY.LABEL_FOR_LIST_MANAGER = 'Switch Lists';\nCOPY.LABEL_FOR_TASK_DETAILS = 'Back to Task';\nCOPY.LABEL_FOR_TIMELINE = \"Today's Schedule\";\nCOPY.LABEL_FOR_TRASH = 'Trash Contents';\nCOPY.CREATE_LIST_LABEL = 'Create List';\nCOPY.CREATE_TASK_LABEL = 'Create Task';\nCOPY.NEW_LIST_LABEL = 'New List';\nCOPY.NEW_TASK_LABEL = `New Task`;\nCOPY.NEW_TASK_NOTES = '';\nCOPY.TIPS = {\n    CREATE_NEW_TASK: 'Press [N] to create a [N]ew task in the current list',\n    DELETE_TASK: 'Press [T] to move the selected task to the [T]rash',\n    MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE:\n        'Press [⌘]+[LEFT or RIGHT] to move the selected task to the TaskList or Timeline, respectively',\n    MOVE_BETWEEN_LISTS:\n        'Press [⌘]+[SHIFT]+[LEFT or RIGHT] to move between your lists',\n    PREFIX: 'Tip ☝️: ',\n    SETTING_DURATION:\n        'Press keys [1] to [6] to quickly adjust your time estimate for the selected task',\n    TOGGLE_TASK_LIST:\n        'Press [B] to show / hide the side[B]ar of unscheduled tasks',\n    TOGGLE_DARK_MODE: 'Press [D] to toggle [D]ark Mode',\n    TOGGLE_LIST_MANAGER: 'Press [L] to see your [L]ists',\n};\n\nexport { COPY };\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = '#FFB73E';\nDARK.PRIMARY_FADED = darken(0.2, DARK.PRIMARY);\nDARK.BACKGROUND = '#050300';\nDARK.HIGH_CONTRAST_BACKGROUND = DARK.PRIMARY;\nDARK.HIGH_CONTRAST_TEXT = DARK.BACKGROUND;\nDARK.SHADED = setLightness(0.04, DARK.PRIMARY);\nDARK.SHADOW = transparentize(0.95, DARK.BACKGROUND);\nDARK.TEXT = DARK.PRIMARY;\nDARK.TEXT_FADED = setLightness(0.35, DARK.TEXT);\nDARK.TASK_BORDER = transparentize(0.5, DARK.PRIMARY);\nDARK.TASK_BORDER_HOVER = transparentize(0.5, DARK.PRIMARY);\nDARK.TASK_BORDER_ACTIVE = DARK.PRIMARY;\nDARK.BORDER = setLightness(0.15, DARK.PRIMARY);\nDARK.BORDER_FADED = DARK.TEXT_FADED;\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.PRIMARY_FADED = lighten(0.2, LIGHT.PRIMARY);\nLIGHT.BACKGROUND = '#FFFFFF';\nLIGHT.HIGH_CONTRAST_BACKGROUND = LIGHT.PRIMARY;\nLIGHT.HIGH_CONTRAST_TEXT = LIGHT.BACKGROUND;\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.SHADOW = transparentize(0.8, setLightness(0.25, LIGHT.PRIMARY));\nLIGHT.TEXT = setLightness(0.15, LIGHT.PRIMARY);\nLIGHT.TEXT_FADED = transparentize(0.4, LIGHT.TEXT);\nLIGHT.TASK_BORDER = transparentize(0.5, LIGHT.PRIMARY);\nLIGHT.TASK_BORDER_HOVER = transparentize(0.5, LIGHT.PRIMARY);\nLIGHT.TASK_BORDER_ACTIVE = LIGHT.PRIMARY;\nLIGHT.BORDER = transparentize(0.75, LIGHT.TEXT);\nLIGHT.BORDER_FADED = transparentize(0.25, LIGHT.TEXT_FADED);\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\n\nconst ICON_PACKS = {\n    EMOJI: {\n        DARK_MODE: '🌚',\n        END_ZONE: '🗑',\n        LEFT: '👈',\n        LIGHT_MODE: '🌞',\n        LIST_MANAGER: '📚',\n        RIGHT: '👉',\n        TASK_DETAILS: '📌',\n    },\n    FONT_AWESOME: {\n        DARK_MODE: {\n            ICON_NAME: 'moon-stars',\n            STYLE_NAME: 'light',\n        },\n        END_ZONE: {\n            ICON_NAME: 'trash-alt',\n            STYLE_NAME: 'light',\n        },\n        LEFT: {\n            ICON_NAME: 'long-arrow-left',\n            STYLE_NAME: 'light',\n        },\n        LIGHT_MODE: {\n            ICON_NAME: 'sun',\n            STYLE_NAME: 'light',\n        },\n        LIST_MANAGER: {\n            ICON_NAME: 'book',\n            STYLE_NAME: 'light',\n        },\n        RIGHT: {\n            ICON_NAME: 'long-arrow-right',\n            STYLE_NAME: 'light',\n        },\n        TASK_DETAILS: {\n            ICON_NAME: 'thumbtack',\n            STYLE_NAME: 'light',\n        },\n    },\n};\n\nObject.keys(ICON_PACKS.FONT_AWESOME).forEach(key => {\n    const { ICON_NAME, STYLE_NAME } = ICON_PACKS.FONT_AWESOME[key];\n    ICON_PACKS.FONT_AWESOME[key] = (\n        <Icon iconName={ICON_NAME} styleName={STYLE_NAME} />\n    );\n});\n\nconst ICONS = ICON_PACKS.FONT_AWESOME;\n\nICONS.TASK_DEFAULT = '📌';\n\nexport { ICONS };\n","export default [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\n","import styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from './tokens';\n\nexport default styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = 0,\n        marginX = 0,\n        marginY = 0,\n        padding = 0,\n        paddingX = 0,\n        paddingY = 0,\n        theme,\n    }) => `\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        isFlexible = false,\n        justify = 'stretch',\n        spacing = 0,\n        wrapped = false,\n    }) => `\n        align-items: ${align};\n        display: flex;\n        flex-direction: ${direction};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        flex-wrap: ${wrapped ? 'wrap' : 'nowrap'}; \n        justify-content: ${justify};\n        width: 100%;\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_WIDTH,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})(\n    ({ theme }) => `\n        height: calc(100vh - ${GRID_UNIT});\n        overflow: auto;\n        position: relative;\n        ${UNIFIED_TRANSITION};\n        \n        & > * {\n            align-self: stretch;\n        }\n    `\n);\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        border-bottom:\n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({ children, label, ...otherProps }) => (\n    <Container>\n        <ColumnHeader>{label}</ColumnHeader>\n        <ContentContainer {...otherProps}>{children}</ContentContainer>\n    </Container>\n);\n\nexport const PrimaryAppColumn = styled(AppColumn)(\n    ({ theme }) => `\n        box-shadow: 0 0 10px 10px ${COLORS[theme.name].SHADOW};\n        border-left: ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        border-right: \n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        overflow: unset;\n        z-index: 11;\n    `\n);\n\nexport const SecondaryAppColumn = styled(AppColumn)(\n    ({ isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        flex-grow: 1;\n        overflow: auto;\n        position: relative;\n        \n        &:before {\n            box-shadow: ${\n                isTargetedForDrop\n                    ? `0 0 0 5px ${COLORS[theme.name].TASK_BORDER_HOVER} inset`\n                    : 'initial'\n            };\n            bottom: 0;\n            content: '';\n            left: 0;\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 1000;\n        }\n    `\n);\n\nexport default AppColumn;\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport { BORDER_RADIUS, COLORS, UNIFIED_TRANSITION } from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    as: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].PRIMARY};\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].TEXT};\n        cursor: pointer;\n        transform: translateY(0);\n        ${UNIFIED_TRANSITION};\n        transition-property: border, color;\n        \n        &:focus,\n        &:hover {\n            border-color: ${COLORS[theme.name].PRIMARY};\n        }\n        &:active {\n            transform: translateY(2px);\n        }\n    `\n);\n\nexport const GhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        border: 2px dashed ${COLORS[theme.name].BORDER_FADED};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n            border-style: solid;\n        }\n    `\n);\n\nexport const ToggleButton = styled(Button)(\n    ({ isActive, theme }) => `\n        background: unset;\n        border: 2px solid transparent;\n        width: auto;\n    `\n);\n\nexport default Button;\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, COLORS, FONTS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: ${FONTS.NORMAL.LINE_HEIGHT};\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: ${FONTS.NORMAL.SIZE};\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        ::placeholder {\n            color: ${COLORS[theme.name].PRIMARY};\n            opacity: 1;\n        }\n        ::selection {\n            color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport {\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Transition = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isTransitioning }) => `\n        opacity: ${isTransitioning ? 0 : 1};\n        ${UNIFIED_TRANSITION};\n        transition-duration: ${ROUTE_TRANSITION_ANIMATION_DURATION / 2}ms;\n    `\n);\n\nexport default Transition;\n","import { useEffect } from 'react';\nimport mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nconst buildKeyboardShortcutHandler = (keyMap, scopedToElementRef) => evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    const currentKeySequence = uniq(keysDown)\n        .map(keyDown => keyDown.toLowerCase())\n        .sort()\n        .join('+');\n\n    mapKeys(keyMap, (handler, sequence) => {\n        const shortcutKeySequence = sequence\n            .split('+')\n            .map(key => key.trim().toLowerCase())\n            .sort()\n            .join('+');\n\n        if (currentKeySequence === shortcutKeySequence) {\n            const scopedElement = scopedToElementRef.current;\n            const scopedToAnInput = scopedElement && isInput(scopedElement);\n            const elementWithFocusIsAnInput = isInput(document.activeElement);\n\n            if (\n                (scopedElement && evt.target === scopedElement) ||\n                scopedToAnInput\n            ) {\n                evt.stopPropagation();\n            }\n\n            if (!scopedToAnInput && elementWithFocusIsAnInput) {\n                return false;\n            }\n\n            return handler(evt);\n        }\n    });\n};\n\nconst useKeyboardShortcuts = (keyMap, targetElementRef = { current: null }) => {\n    useEffect(() => {\n        const onKeyDown = buildKeyboardShortcutHandler(\n            keyMap,\n            targetElementRef\n        );\n\n        document.addEventListener('keydown', onKeyDown);\n\n        return () => document.removeEventListener('keydown', onKeyDown);\n    }, [keyMap, targetElementRef]);\n};\n\nexport default useKeyboardShortcuts;\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditing, theme, tracingElementStyles = () => {} }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border:\n                ${\n                    isEditing\n                        ? 'none'\n                        : `2px dashed ${COLORS[theme.name].BORDER}`\n                };\n            box-shadow:\n                ${\n                    isEditing\n                        ? `0 0 0 2px ${COLORS[theme.name].PRIMARY}`\n                        : `0 0 0 0 ${COLORS[theme.name].PRIMARY}`\n                };\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.25 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.25 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n            ${tracingElementStyles(theme)}\n        }\n        \n        &:focus,\n        &:hover {\n            &:before {\n                opacity: 1;\n            }\n        }\n    `\n);\n\nconst StyledTextarea = styled.textarea`\n    display: block;\n    height: 100%;\n    width: 100%;\n`;\n\nconst Canvas = styled(Box)(\n    ({ isEmpty }) => `\n        opacity: ${isEmpty ? 0.6 : 1};\n    `\n);\n\nconst EditInPlace = ({\n    doubleClickToEdit = false,\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    tracingElementStyles = () => {},\n    value = '',\n    canvasStyles = {},\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const containerElementRef = useRef(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = useCallback(() => {\n        if (!isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    }, [isEditing, setBufferedValue, setIsEditing, value]);\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [handleClick, isRemotelyActivated]);\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const keyMap = useMemo(() => {\n        const saveAndClose = () => {\n            onSave(bufferedValue);\n            setIsEditing(false);\n        };\n\n        const close = () => {\n            setBufferedValue(value);\n            setIsEditing(false);\n        };\n\n        return {\n            'cmd + escape': close,\n            'shift + escape': close,\n            'cmd + enter': saveAndClose,\n            'shift + enter': saveAndClose,\n            'escape': saveAndClose,\n            'enter': evt => {\n                if (\n                    evt.target.tagName.toLowerCase() === 'textarea' &&\n                    isSingleLine\n                ) {\n                    saveAndClose();\n                    evt.preventDefault();\n                    return false;\n                }\n\n                if (evt.target === containerElementRef.current) {\n                    evt.preventDefault();\n                    handleClick();\n                }\n            },\n        };\n    }, [bufferedValue, handleClick, onSave, isSingleLine, value]);\n\n    useKeyboardShortcuts(keyMap, inputRef);\n\n    return (\n        <Container\n            isEditing={isEditing}\n            ref={containerElementRef}\n            tabIndex={0}\n            tracingElementStyles={tracingElementStyles}\n            onClick={!doubleClickToEdit ? handleClick : null}\n            onDoubleClick={doubleClickToEdit ? handleClick : null}\n            {...otherProps}\n        >\n            <Canvas isEmpty={isEmpty} style={{ ...canvasStyles }}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <StyledTextarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                height: `${measuringElementHeight}px`,\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Canvas>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import { useState } from 'react';\n\nconst useDrag = dataTypes => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        Object.keys(dataTypes).map(dataType => {\n            evt.dataTransfer.setData(dataType, dataTypes[dataType]);\n            return dataType;\n        });\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import { useRef, useState } from 'react';\n\nconst useDrop = dataTypeHandlers => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        Object.keys(dataTypeHandlers).map(dataType => {\n            const data = evt.dataTransfer.getData(dataType);\n            const payload =\n                data.length === 0\n                    ? null\n                    : isNaN(data)\n                    ? data\n                    : parseFloat(data);\n\n            if (payload !== null) {\n                const dataTypeHandler = dataTypeHandlers[dataType];\n                dataTypeHandler(payload, evt);\n            }\n\n            return dataType;\n        });\n\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","export default str => parseInt(str, 10);\n","import React, { useCallback, useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst StyledListCard = styled(FlexBox).attrs({\n    align: 'flex-start',\n    direction: 'column',\n    justify: 'space-between',\n    spacing: 0.5,\n})(\n    ({ isActive, isTargetedForDrop, theme }) => `\n        background-color: ${\n            COLORS[theme.name][\n                isActive ? 'HIGH_CONTRAST_BACKGROUND' : 'PRIMARY_FADED'\n            ]\n        };\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 2px ${isActive ? COLORS[theme.name].SHADED : 'transparent'},\n            0 0 0 4px ${\n                isActive\n                    ? COLORS[theme.name][\n                          isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                      ]\n                    : 'transparent'\n            };\n        color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        cursor: pointer;\n        height: ${LIST_CARD_HEIGHT};\n        margin-bottom: ${LIST_CARD_SPACING};\n        margin-left: ${LIST_CARD_SPACING};\n        overflow: hidden;\n        position: relative;\n        transform: scale(${isTargetedForDrop ? 1.1 : 1});\n        width: ${LIST_CARD_WIDTH};\n        ${UNIFIED_TRANSITION};\n        \n        &:nth-child(3n+4) {\n            margin-left: 0;\n        }\n        \n        &:active,\n        &:focus,\n        &:hover {\n            box-shadow:\n                0 0 0 2px ${COLORS[theme.name].SHADED},\n                0 0 0 4px ${\n                    COLORS[theme.name][\n                        isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                    ]\n                };\n        }\n    `\n);\nexport const ListCardTaskIconContainer = styled(FlexBox).attrs({\n    justify: 'flex-start',\n    paddingX: 0.25,\n    paddingY: 0.25,\n    wrapped: true,\n})(\n    ({ isActive }) => `\n        background-color: rgba(255, 255, 255, ${isActive ? 0.75 : 0.25});\n        border-radius: ${BORDER_RADIUS};\n        border-top-right-radius: 0;\n        border-top-left-radius: 0;\n        margin: 5px;\n        width: calc(100% - (5px * 2));\n    `\n);\nexport const ListCard = ({ appActions, children, listId, ...otherProps }) => {\n    const { onUpdateTask } = appActions;\n    const listCardElementRef = useRef(null);\n\n    const [dragProps] = useDrag({ 'list-id': listId });\n\n    const [dropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const targetListId = toInt(evt.currentTarget.dataset.listId);\n            if (targetListId) {\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    list_id: targetListId,\n                });\n            }\n        },\n    });\n\n    const triggerClick = useCallback(evt => {\n        evt.preventDefault();\n        evt.target.click();\n    }, []);\n\n    const keyMap = useMemo(\n        () => ({\n            enter: triggerClick,\n            space: triggerClick,\n        }),\n        [triggerClick]\n    );\n\n    useKeyboardShortcuts(keyMap, listCardElementRef);\n\n    return (\n        <StyledListCard\n            data-list-id={listId}\n            ref={listCardElementRef}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_BETWEEN_LISTS}\n            {...dragProps}\n            {...dropProps}\n            {...otherProps}\n        >\n            {children}\n        </StyledListCard>\n    );\n};\nexport const GhostListCard = styled(GhostButton).attrs({\n    align: 'center',\n    justify: 'center',\n})`\n    height: ${LIST_CARD_HEIGHT};\n    margin-bottom: ${LIST_CARD_SPACING};\n    width: ${LIST_CARD_WIDTH};\n`;\n","import sortBy from 'lodash/sortBy';\nimport React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, COPY, GRID_UNIT } from './atoms/tokens';\nimport EditInPlace from './EditInPlace';\nimport { GhostListCard, ListCard, ListCardTaskIconContainer } from './ListCard';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n    justify: 'flex-start',\n    padding: 1,\n    wrapped: true,\n})(\n    ({ theme }) => `\n        align-content: flex-start;\n        background-color: ${COLORS[theme.name].SHADED};\n        height: 100%;\n        overflow: auto;\n        padding-bottom: calc(${GRID_UNIT} * 1.5);\n    `\n);\n\nconst ListManager = ({ appActions, appData }) => {\n    const { onCreateList, onSelectList, onUpdateList } = appActions;\n    const { incompleteTasks, isCreatingList, lists, selectedListId } = appData;\n    const unarchivedLists = lists.filter(list => !list.isArchived);\n    const sortedLists = sortBy(unarchivedLists, [list => list.label]);\n\n    const tracingElementStyles = theme => `\n        border-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT}\n    `;\n\n    return (\n        <Container>\n            <GhostListCard onClick={() => onCreateList()}>\n                {COPY.CREATE_LIST_LABEL}\n            </GhostListCard>\n            {sortedLists.map(list => {\n                const isActive = selectedListId === list.id;\n                const tasksInList = incompleteTasks.filter(\n                    task => task.list_id === list.id\n                );\n\n                return (\n                    <ListCard\n                        key={list.id}\n                        appActions={appActions}\n                        isActive={isActive}\n                        listId={list.id}\n                        onClick={() => onSelectList(list.id)}\n                    >\n                        <EditInPlace\n                            isRemotelyActivated={\n                                isCreatingList && selectedListId === list.id\n                            }\n                            marginX={0.75}\n                            marginY={0.5}\n                            style={{\n                                alignSelf: 'stretch',\n                                flexGrow: 0,\n                                flexShrink: 0,\n                            }}\n                            tracingElementStyles={tracingElementStyles}\n                            value={list.label}\n                            onSave={newLabel => {\n                                onUpdateList(list.id, { label: newLabel });\n                            }}\n                        />\n                        {tasksInList.length >= 1 && (\n                            <ListCardTaskIconContainer isActive={isActive}>\n                                {tasksInList.map(task => (\n                                    <span key={task.id}>{task.icon}</span>\n                                ))}\n                            </ListCardTaskIconContainer>\n                        )}\n                    </ListCard>\n                );\n            })}\n        </Container>\n    );\n};\n\nexport default ListManager;\n","import React from 'react';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\n\nconst TaskListToggleButton = ({ isSidebarOpen, onChangeIsSidebarOpen }) => (\n    <ToggleButton\n        isActive={isSidebarOpen}\n        title={COPY.TIPS.TOGGLE_TASK_LIST}\n        onClick={() => onChangeIsSidebarOpen(!isSidebarOpen)}\n    >\n        {isSidebarOpen ? ICONS.LEFT : ICONS.RIGHT}\n    </ToggleButton>\n);\n\nexport default TaskListToggleButton;\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'space-between',\n    paddingX: 0.5,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React, { useEffect, useState } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport { SecondaryAppColumn } from './AppColumn';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\nimport SidebarToggleButton from './TaskListToggleButton';\nimport ToolBar from './ToolBar';\n\nconst Sidebar = ({ appActions, appData, children, ...otherProps }) => {\n    const { onChangeIsSidebarOpen, onChangeTheme, onUpdateTask } = appActions;\n\n    const {\n        isShowingTrashContents,\n        isSidebarOpen,\n        lists,\n        selectedListId,\n        theme,\n    } = appData;\n\n    const [isTaskListForcedOpen, setIsTaskListForcedOpen] = useState(false);\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const [sidebarDropProps] = useDrop({\n        'task-id': taskId => {\n            onUpdateTask(taskId, {\n                list_id: selectedListId,\n                scheduled: false,\n            });\n        },\n    });\n\n    useEffect(() => {\n        if (!isSidebarOpen && sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(true);\n            onChangeIsSidebarOpen(true);\n            return;\n        }\n\n        if (isTaskListForcedOpen && !sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(false);\n            onChangeIsSidebarOpen(false);\n        }\n    }, [\n        sidebarDropProps.isTargetedForDrop,\n        isTaskListForcedOpen,\n        isSidebarOpen,\n        setIsTaskListForcedOpen,\n        onChangeIsSidebarOpen,\n    ]);\n\n    return (\n        <SecondaryAppColumn\n            label={\n                !isSidebarOpen\n                    ? ''\n                    : isShowingTrashContents\n                    ? COPY.LABEL_FOR_TRASH\n                    : selectedList.label\n            }\n            {...sidebarDropProps}\n            {...otherProps}\n        >\n            {!isSidebarOpen ? (\n                <SidebarToggleButton\n                    isSidebarOpen={isSidebarOpen}\n                    onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                />\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={COPY.TIPS.TOGGLE_DARK_MODE}\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT'\n                                ? ICONS.DARK_MODE\n                                : ICONS.LIGHT_MODE}\n                        </ToggleButton>\n                        <SidebarToggleButton\n                            isSidebarOpen={isSidebarOpen}\n                            onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                        />\n                    </ToolBar>\n\n                    {children}\n                </>\n            )}\n        </SecondaryAppColumn>\n    );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0.75};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map((option, optionIndex) => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(\n                              renderOption(option, optionIndex),\n                              optionIndex\n                          )\n                        : renderOption(option, optionIndex)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    ICONS,\n    DURATION_OPTIONS,\n    FONTS,\n    BORDER_WIDTH,\n} from './atoms/tokens';\n\nconst TaskHeader = styled(FlexBox).attrs({\n    as: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: ${FONTS.LARGE.SIZE};\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-self: stretch;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst DurationOptionBar = styled(OptionBar)(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        border-top: ${BORDER_WIDTH} solid ${COLORS[theme.name].BACKGROUND};\n    `\n);\n\nconst TaskDetails = ({ appActions = {}, appData = {} }) => {\n    const { onUpdateTask } = appActions;\n    const { isCreatingTask, selectedTaskId, tasks } = appData;\n    const activeTask = tasks.find(task => task.id === selectedTaskId) || {};\n    const { icon, id, label, notes, scheduled_minutes } = activeTask;\n    const isEmpty = !activeTask.id;\n\n    const handleUpdateTask = useCallback(\n        (field, value) => onUpdateTask(id, { [field]: value }),\n        [id, onUpdateTask]\n    );\n\n    const handleSaveDuration = useCallback(\n        newDuration => handleUpdateTask('scheduled_minutes', newDuration),\n        [handleUpdateTask]\n    );\n\n    const handleSaveIcon = useCallback(\n        newNotes => handleUpdateTask('icon', newNotes),\n        [handleUpdateTask]\n    );\n\n    const handleSaveLabel = useCallback(\n        newLabel => handleUpdateTask('label', newLabel),\n        [handleUpdateTask]\n    );\n\n    const handleSaveNotes = useCallback(\n        newNotes => handleUpdateTask('notes', newNotes),\n        [handleUpdateTask]\n    );\n\n    return (\n        !isEmpty && (\n            <>\n                <TaskHeader>\n                    <TaskHeaderLabel>\n                        <EditInPlace\n                            isRemotelyActivated={isCreatingTask}\n                            placeholder={COPY.EMPTY_LABEL}\n                            value={label}\n                            onSave={handleSaveLabel}\n                        />\n                    </TaskHeaderLabel>\n                    <TaskHeaderIcon>\n                        <EditInPlace\n                            placeholder={ICONS.TASK_DEFAULT}\n                            value={icon}\n                            onSave={handleSaveIcon}\n                        />\n                    </TaskHeaderIcon>\n                </TaskHeader>\n\n                <DurationOptionBar\n                    options={DURATION_OPTIONS}\n                    renderSelectedOption={option => <span>{option} mins</span>}\n                    selectedOption={scheduled_minutes}\n                    title={COPY.TIPS.SETTING_DURATION}\n                    onChange={handleSaveDuration}\n                />\n\n                <EditInPlace\n                    isFlexible\n                    isMultiLine\n                    margin={1}\n                    placeholder={COPY.EMPTY_NOTES}\n                    render={rawNotes => (\n                        <div\n                            className=\"markdown\"\n                            dangerouslySetInnerHTML={{\n                                __html: marked(rawNotes),\n                            }}\n                        />\n                    )}\n                    canvasStyles={{\n                        bottom: 0,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                    value={notes}\n                    onSave={handleSaveNotes}\n                />\n            </>\n        )\n    );\n};\n\nexport default TaskDetails;\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 ${isActive ? 2 : 1}px\n            ${\n                COLORS[theme.name][\n                    isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER'\n                ]\n            };\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        width: 100%;\n        z-index: ${isActive ? 100 : 10};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n            \n        &::selection {\n            /*color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};*/\n            color: purple;\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        }\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${\n                COLORS[theme.name][\n                    isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                ]\n            };\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].TASK_BORDER_ACTIVE};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${\n                COLORS[theme.name].TASK_BORDER_ACTIVE\n            } inset;\n        }\n        \n        ${CardLabel} {\n            color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n            min-height: ${minutesToHeight(Math.min(30, duration))};\n        }\n\n        ${CardIcon} {\n            height: ${minutesToHeight(Math.min(30, duration))};\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'center',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ duration, theme }) => `\n        font-size: ${duration <= 15 ? FONTS.NORMAL.SIZE : FONTS.LARGE.SIZE};\n        width: auto;\n    `\n);\n\nconst TaskCard = ({ appActions, appData, isActive, task, ...otherProps }) => {\n    const { onImmediatelySelectTask, onTransitionToTask } = appActions;\n    const { isShowingListManager } = appData;\n    const { icon, id, label, scheduled_minutes } = task;\n    const [dragProps] = useDrag({ 'task-id': id });\n\n    const handleClick = () => {\n        if (isShowingListManager) {\n            onImmediatelySelectTask(id);\n            return;\n        }\n\n        onTransitionToTask(id);\n    };\n\n    return (\n        <Container\n            data-task-id={id}\n            duration={scheduled_minutes}\n            isActive={isActive}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <CardLabel>{label}</CardLabel>\n            <CardIcon duration={scheduled_minutes}>{icon}</CardIcon>\n        </Container>\n    );\n};\n\nexport default memo(TaskCard);\n","import React, { memo } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport TaskCard from './TaskCard';\n\nconst TaskList = ({ appActions, appData, ...otherProps }) => {\n    const { onChangeTaskPosition, onCreateTask } = appActions;\n\n    const { incompleteTasks, lists, selectedListId, selectedTaskId } = appData;\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const unscheduledTasks = incompleteTasks.filter(\n        task =>\n            !task.scheduled &&\n            task.list_id === selectedListId &&\n            !selectedList.isArchived\n    );\n\n    const [taskCardDropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n            const droppedOnTaskIndex = appData.tasks.findIndex(\n                task => task.id === droppedOnTaskId\n            );\n            onChangeTaskPosition(taskId, droppedOnTaskIndex);\n        },\n    });\n\n    return (\n        <FlexBox\n            isFlexible\n            justify=\"flex-start\"\n            direction=\"column\"\n            spacing={0.5}\n            padding={1}\n            {...otherProps}\n        >\n            <GhostButton\n                style={{\n                    height: minutesToHeight(30),\n                }}\n                title={COPY.TIPS.CREATE_NEW_TASK}\n                onClick={() => onCreateTask()}\n            >\n                {COPY.CREATE_TASK_LABEL}\n            </GhostButton>\n            {unscheduledTasks.map(task => (\n                <TaskCard\n                    key={task.id}\n                    appActions={appActions}\n                    appData={appData}\n                    isActive={selectedTaskId === task.id}\n                    task={task}\n                    {...taskCardDropProps}\n                />\n            ))}\n        </FlexBox>\n    );\n};\n\nexport default memo(TaskList);\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop({\n            'task-id': taskId =>\n                onUpdateTask(taskId, {\n                    scheduled: true,\n                    scheduled_time: newTime,\n                }),\n        });\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COLORS, COPY, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: COPY.LABEL_FOR_TIMELINE,\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].TASK_BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${COLORS[theme.name].BORDER};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            opacity: ${isFaded ? 0.5 : 1};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop({ 'task-id': () => {} });\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst DROP_ZONE_SIZE = `calc(${GRID_UNIT} * 4)`;\n\nconst pulsingAnimation = ({ from, to }) => keyframes`\n    0% {\n        transform: scale(${from});\n    }\n    100% {\n        transform: scale(${to});\n    }\n`;\n\nconst AnimatedContainer = styled(FlexBox)(\n    ({ isDraggingTask, isTargetedForDrop }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop\n            ? pulsingAnimation({ from: 1.6, to: 2.4 })\n            : isDraggingTask\n            ? pulsingAnimation({ from: 1, to: 1.6 })\n            : 'unset'};\n        animation-timing-function: ease-in-out;\n        bottom: 0;\n        height: ${DROP_ZONE_SIZE};\n        position: fixed;\n        right: 0;\n        transform-origin: bottom right;\n        transform: scale(${isDraggingTask ? 1.5 : 1});\n        width: ${DROP_ZONE_SIZE};\n        z-index: 1000;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst TrashDropZone = styled(AnimatedContainer)(\n    ({ isDraggingTask }) => `\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n    `\n);\n\nconst TrashIconContainer = styled(AnimatedContainer).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 1,\n})(\n    ({ isDraggingTask, isShowingTrashContents, isTargetedForDrop, theme }) => `\n        color: ${\n            isTargetedForDrop\n                ? '#FF0000'\n                : COLORS[theme.name][\n                      isDraggingTask || isShowingTrashContents\n                          ? 'PRIMARY'\n                          : 'TEXT_FADED'\n                  ]\n        };\n        cursor: pointer;\n        font-size: 3rem;\n        \n        &:hover {\n            color: ${COLORS[theme.name].PRIMARY};\n        }\n    `\n);\n\nconst Trash = ({ appActions, appData, ...otherProps }) => {\n    const {\n        onChangeIsShowingTrashContents,\n        onDeleteTask,\n        onSelectList,\n        onUpdateList,\n    } = appActions;\n\n    const {\n        isDraggingTask,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n    } = appData;\n\n    const [dropProps] = useDrop({\n        'list-id': listId => {\n            if (selectedListId === listId) {\n                const firstUnarchivedList = lists.find(\n                    list => list.id !== listId && !list.isArchived\n                );\n\n                if (firstUnarchivedList) {\n                    onSelectList(firstUnarchivedList.id);\n                }\n            }\n\n            onUpdateList(listId, {\n                isArchived: true,\n            });\n        },\n        'task-id': onDeleteTask,\n    });\n\n    const handleClick = () =>\n        onChangeIsShowingTrashContents(!isShowingTrashContents);\n\n    return (\n        <>\n            <TrashIconContainer\n                isDraggingTask={isDraggingTask}\n                isShowingTrashContents={isShowingTrashContents}\n                isTargetedForDrop={dropProps.isTargetedForDrop}\n                title={COPY.TIPS.DELETE_TASK}\n                onClick={handleClick}\n            >\n                {ICONS.END_ZONE}\n            </TrashIconContainer>\n            <TrashDropZone\n                isDraggingTask={isDraggingTask}\n                {...dropProps}\n                {...otherProps}\n            />\n        </>\n    );\n};\n\nexport default Trash;\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport TaskCard from './TaskCard';\n\nconst TrashContents = ({ appActions, appData, ...otherProps }) => {\n    const { selectedTaskId, tasks } = appData;\n\n    const deletedTasks = tasks.filter(task => task.isComplete);\n\n    const hasDeletedTasks = deletedTasks.length;\n\n    return (\n        <>\n            {!hasDeletedTasks && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASH}\n                </FlexBox>\n            )}\n            {!!hasDeletedTasks && (\n                <FlexBox\n                    isFlexible\n                    justify=\"flex-start\"\n                    direction=\"column\"\n                    spacing={0.5}\n                    padding={1}\n                    {...otherProps}\n                >\n                    {deletedTasks.map(task => (\n                        <TaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isActive={selectedTaskId === task.id}\n                            task={task}\n                        />\n                    ))}\n                </FlexBox>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashContents);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                ![null, 'undefined'].includes(savedState)\n                    ? JSON.parse(savedState)\n                    : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import sample from 'lodash/sample';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { PrimaryAppColumn } from './components/AppColumn';\nimport { ToggleButton } from './components/atoms/Button';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport {\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    SIDEBAR_DEFAULT_WIDTH,\n    SIDEBAR_EXTENDED_WIDTH,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\nimport Transition from './components/atoms/Transition';\nimport ListManager from './components/ListManager';\nimport Sidebar from './components/Sidebar';\nimport TaskDetails from './components/TaskDetails';\nimport TaskList from './components/TaskList';\nimport Timeline from './components/Timeline';\nimport ToolBar from './components/ToolBar';\nimport CompletedTasksDropZone from './components/Trash';\nimport TrashContents from './components/TrashContents';\nimport useKeyboardShortcuts from './hooks/useKeyboardShortcuts';\nimport usePersistentState from './hooks/usePersistentState';\n\nfunction App() {\n    const [isShowingSidebar, setIsShowingSidebar] = usePersistentState(\n        'is-showing-sidebar',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        INITIAL_SELECTED_LIST_ID\n    );\n    const [isShowingListManager, setIsShowingListManager] = usePersistentState(\n        'is-showing-list-manager',\n        true\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        INITIAL_SELECTED_TASK_ID\n    );\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingList, setIsCreatingList] = useState(false);\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const [isShowingTrashContents, setIsShowingTrashContents] = useState(false);\n    const [isTransitioning, setIsTransitioning] = useState(false);\n    const unarchivedLists = useMemo(\n        () => lists.filter(list => !list.isArchived),\n        [lists]\n    );\n    const currentListIndex = unarchivedLists.findIndex(\n        list => list.id === selectedListId\n    );\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n    const hasIncompleteTasks = incompleteTasks.length;\n    const hasUnarchivedList = lists.filter(list => !list.isArchived).length;\n    const isSidebarOpen = hasUnarchivedList && isShowingSidebar;\n\n    useEffect(() => {\n        const handleDragOver = () => setIsDraggingTask(true);\n        const handleDragEnd = () => setIsDraggingTask(false);\n        document.addEventListener('dragover', handleDragOver);\n        document.addEventListener('dragend', handleDragEnd);\n        document.addEventListener('drop', handleDragEnd);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n            document.removeEventListener('dragend', handleDragEnd);\n            document.removeEventListener('drop', handleDragEnd);\n        };\n    }, []);\n\n    const onCreateList = useCallback(\n        (overrides = {}) => {\n            const newListId = Date.now();\n\n            setLists(currentLists =>\n                currentLists.concat([\n                    {\n                        id: newListId,\n                        isArchived: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_LIST_LABEL\n                        }`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedListId(newListId);\n\n            setIsCreatingList(true);\n\n            setTimeout(() => setIsCreatingList(false), 1000);\n        },\n        [setSelectedListId, setLists]\n    );\n\n    const onUpdateList = useCallback(\n        (listId, updates) => {\n            setLists(prevLists =>\n                prevLists.map(list => {\n                    if (list.id === listId) {\n                        return {\n                            ...list,\n                            ...updates,\n                        };\n                    }\n                    return list;\n                })\n            );\n        },\n        [setLists]\n    );\n\n    const onSelectList = listId => {\n        setSelectedListId(listId);\n        setIsShowingSidebar(true);\n        setIsShowingTrashContents(false);\n    };\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                [\n                    {\n                        icon: ICONS.TASK_DEFAULT,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_TASK_LABEL\n                        }`,\n                        notes: COPY.NEW_TASK_NOTES,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ].concat(currentTasks)\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingTask(true);\n\n            setIsShowingListManager(false);\n        },\n        [selectedListId, setIsShowingListManager, setSelectedTaskId, setTasks]\n    );\n\n    useEffect(() => {\n        if (isCreatingTask) {\n            setIsShowingListManager(false);\n            const timer = setTimeout(() => setIsCreatingTask(false), 100);\n            return () => clearTimeout(timer);\n        }\n    }, [isCreatingTask, setIsCreatingTask, setIsShowingListManager]);\n\n    const transition = useCallback(\n        callback => {\n            setIsTransitioning(true);\n            setTimeout(() => {\n                callback();\n                setIsTransitioning(false);\n            }, ROUTE_TRANSITION_ANIMATION_DURATION / 2);\n        },\n        [setIsTransitioning]\n    );\n\n    const onImmediatelySelectTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            setSelectedTaskId(taskId);\n        },\n        [isShowingListManager, setIsShowingListManager, setSelectedTaskId]\n    );\n\n    const onTransitionToTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            transition(() => setSelectedTaskId(taskId));\n        },\n        [\n            isShowingListManager,\n            setIsShowingListManager,\n            setSelectedTaskId,\n            transition,\n        ]\n    );\n\n    const onChangeIsSidebarOpen = setIsShowingSidebar;\n\n    const onChangeIsShowingListManager = useCallback(\n        newIsShowingListManager => {\n            transition(() => {\n                setIsShowingListManager(newIsShowingListManager);\n\n                if (newIsShowingListManager) {\n                    setIsShowingSidebar(true);\n                }\n            });\n        },\n        [setIsShowingSidebar, setIsShowingListManager, transition]\n    );\n\n    const onChangeIsShowingTrashContents = useCallback(() => {\n        if (!isShowingSidebar) {\n            setIsShowingSidebar(true);\n        }\n        setIsShowingTrashContents(!isShowingTrashContents);\n    }, [\n        isShowingSidebar,\n        isShowingTrashContents,\n        setIsShowingSidebar,\n        setIsShowingTrashContents,\n    ]);\n\n    const onDeleteTask = useCallback(\n        taskId => {\n            if (selectedTaskId === taskId) {\n                const firstUnarchivedTask = tasks.find(\n                    task =>\n                        task.id !== taskId &&\n                        task.list_id === selectedListId &&\n                        !task.isComplete\n                );\n\n                if (firstUnarchivedTask) {\n                    onImmediatelySelectTask(firstUnarchivedTask.id);\n                } else {\n                    onChangeIsShowingListManager(true);\n                }\n            }\n\n            onUpdateTask(taskId, {\n                isComplete: true,\n            });\n        },\n        [\n            onChangeIsShowingListManager,\n            onImmediatelySelectTask,\n            onUpdateTask,\n            selectedListId,\n            tasks,\n            selectedTaskId,\n        ]\n    );\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const moveTaskToTimeline = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: true,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const moveTaskToTaskList = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: false,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const selectNextList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const nextListIndex = currentListIndex + 1;\n            const nextIndex =\n                nextListIndex > unarchivedLists.length - 1 ? 0 : nextListIndex;\n            setSelectedListId(unarchivedLists[nextIndex].id);\n            setIsShowingListManager(true);\n        },\n        [\n            currentListIndex,\n            setIsShowingListManager,\n            setSelectedListId,\n            unarchivedLists,\n        ]\n    );\n\n    const selectPreviousList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const prevListIndex = currentListIndex - 1;\n            const prevIndex =\n                prevListIndex < 0 ? unarchivedLists.length - 1 : prevListIndex;\n            setSelectedListId(unarchivedLists[prevIndex].id);\n            setIsShowingListManager(true);\n        },\n        [\n            currentListIndex,\n            setIsShowingListManager,\n            setSelectedListId,\n            unarchivedLists,\n        ]\n    );\n\n    const setTaskDuration = useCallback(\n        duration => {\n            onUpdateTask(selectedTaskId, {\n                scheduled_minutes: duration,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const toggleTaskListVisibility = useCallback(\n        evt => {\n            evt.preventDefault();\n\n            if (isShowingSidebar) {\n                setIsShowingTrashContents(false);\n            }\n\n            onChangeIsSidebarOpen(!isShowingSidebar);\n        },\n        [isShowingSidebar, onChangeIsSidebarOpen]\n    );\n\n    const toggleDarkMode = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n        },\n        [onChangeTheme, themeName]\n    );\n\n    const toggleIsEditingCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            setIsCreatingTask(true);\n        },\n        [setIsCreatingTask]\n    );\n\n    const toggleIsShowingListManager = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeIsShowingListManager(!isShowingListManager);\n        },\n        [isShowingListManager, onChangeIsShowingListManager]\n    );\n\n    const createNewTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onCreateTask();\n        },\n        [onCreateTask]\n    );\n\n    const deleteCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onDeleteTask(selectedTaskId);\n        },\n        [onDeleteTask, selectedTaskId]\n    );\n\n    const keyMap = useMemo(() => {\n        return {\n            ...[15, 30, 45, 60, 90, 120].reduce((acc, duration, index) => {\n                return {\n                    ...acc,\n                    [index + 1]: setTaskDuration.bind(null, duration),\n                };\n            }, {}),\n            'cmd + arrowRight': moveTaskToTimeline,\n            'cmd + arrowLeft': moveTaskToTaskList,\n            'cmd + shift + arrowRight': selectNextList,\n            'cmd + shift + arrowLeft': selectPreviousList,\n            'cmd + shift + ]': selectNextList,\n            'cmd + shift + [': selectPreviousList,\n            'b': toggleTaskListVisibility,\n            'd': toggleDarkMode,\n            'e': toggleIsEditingCurrentTask,\n            'l': toggleIsShowingListManager,\n            'n': createNewTask,\n            't': deleteCurrentTask,\n        };\n    }, [\n        createNewTask,\n        deleteCurrentTask,\n        moveTaskToTaskList,\n        moveTaskToTimeline,\n        selectNextList,\n        selectPreviousList,\n        setTaskDuration,\n        toggleTaskListVisibility,\n        toggleDarkMode,\n        toggleIsEditingCurrentTask,\n        toggleIsShowingListManager,\n    ]);\n\n    useKeyboardShortcuts(keyMap);\n\n    const appActions = {\n        onChangeIsSidebarOpen,\n        onChangeTaskPosition,\n        onChangeIsShowingListManager,\n        onChangeIsShowingTrashContents,\n        onChangeTheme,\n        onCreateList,\n        onCreateTask,\n        onDeleteTask,\n        onSelectList,\n        onImmediatelySelectTask,\n        onTransitionToTask,\n        onUpdateList,\n        onUpdateTask,\n    };\n\n    const appData = {\n        incompleteTasks,\n        isSidebarOpen,\n        isCreatingList,\n        isCreatingTask,\n        isDraggingTask,\n        isShowingListManager,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    const columnWidths = isSidebarOpen\n        ? {\n              sidebar: SIDEBAR_DEFAULT_WIDTH,\n              listManager: '40vw',\n              taskDetails: '40vw',\n              timeline: SIDEBAR_DEFAULT_WIDTH,\n          }\n        : {\n              sidebar: `calc(${GRID_UNIT} * 2)`,\n              listManager: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              taskDetails: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              timeline: SIDEBAR_EXTENDED_WIDTH,\n          };\n\n    return (\n        <ThemeProvider theme={{ name: themeName }}>\n            <GlobalStyle />\n            <CompletedTasksDropZone appActions={appActions} appData={appData} />\n            <FlexBox align=\"stretch\">\n                <Sidebar appActions={appActions} appData={appData}>\n                    {isShowingTrashContents ? (\n                        <TrashContents\n                            appActions={appActions}\n                            appData={appData}\n                        />\n                    ) : (\n                        <TaskList appActions={appActions} appData={appData} />\n                    )}\n                </Sidebar>\n\n                <PrimaryAppColumn\n                    label={\n                        isShowingListManager\n                            ? COPY.LABEL_FOR_LIST_MANAGER\n                            : COPY.LABEL_FOR_TASK_DETAILS\n                    }\n                    style={{\n                        width: isShowingListManager\n                            ? columnWidths.listManager\n                            : columnWidths.taskDetails,\n                    }}\n                >\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={isShowingListManager}\n                            title={COPY.TIPS.TOGGLE_LIST_MANAGER}\n                            onClick={() =>\n                                onChangeIsShowingListManager(\n                                    !isShowingListManager\n                                )\n                            }\n                        >\n                            {isShowingListManager ? (\n                                <FlexBox spacing={0.25}>\n                                    {ICONS.TASK_DETAILS}\n                                    <span>{COPY.LABEL_FOR_TASK_DETAILS}</span>\n                                </FlexBox>\n                            ) : (\n                                <FlexBox spacing={0.25}>\n                                    {ICONS.LIST_MANAGER}\n                                    <span>{COPY.LABEL_FOR_LIST_MANAGER}</span>\n                                </FlexBox>\n                            )}\n                        </ToggleButton>\n                    </ToolBar>\n                    <Transition isTransitioning={isTransitioning}>\n                        {isShowingListManager ? (\n                            <ListManager\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : (\n                            <TaskDetails\n                                appActions={appActions}\n                                appData={appData}\n                                style={{\n                                    opacity: hasIncompleteTasks ? 1 : 0.25,\n                                }}\n                            />\n                        )}\n                    </Transition>\n                </PrimaryAppColumn>\n\n                <Timeline\n                    appActions={appActions}\n                    appData={appData}\n                    selectedTaskId={selectedTaskId}\n                    from={TIMELINE_FROM}\n                    style={{\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                        width: columnWidths.timeline,\n                        pointerEvents: hasIncompleteTasks ? 'all' : 'none',\n                    }}\n                    tasks={incompleteTasks}\n                    to={TIMELINE_TO}\n                />\n            </FlexBox>\n        </ThemeProvider>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}