{"version":3,"sources":["components/atoms/tokens.js","components/atoms/copy/motivational-descriptors.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","components/atoms/Button.js","components/atoms/Transition.js","hooks/useDrop.js","utils/minutesToHeight.js","utils/toInt.js","hooks/useDrag.js","components/TaskCard.js","components/ToolBar.js","components/Backlog.js","components/Trash.js","hooks/useKeyboardShortcuts.js","components/EditInPlace.js","components/ListCard.js","components/ListManager.js","components/OptionBar.js","components/TaskDetails.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/atoms/GlobalStyles.js","hooks/usePersistentState.js","index.js"],"names":["SIDEBAR_DEFAULT_WIDTH","SIDEBAR_EXTENDED_WIDTH","DURATION_OPTIONS","GRID_UNIT","FONTS","NORMAL","LINE_HEIGHT","SIZE","concat","LARGE","INITIAL_LISTS","id","isArchived","label","INITIAL_SELECTED_LIST_ID","INITIAL_TASKS","INITIAL_SELECTED_TASK_ID","LIST_CARD_HEIGHT","LIST_CARD_SPACING","LIST_CARD_WIDTH","MIN_SLOT_HEIGHT","ROUTE_TRANSITION_ANIMATION_DURATION","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","CREATE_NEW_TASK","DELETE_TASK","MOVE_TASK_BETWEEN_BACKLOG_AND_TIMELINE","MOVE_BETWEEN_LISTS","PREFIX","SETTING_DURATION","TOGGLE_BACKLOG","TOGGLE_DARK_MODE","TOGGLE_LIST_MANAGER","DARK","PRIMARY_FADED","darken","PRIMARY","BACKGROUND","HIGH_CONTRAST_BACKGROUND","HIGH_CONTRAST_TEXT","SHADED","lighten","SHADOW","transparentize","TEXT","setLightness","TEXT_FADED","TASK_BORDER","TASK_BORDER_HOVER","TASK_BORDER_ACTIVE","BORDER","BORDER_FADED","LIGHT","COLORS","ICONS","DARK_MODE","END_ZONE","LEFT","LIGHT_MODE","LIST_MANAGER","RIGHT","TASK_DEFAULT","TASK_DETAILS","styled","div","_ref","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","name","Box","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","_ref$wrapped","wrapped","Container","FlexBox","attrs","ContentContainer","_ref2","ColumnHeader","_ref3","AppColumn","_ref4","children","otherProps","Object","objectWithoutProperties","react_default","a","createElement","PrimaryAppColumn","_ref5","Button","as","GhostButton","ToggleButton","isActive","Transition","isTransitioning","useDrop","dataTypeHandlers","_useState","useState","_useState2","slicedToArray","isTargetedForDrop","setIsTargetedForDrop","targetedElement","useRef","droppable","onDragEnter","evt","preventDefault","current","target","onDragOver","onDragLeave","onDrop","keys","map","dataType","data","dataTransfer","getData","payload","length","isNaN","parseFloat","dataTypeHandler","minutesToHeight","minutes","toInt","str","parseInt","useDrag","dataTypes","isDragging","setIsDragging","draggable","onDragEnd","onDragStart","setData","duration","CardLabel","Math","min","CardIcon","memo","appActions","appData","task","onImmediatelySelectTask","onTransitionToTask","isShowingListManager","icon","scheduled_minutes","_useDrag","task-id","dragProps","TaskCard_Container","assign","data-task-id","tabIndex","title","TIPS","onClick","ToolBar","hasTasks","BacklogToggleButton","isBacklogVisible","onChangeIsShowingBacklog","CreateFirstTaskTip","_templateObject","onChangeTaskPosition","onChangeTheme","onCreateTask","onUpdateTask","incompleteTasks","lists","selectedListId","selectedTaskId","isBacklogForcedOpen","setIsBacklogForcedOpen","selectedList","find","list","unscheduledTasks","filter","scheduled","list_id","_useDrop","taskId","backlogDropProps","useEffect","_useDrop3","droppedOnTaskId","currentTarget","dataset","droppedOnTaskIndex","tasks","findIndex","taskCardDropProps","Backlog_Container","Fragment","components_ToolBar","Backlog_BacklogToggleButton","style","height","overflow","position","width","role","aria-label","CREATE_TASK_LABEL","components_TaskCard","key","DROP_ZONE_RADIUS","pulsingAnimation","from","to","keyframes","Trash_templateObject","isDraggingTask","css","_templateObject2","Trash","onDeleteTask","onSelectList","onUpdateList","list-id","listId","firstUnarchivedList","dropProps","Trash_Container","INPUT_TAG_NAMES","isInput","node","tagName","toLowerCase","includes","useKeyboardShortcuts","keyMap","targetElementRef","arguments","undefined","onKeyDown","scopedToElementRef","keysDown","ctrlKey","push","shiftKey","metaKey","currentKeySequence","uniq","keyDown","sort","join","mapKeys","handler","sequence","shortcutKeySequence","split","trim","scopedElement","scopedToAnInput","elementWithFocusIsAnInput","document","activeElement","stopPropagation","buildKeyboardShortcutHandler","addEventListener","removeEventListener","isEditing","_ref$tracingElementSt","tracingElementStyles","StyledTextarea","textarea","EditInPlace_templateObject","Canvas","EditInPlace_templateObject2","_ref2$doubleClickToEd","doubleClickToEdit","_ref2$isMultiLine","isMultiLine","_ref2$isRemotelyActiv","isRemotelyActivated","_ref2$placeholder","placeholder","_ref2$render","render","value","_ref2$tracingElementS","_ref2$value","_ref2$canvasStyles","canvasStyles","_ref2$onSave","onSave","setIsEditing","_useState3","_useState4","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","containerElementRef","inputRef","measuringElementRef","isEmpty","isSingleLine","select","focus","el","offsetHeight","handleClick","useCallback","useMemo","saveAndClose","close","cmd + escape","shift + escape","cmd + enter","shift + enter","escape","enter","EditInPlace_Container","ref","onDoubleClick","objectSpread2","pointerEvents","opacity","whiteSpace","disabled","rows","onBlur","onChange","StyledListCard","ListCardTaskIconContainer","ListCard","listCardElementRef","targetListId","triggerClick","click","space","data-list-id","GhostListCard","ListCard_templateObject","ListManager","onCreateList","isCreatingList","unarchivedLists","sortedLists","sortBy","ListManager_Container","CREATE_LIST_LABEL","tasksInList","ListCard_ListCard","components_EditInPlace","alignSelf","flexGrow","flexShrink","newLabel","OptionButton","isSelected","OptionBar","options","_ref2$renderOption","renderOption","option","_ref2$renderSelectedO","renderSelectedOption","selectedOption","optionIndex","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","TaskDetails_templateObject2","DurationOptionBar","TaskDetails","_ref3$appActions","_ref3$appData","isCreatingTask","activeTask","notes","handleUpdateTask","field","[object Object]","handleSaveDuration","newDuration","handleSaveIcon","newNotes","handleSaveLabel","handleSaveNotes","EMPTY_LABEL","EMPTY_NOTES","rawNotes","className","dangerouslySetInnerHTML","__html","marked","bottom","left","right","top","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","floor","scheduled_time","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","onClickTask","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","createGlobalStyle","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","isShowingBacklog","setIsShowingBacklog","_usePersistentState3","_usePersistentState4","setLists","_usePersistentState5","_usePersistentState6","setSelectedListId","_usePersistentState7","_usePersistentState8","setIsShowingListManager","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","setSelectedTaskId","_usePersistentState13","_usePersistentState14","themeName","setThemeName","setIsCreatingList","setIsCreatingTask","setIsDraggingTask","_useState7","_useState8","setIsTransitioning","currentListIndex","isComplete","hasIncompleteTasks","handleDragOver","handleDragEnd","overrides","newListId","currentLists","sample","MOTIVATIONAL_DESCRIPTORS","NEW_LIST_LABEL","setTimeout","updates","prevLists","prevTasks","newTaskId","currentTasks","NEW_TASK_LABEL","NEW_TASK_NOTES","clearTimeout","transition","callback","onChangeIsShowingListManager","newIsShowingListManager","firstUnarchivedTask","newIndex","tasksMinusTarget","slice","moveTaskToTimeline","moveTaskToBacklog","selectNextList","nextListIndex","nextIndex","selectPreviousList","prevListIndex","prevIndex","setTaskDuration","toggleBacklogVisibility","toggleDarkMode","toggleIsEditingCurrentTask","toggleIsShowingListManager","createNewTask","deleteCurrentTask","reduce","acc","index","bind","cmd + arrowRight","cmd + arrowLeft","cmd + shift + arrowRight","cmd + shift + arrowLeft","cmd + shift + ]","cmd + shift + [","b","d","e","l","n","t","columnWidths","backlog","listManager","taskDetails","timeline","styled_components_browser_esm","GlobalStyles","components_Trash","components_Timeline","LABEL_FOR_LIST_MANAGER","LABEL_FOR_TASK_DETAILS","atoms_Transition","components_ListManager","components_TaskDetails","components_Backlog","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.468ea231.chunk.js","sourcesContent":["import { darken, lighten, setLightness, transparentize } from 'polished';\nimport MOTIVATIONAL_DESCRIPTORS from './copy/motivational-descriptors';\n\nexport const SIDEBAR_DEFAULT_WIDTH = '30vw';\nexport const SIDEBAR_EXTENDED_WIDTH = '40vw';\nexport const BORDER_RADIUS = '3px';\nexport const BORDER_WIDTH = '1px';\nexport const BULLET_SIZE = '10px';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '30px';\nexport const FONTS = {\n    NORMAL: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.5)` },\n    LARGE: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.75)` },\n};\nexport const HOURS_PER_SCREEN = 10;\nexport const INITIAL_LISTS = [\n    {\n        id: 1,\n        isArchived: false,\n        label: 'Default List',\n    },\n];\nexport const INITIAL_SELECTED_LIST_ID = (INITIAL_LISTS[0] || {}).id;\nexport const INITIAL_TASKS = [];\nexport const INITIAL_SELECTED_TASK_ID = (INITIAL_TASKS[0] || {}).id;\nexport const LIST_CARD_HEIGHT = `calc(${GRID_UNIT} * 8)`;\nexport const LIST_CARD_SPACING = `calc(${GRID_UNIT} * 0.5)`;\nexport const LIST_CARD_WIDTH = `calc((100% - (${LIST_CARD_SPACING} * 2)) / 3)`;\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const ROUTE_TRANSITION_ANIMATION_DURATION = 250;\nexport const TIMELINE_FROM = '6:00';\nexport const TIMELINE_TO = '30:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.MOTIVATIONAL_DESCRIPTORS = MOTIVATIONAL_DESCRIPTORS;\nCOPY.EMPTY_LABEL = '...label?';\nCOPY.EMPTY_NOTES = '...notes?';\nCOPY.LABEL_FOR_LIST_MANAGER = 'Switch Lists';\nCOPY.LABEL_FOR_TASK_DETAILS = 'Back to Task';\nCOPY.CREATE_LIST_LABEL = 'Create List';\nCOPY.CREATE_TASK_LABEL = 'Create Task';\nCOPY.NEW_LIST_LABEL = 'New List';\nCOPY.NEW_TASK_LABEL = `New Task`;\nCOPY.NEW_TASK_NOTES = '';\nCOPY.TIPS = {\n    CREATE_NEW_TASK: 'Press [N] to create a [N]ew task in the current list',\n    DELETE_TASK: 'Press [T] to move the selected task to the [T]rash',\n    MOVE_TASK_BETWEEN_BACKLOG_AND_TIMELINE:\n        'Press [⌘]+[LEFT or RIGHT] to move the selected task to the Backlog or Timeline, respectively',\n    MOVE_BETWEEN_LISTS:\n        'Press [⌘]+[SHIFT]+[LEFT or RIGHT] to move between your lists',\n    PREFIX: 'Tip ☝️: ',\n    SETTING_DURATION:\n        'Press keys [1] to [6] to quickly adjust your time estimate for the selected task',\n    TOGGLE_BACKLOG:\n        'Press [B] to show / hide the side[B]ar of unscheduled tasks',\n    TOGGLE_DARK_MODE: 'Press [D] to toggle [D]ark Mode',\n    TOGGLE_LIST_MANAGER: 'Press [L] to see your [L]ists',\n};\n\nexport { COPY };\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = PRIMARY;\nDARK.PRIMARY_FADED = darken(0.2, DARK.PRIMARY);\nDARK.BACKGROUND = '#00010F';\nDARK.HIGH_CONTRAST_BACKGROUND = DARK.PRIMARY;\nDARK.HIGH_CONTRAST_TEXT = '#FFFFFF';\nDARK.SHADED = lighten(0.15, DARK.BACKGROUND);\nDARK.SHADOW = transparentize(0.95, DARK.BACKGROUND);\nDARK.TEXT = setLightness(0.85, DARK.PRIMARY);\nDARK.TEXT_FADED = setLightness(0.4, DARK.TEXT);\nDARK.TASK_BORDER = transparentize(0.5, DARK.PRIMARY);\nDARK.TASK_BORDER_HOVER = transparentize(0.5, DARK.PRIMARY);\nDARK.TASK_BORDER_ACTIVE = DARK.PRIMARY;\nDARK.BORDER = transparentize(0.5, DARK.TEXT_FADED);\nDARK.BORDER_FADED = transparentize(0.5, DARK.BORDER);\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.PRIMARY_FADED = lighten(0.2, LIGHT.PRIMARY);\nLIGHT.BACKGROUND = '#FFFFFF';\nLIGHT.HIGH_CONTRAST_BACKGROUND = LIGHT.PRIMARY;\nLIGHT.HIGH_CONTRAST_TEXT = LIGHT.BACKGROUND;\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.SHADOW = transparentize(0.8, setLightness(0.25, LIGHT.PRIMARY));\nLIGHT.TEXT = setLightness(0.15, LIGHT.PRIMARY);\nLIGHT.TEXT_FADED = transparentize(0.4, LIGHT.TEXT);\nLIGHT.TASK_BORDER = transparentize(0.5, LIGHT.PRIMARY);\nLIGHT.TASK_BORDER_HOVER = transparentize(0.5, LIGHT.PRIMARY);\nLIGHT.TASK_BORDER_ACTIVE = LIGHT.PRIMARY;\nLIGHT.BORDER = transparentize(0.75, LIGHT.TEXT);\nLIGHT.BORDER_FADED = transparentize(0.5, LIGHT.BORDER);\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\n\nexport const ICONS = {\n    DARK_MODE: '🌚',\n    END_ZONE: '🗑',\n    LEFT: '👈',\n    LIGHT_MODE: '🌞',\n    LIST_MANAGER: '📚',\n    RIGHT: '👉',\n    TASK_DEFAULT: '📌',\n    TASK_DETAILS: '📌',\n};\n","export default [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\n","import styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from './tokens';\n\nexport default styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = 0,\n        marginX = 0,\n        marginY = 0,\n        padding = 0,\n        paddingX = 0,\n        paddingY = 0,\n        theme,\n    }) => `\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        isFlexible = false,\n        justify = 'stretch',\n        spacing = 0,\n        wrapped = false,\n    }) => `\n        align-items: ${align};\n        display: flex;\n        flex-direction: ${direction};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        flex-wrap: ${wrapped ? 'wrap' : 'nowrap'}; \n        justify-content: ${justify};\n        width: 100%;\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_WIDTH,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})(\n    ({ theme }) => `\n        height: calc(100vh - ${GRID_UNIT});\n        overflow: auto;\n        position: relative;\n        ${UNIFIED_TRANSITION};\n        \n        & > * {\n            align-self: stretch;\n        }\n    `\n);\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        border-bottom:\n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({ children, label, ...otherProps }) => (\n    <Container>\n        <ColumnHeader>{label}</ColumnHeader>\n        <ContentContainer {...otherProps}>{children}</ContentContainer>\n    </Container>\n);\n\nexport const PrimaryAppColumn = styled(AppColumn)(\n    ({ theme }) => `\n        box-shadow: 0 0 10px 10px ${COLORS[theme.name].SHADOW};\n        border-left: ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        border-right: \n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        overflow: unset;\n        z-index: 11;\n    `\n);\n\nexport default AppColumn;\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport { BORDER_RADIUS, COLORS, UNIFIED_TRANSITION } from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    as: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].PRIMARY};\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].TEXT};\n        cursor: pointer;\n        transform: translateY(0);\n        ${UNIFIED_TRANSITION};\n        transition-property: border, color;\n        \n        &:focus,\n        &:hover {\n            border-color: ${COLORS[theme.name].PRIMARY};\n        }\n        &:active {\n            transform: translateY(2px);\n        }\n    `\n);\n\nexport const GhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        border: 2px dashed ${COLORS[theme.name].BORDER};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n            border-style: solid;\n        }\n    `\n);\n\nexport const ToggleButton = styled(Button)(\n    ({ isActive, theme }) => `\n        background: unset;\n        border: 2px solid transparent;\n        width: auto;\n    `\n);\n\nexport default Button;\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport {\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Transition = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isTransitioning }) => `\n        opacity: ${isTransitioning ? 0 : 1};\n        ${UNIFIED_TRANSITION};\n        transition-duration: ${ROUTE_TRANSITION_ANIMATION_DURATION / 2}ms;\n    `\n);\n\nexport default Transition;\n","import { useRef, useState } from 'react';\n\nconst useDrop = dataTypeHandlers => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        Object.keys(dataTypeHandlers).map(dataType => {\n            const data = evt.dataTransfer.getData(dataType);\n            const payload =\n                data.length === 0\n                    ? null\n                    : isNaN(data)\n                    ? data\n                    : parseFloat(data);\n\n            if (payload !== null) {\n                const dataTypeHandler = dataTypeHandlers[dataType];\n                dataTypeHandler(payload, evt);\n            }\n\n            return dataType;\n        });\n\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","export default str => parseInt(str, 10);\n","import { useState } from 'react';\n\nconst useDrag = dataTypes => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        Object.keys(dataTypes).map(dataType => {\n            evt.dataTransfer.setData(dataType, dataTypes[dataType]);\n            return dataType;\n        });\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 ${isActive ? 2 : 1}px\n            ${\n                COLORS[theme.name][\n                    isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER'\n                ]\n            };\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        width: 100%;\n        z-index: ${isActive ? 100 : 10};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${\n                COLORS[theme.name][\n                    isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                ]\n            };\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].TASK_BORDER_ACTIVE};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${\n                COLORS[theme.name].TASK_BORDER_ACTIVE\n            } inset;\n        }\n        \n        ${CardLabel} {\n            color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n            min-height: ${minutesToHeight(Math.min(30, duration))};\n        }\n\n        ${CardIcon} {\n            height: ${minutesToHeight(Math.min(30, duration))};\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'center',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ duration, theme }) => `\n        font-size: ${duration <= 15 ? FONTS.NORMAL.SIZE : FONTS.LARGE.SIZE};\n        width: auto;\n    `\n);\n\nconst TaskCard = ({ appActions, appData, isActive, task, ...otherProps }) => {\n    const { onImmediatelySelectTask, onTransitionToTask } = appActions;\n    const { isShowingListManager } = appData;\n    const { icon, id, label, scheduled_minutes } = task;\n    const [dragProps] = useDrag({ 'task-id': id });\n\n    const handleClick = () => {\n        if (isShowingListManager) {\n            onImmediatelySelectTask(id);\n            return;\n        }\n\n        onTransitionToTask(id);\n    };\n\n    return (\n        <Container\n            data-task-id={id}\n            duration={scheduled_minutes}\n            isActive={isActive}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_TASK_BETWEEN_BACKLOG_AND_TIMELINE}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <CardLabel>{label}</CardLabel>\n            <CardIcon duration={scheduled_minutes}>{icon}</CardIcon>\n        </Container>\n    );\n};\n\nexport default memo(TaskCard);\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'space-between',\n    paddingX: 0.5,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React, { memo, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport AppColumn from './AppColumn';\nimport Box from './atoms/Box';\nimport { GhostButton, ToggleButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport TaskCard from './TaskCard';\nimport { COLORS, COPY, GRID_UNIT, ICONS } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst Container = styled(AppColumn)(\n    ({ hasTasks, isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        flex-grow: 1;\n        overflow: ${hasTasks ? 'auto' : 'visible'};\n        position: relative;\n        \n        &:before {\n            box-shadow: ${\n                isTargetedForDrop\n                    ? `0 0 0 5px ${COLORS[theme.name].TASK_BORDER_HOVER} inset`\n                    : 'initial'\n            };\n            bottom: 0;\n            content: '';\n            left: 0;\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 1000;\n        }\n    `\n);\n\nconst BacklogToggleButton = ({\n    isBacklogVisible,\n    onChangeIsShowingBacklog,\n}) => (\n    <ToggleButton\n        isActive={isBacklogVisible}\n        title={COPY.TIPS.TOGGLE_BACKLOG}\n        onClick={() => onChangeIsShowingBacklog(!isBacklogVisible)}\n    >\n        {isBacklogVisible ? ICONS.LEFT : ICONS.RIGHT}\n    </ToggleButton>\n);\n\nconst CreateFirstTaskTip = styled(Box)`\n    position: absolute;\n    left: calc(100% + ${GRID_UNIT} * 2);\n    top: 50%;\n    transform: translateY(-50%);\n    white-space: nowrap;\n`;\n\nconst Backlog = ({ appActions, appData, ...otherProps }) => {\n    const {\n        onChangeIsShowingBacklog,\n        onChangeTaskPosition,\n        onChangeTheme,\n        onCreateTask,\n        onUpdateTask,\n    } = appActions;\n    const {\n        incompleteTasks,\n        isBacklogVisible,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        theme,\n    } = appData;\n    const [isBacklogForcedOpen, setIsBacklogForcedOpen] = useState(false);\n    const selectedList = lists.find(list => list.id === selectedListId);\n    const unscheduledTasks = incompleteTasks.filter(\n        task =>\n            !task.scheduled &&\n            task.list_id === selectedListId &&\n            !selectedList.isArchived\n    );\n    const hasTasks = unscheduledTasks.length;\n\n    const [backlogDropProps] = useDrop({\n        'task-id': taskId => {\n            onUpdateTask(taskId, {\n                list_id: selectedListId,\n                scheduled: false,\n            });\n        },\n    });\n\n    useEffect(() => {\n        if (!isBacklogVisible && backlogDropProps.isTargetedForDrop) {\n            setIsBacklogForcedOpen(true);\n            onChangeIsShowingBacklog(true);\n            return;\n        }\n\n        if (isBacklogForcedOpen && !backlogDropProps.isTargetedForDrop) {\n            setIsBacklogForcedOpen(false);\n            onChangeIsShowingBacklog(false);\n        }\n    }, [backlogDropProps.isTargetedForDrop, setIsBacklogForcedOpen]);\n\n    const [taskCardDropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n            const droppedOnTaskIndex = appData.tasks.findIndex(\n                task => task.id === droppedOnTaskId\n            );\n            onChangeTaskPosition(taskId, droppedOnTaskIndex);\n        },\n    });\n\n    return (\n        <Container\n            label={!isBacklogVisible ? '' : selectedList.label}\n            {...backlogDropProps}\n            {...otherProps}\n        >\n            {!isBacklogVisible ? (\n                <BacklogToggleButton\n                    isBacklogVisible={isBacklogVisible}\n                    onChangeIsShowingBacklog={onChangeIsShowingBacklog}\n                />\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={COPY.TIPS.TOGGLE_DARK_MODE}\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT'\n                                ? ICONS.DARK_MODE\n                                : ICONS.LIGHT_MODE}\n                        </ToggleButton>\n                        <BacklogToggleButton\n                            isBacklogVisible={isBacklogVisible}\n                            onChangeIsShowingBacklog={onChangeIsShowingBacklog}\n                        />\n                    </ToolBar>\n                    <FlexBox\n                        isFlexible\n                        justify=\"flex-start\"\n                        direction=\"column\"\n                        spacing={0.5}\n                        padding={1}\n                        style={{\n                            height: '100%',\n                            overflow: hasTasks ? 'auto' : 'visible',\n                        }}\n                    >\n                        <div style={{ position: 'relative', width: '100%' }}>\n                            {!hasTasks && (\n                                <CreateFirstTaskTip>\n                                    <span\n                                        role=\"img\"\n                                        aria-label=\"left-pointing hand\"\n                                    >\n                                        {ICONS.LEFT}\n                                    </span>{' '}\n                                    Create your first task\n                                </CreateFirstTaskTip>\n                            )}\n                            <GhostButton\n                                style={{\n                                    height: minutesToHeight(30),\n                                }}\n                                title={COPY.TIPS.CREATE_NEW_TASK}\n                                onClick={() => onCreateTask()}\n                            >\n                                {COPY.CREATE_TASK_LABEL}\n                            </GhostButton>\n                        </div>\n                        {unscheduledTasks.map(task => (\n                            <TaskCard\n                                key={task.id}\n                                appActions={appActions}\n                                appData={appData}\n                                isActive={selectedTaskId === task.id}\n                                task={task}\n                                {...taskCardDropProps}\n                            />\n                        ))}\n                    </FlexBox>\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default memo(Backlog);\n","import React from 'react';\nimport { transparentize } from 'polished';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport {\n    COLORS,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst DROP_ZONE_RADIUS = `calc(${GRID_UNIT} * 3.5)`;\n\nconst pulsingAnimation = ({ from, to }) => keyframes`\n    0% {\n        transform: scale(${from});\n    }\n    100% {\n        transform: scale(${to});\n    }\n`;\n\nconst Container = styled.div(\n    ({ isDraggingTask, isTargetedForDrop, theme }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop\n            ? pulsingAnimation({ from: 1.6, to: 2.4 })\n            : isDraggingTask\n            ? pulsingAnimation({ from: 1, to: 1.6 })\n            : 'unset'};\n        animation-timing-function: ease-in-out;\n        background: ${transparentize(\n            isTargetedForDrop || isDraggingTask ? 1 : 0.75,\n            COLORS[theme.name].PRIMARY\n        )};\n        bottom: calc(${DROP_ZONE_RADIUS} * -1);\n        border-radius: calc(${DROP_ZONE_RADIUS} * 2);\n        height: calc(${DROP_ZONE_RADIUS} * 2);\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n        position: fixed;\n        right: calc(${DROP_ZONE_RADIUS} * -1);\n        transform: scale(${isDraggingTask ? 1.5 : 1});\n        width: calc(${DROP_ZONE_RADIUS} * 2);\n        z-index: 100;\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            align-items: center;\n            content: '${ICONS.END_ZONE}';\n            display: flex;\n            font-size: 3rem;\n            justify-content: center;\n            height: calc(${DROP_ZONE_RADIUS} * 1.25);\n            left: 0;\n            position: absolute;\n            top: 0;\n            width: calc(${DROP_ZONE_RADIUS} * 1.25);\n        }\n    `\n);\n\nconst Trash = ({ appActions, appData, ...otherProps }) => {\n    const { onDeleteTask, onSelectList, onUpdateList } = appActions;\n    const { isDraggingTask, lists, selectedListId } = appData;\n    const [dropProps] = useDrop({\n        'list-id': listId => {\n            if (selectedListId === listId) {\n                const firstUnarchivedList = lists.find(\n                    list => list.id !== listId && !list.isArchived\n                );\n\n                if (firstUnarchivedList) {\n                    onSelectList(firstUnarchivedList.id);\n                }\n            }\n\n            onUpdateList(listId, {\n                isArchived: true,\n            });\n        },\n        'task-id': onDeleteTask,\n    });\n\n    return (\n        <Container\n            isDraggingTask={isDraggingTask}\n            title={COPY.TIPS.DELETE_TASK}\n            {...dropProps}\n            {...otherProps}\n        />\n    );\n};\n\nexport default Trash;\n","import { useEffect } from 'react';\nimport mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nconst buildKeyboardShortcutHandler = (keyMap, scopedToElementRef) => evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    const currentKeySequence = uniq(keysDown)\n        .map(keyDown => keyDown.toLowerCase())\n        .sort()\n        .join('+');\n\n    mapKeys(keyMap, (handler, sequence) => {\n        const shortcutKeySequence = sequence\n            .split('+')\n            .map(key => key.trim().toLowerCase())\n            .sort()\n            .join('+');\n\n        if (currentKeySequence === shortcutKeySequence) {\n            const scopedElement = scopedToElementRef.current;\n            const scopedToAnInput = scopedElement && isInput(scopedElement);\n            const elementWithFocusIsAnInput = isInput(document.activeElement);\n\n            if (\n                (scopedElement && evt.target === scopedElement) ||\n                scopedToAnInput\n            ) {\n                evt.stopPropagation();\n            }\n\n            if (!scopedToAnInput && elementWithFocusIsAnInput) {\n                return false;\n            }\n\n            return handler(evt);\n        }\n    });\n};\n\nconst useKeyboardShortcuts = (keyMap, targetElementRef = { current: null }) => {\n    useEffect(() => {\n        const onKeyDown = buildKeyboardShortcutHandler(\n            keyMap,\n            targetElementRef\n        );\n\n        document.addEventListener('keydown', onKeyDown);\n\n        return () => document.removeEventListener('keydown', onKeyDown);\n    }, [keyMap, targetElementRef]);\n};\n\nexport default useKeyboardShortcuts;\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditing, theme, tracingElementStyles = () => {} }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border:\n                ${\n                    isEditing\n                        ? 'none'\n                        : `2px dashed ${COLORS[theme.name].BORDER}`\n                };\n            box-shadow:\n                ${\n                    isEditing\n                        ? `0 0 0 2px ${COLORS[theme.name].PRIMARY}`\n                        : `0 0 0 0 ${COLORS[theme.name].PRIMARY}`\n                };\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.25 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.25 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n            ${tracingElementStyles(theme)}\n        }\n        \n        &:focus,\n        &:hover {\n            &:before {\n                opacity: 1;\n            }\n        }\n    `\n);\n\nconst StyledTextarea = styled.textarea`\n    display: block;\n    height: 100%;\n    width: 100%;\n`;\n\nconst Canvas = styled(Box)``;\n\nconst EditInPlace = ({\n    doubleClickToEdit = false,\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    tracingElementStyles = () => {},\n    value = '',\n    canvasStyles = {},\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const containerElementRef = useRef(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = useCallback(() => {\n        if (!isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    }, [isEditing, setBufferedValue, setIsEditing, value]);\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [handleClick, isRemotelyActivated]);\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const keyMap = useMemo(() => {\n        const saveAndClose = () => {\n            onSave(bufferedValue);\n            setIsEditing(false);\n        };\n\n        const close = () => {\n            setBufferedValue(value);\n            setIsEditing(false);\n        };\n\n        return {\n            'cmd + escape': close,\n            'shift + escape': close,\n            'cmd + enter': saveAndClose,\n            'shift + enter': saveAndClose,\n            'escape': saveAndClose,\n            'enter': evt => {\n                if (\n                    evt.target.tagName.toLowerCase() === 'textarea' &&\n                    isSingleLine\n                ) {\n                    saveAndClose();\n                    evt.preventDefault();\n                    return false;\n                }\n\n                if (evt.target === containerElementRef.current) {\n                    evt.preventDefault();\n                    handleClick();\n                }\n            },\n        };\n    }, [bufferedValue, handleClick, onSave, isSingleLine, value]);\n\n    useKeyboardShortcuts(keyMap, inputRef);\n\n    return (\n        <Container\n            isEditing={isEditing}\n            ref={containerElementRef}\n            tabIndex={0}\n            tracingElementStyles={tracingElementStyles}\n            onClick={!doubleClickToEdit ? handleClick : null}\n            onDoubleClick={doubleClickToEdit ? handleClick : null}\n            {...otherProps}\n        >\n            <Canvas isEmpty={isEmpty} style={{ ...canvasStyles }}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <StyledTextarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                height: `${measuringElementHeight}px`,\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Canvas>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React, { useCallback, useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst StyledListCard = styled(FlexBox).attrs({\n    align: 'flex-start',\n    direction: 'column',\n    justify: 'space-between',\n    spacing: 0.5,\n})(\n    ({ isActive, isTargetedForDrop, theme }) => `\n        background-color: ${\n            COLORS[theme.name][\n                isActive ? 'HIGH_CONTRAST_BACKGROUND' : 'PRIMARY_FADED'\n            ]\n        };\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 2px ${isActive ? COLORS[theme.name].SHADED : 'transparent'},\n            0 0 0 4px ${\n                isActive\n                    ? COLORS[theme.name][\n                          isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                      ]\n                    : 'transparent'\n            };\n        color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        cursor: pointer;\n        height: ${LIST_CARD_HEIGHT};\n        margin-bottom: ${LIST_CARD_SPACING};\n        margin-left: ${LIST_CARD_SPACING};\n        overflow: hidden;\n        position: relative;\n        transform: scale(${isTargetedForDrop ? 1.1 : 1});\n        width: ${LIST_CARD_WIDTH};\n        ${UNIFIED_TRANSITION};\n        \n        &:nth-child(3n+4) {\n            margin-left: 0;\n        }\n        \n        &:active,\n        &:focus,\n        &:hover {\n            box-shadow:\n                0 0 0 2px ${COLORS[theme.name].SHADED},\n                0 0 0 4px ${\n                    COLORS[theme.name][\n                        isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                    ]\n                };\n        }\n    `\n);\nexport const ListCardTaskIconContainer = styled(FlexBox).attrs({\n    justify: 'flex-start',\n    paddingX: 0.25,\n    paddingY: 0.25,\n    wrapped: true,\n})(\n    ({ isActive }) => `\n        background-color: rgba(255, 255, 255, ${isActive ? 0.75 : 0.25});\n        border-radius: ${BORDER_RADIUS};\n        border-top-right-radius: 0;\n        border-top-left-radius: 0;\n        margin: 5px;\n        width: calc(100% - (5px * 2));\n    `\n);\nexport const ListCard = ({ appActions, children, listId, ...otherProps }) => {\n    const { onUpdateTask } = appActions;\n    const listCardElementRef = useRef(null);\n\n    const [dragProps] = useDrag({ 'list-id': listId });\n\n    const [dropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const targetListId = toInt(evt.currentTarget.dataset.listId);\n            if (targetListId) {\n                onUpdateTask(taskId, {\n                    list_id: targetListId,\n                });\n            }\n        },\n    });\n\n    const triggerClick = useCallback(evt => {\n        evt.preventDefault();\n        evt.target.click();\n    }, []);\n\n    const keyMap = useMemo(\n        () => ({\n            enter: triggerClick,\n            space: triggerClick,\n        }),\n        [triggerClick]\n    );\n\n    useKeyboardShortcuts(keyMap, listCardElementRef);\n\n    return (\n        <StyledListCard\n            data-list-id={listId}\n            ref={listCardElementRef}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_BETWEEN_LISTS}\n            {...dragProps}\n            {...dropProps}\n            {...otherProps}\n        >\n            {children}\n        </StyledListCard>\n    );\n};\nexport const GhostListCard = styled(GhostButton).attrs({\n    align: 'center',\n    justify: 'center',\n})`\n    height: ${LIST_CARD_HEIGHT};\n    margin-bottom: ${LIST_CARD_SPACING};\n    width: ${LIST_CARD_WIDTH};\n`;\n","import sortBy from 'lodash/sortBy';\nimport React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, COPY, GRID_UNIT } from './atoms/tokens';\nimport EditInPlace from './EditInPlace';\nimport { GhostListCard, ListCard, ListCardTaskIconContainer } from './ListCard';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n    justify: 'flex-start',\n    padding: 1,\n    wrapped: true,\n})(\n    ({ theme }) => `\n        align-content: flex-start;\n        background-color: ${COLORS[theme.name].SHADED};\n        height: 100%;\n        overflow: auto;\n        padding-bottom: calc(${GRID_UNIT} * 1.5);\n    `\n);\n\nconst ListManager = ({ appActions, appData }) => {\n    const { onCreateList, onSelectList, onUpdateList } = appActions;\n    const { incompleteTasks, isCreatingList, lists, selectedListId } = appData;\n    const unarchivedLists = lists.filter(list => !list.isArchived);\n    const sortedLists = sortBy(unarchivedLists, [list => list.label]);\n\n    const tracingElementStyles = theme => `\n        border-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT}\n    `;\n\n    return (\n        <Container>\n            <GhostListCard onClick={() => onCreateList()}>\n                {COPY.CREATE_LIST_LABEL}\n            </GhostListCard>\n            {sortedLists.map(list => {\n                const isActive = selectedListId === list.id;\n                const tasksInList = incompleteTasks.filter(\n                    task => task.list_id === list.id\n                );\n\n                return (\n                    <ListCard\n                        key={list.id}\n                        appActions={appActions}\n                        isActive={isActive}\n                        listId={list.id}\n                        onClick={() => onSelectList(list.id)}\n                    >\n                        <EditInPlace\n                            isRemotelyActivated={\n                                isCreatingList && selectedListId === list.id\n                            }\n                            marginX={0.75}\n                            marginY={0.5}\n                            style={{\n                                alignSelf: 'stretch',\n                                flexGrow: 0,\n                                flexShrink: 0,\n                            }}\n                            tracingElementStyles={tracingElementStyles}\n                            value={list.label}\n                            onSave={newLabel => {\n                                onUpdateList(list.id, { label: newLabel });\n                            }}\n                        />\n                        {tasksInList.length >= 1 && (\n                            <ListCardTaskIconContainer isActive={isActive}>\n                                {tasksInList.map(task => (\n                                    <span key={task.id}>{task.icon}</span>\n                                ))}\n                            </ListCardTaskIconContainer>\n                        )}\n                    </ListCard>\n                );\n            })}\n        </Container>\n    );\n};\n\nexport default ListManager;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0.75};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map((option, optionIndex) => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(\n                              renderOption(option, optionIndex),\n                              optionIndex\n                          )\n                        : renderOption(option, optionIndex)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    ICONS,\n    DURATION_OPTIONS,\n    FONTS,\n    BORDER_WIDTH,\n} from './atoms/tokens';\n\nconst TaskHeader = styled(FlexBox).attrs({\n    as: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: ${FONTS.LARGE.SIZE};\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-self: stretch;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst DurationOptionBar = styled(OptionBar)(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        border-top: ${BORDER_WIDTH} solid ${COLORS[theme.name].BACKGROUND};\n    `\n);\n\nconst TaskDetails = ({ appActions = {}, appData = {} }) => {\n    const { onUpdateTask } = appActions;\n    const { isCreatingTask, selectedTaskId, tasks } = appData;\n    const activeTask = tasks.find(task => task.id === selectedTaskId) || {};\n    const { icon, id, label, notes, scheduled_minutes } = activeTask;\n    const isEmpty = !activeTask.id;\n\n    const handleUpdateTask = useCallback(\n        (field, value) => onUpdateTask(id, { [field]: value }),\n        [id, onUpdateTask]\n    );\n\n    const handleSaveDuration = useCallback(\n        newDuration => handleUpdateTask('scheduled_minutes', newDuration),\n        [handleUpdateTask]\n    );\n\n    const handleSaveIcon = useCallback(\n        newNotes => handleUpdateTask('icon', newNotes),\n        [handleUpdateTask]\n    );\n\n    const handleSaveLabel = useCallback(\n        newLabel => handleUpdateTask('label', newLabel),\n        [handleUpdateTask]\n    );\n\n    const handleSaveNotes = useCallback(\n        newNotes => handleUpdateTask('notes', newNotes),\n        [handleUpdateTask]\n    );\n\n    return (\n        !isEmpty && (\n            <>\n                <TaskHeader>\n                    <TaskHeaderLabel>\n                        <EditInPlace\n                            isRemotelyActivated={isCreatingTask}\n                            placeholder={COPY.EMPTY_LABEL}\n                            value={label}\n                            onSave={handleSaveLabel}\n                        />\n                    </TaskHeaderLabel>\n                    <TaskHeaderIcon>\n                        <EditInPlace\n                            placeholder={ICONS.TASK_DEFAULT}\n                            value={icon}\n                            onSave={handleSaveIcon}\n                        />\n                    </TaskHeaderIcon>\n                </TaskHeader>\n\n                <DurationOptionBar\n                    options={DURATION_OPTIONS}\n                    renderSelectedOption={option => <span>{option} mins</span>}\n                    selectedOption={scheduled_minutes}\n                    title={COPY.TIPS.SETTING_DURATION}\n                    onChange={handleSaveDuration}\n                />\n\n                <EditInPlace\n                    isFlexible\n                    isMultiLine\n                    margin={1}\n                    placeholder={COPY.EMPTY_NOTES}\n                    render={rawNotes => (\n                        <div\n                            className=\"markdown\"\n                            dangerouslySetInnerHTML={{\n                                __html: marked(rawNotes),\n                            }}\n                        />\n                    )}\n                    canvasStyles={{\n                        bottom: 0,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                    value={notes}\n                    onSave={handleSaveNotes}\n                />\n            </>\n        )\n    );\n};\n\nexport default TaskDetails;\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop({\n            'task-id': taskId =>\n                onUpdateTask(taskId, {\n                    scheduled: true,\n                    scheduled_time: newTime,\n                }),\n        });\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: \"Today's Plan\",\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].TASK_BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${COLORS[theme.name].BORDER};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            opacity: ${isFaded ? 0.5 : 1};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop({ 'task-id': () => {} });\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, COLORS, FONTS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: ${FONTS.NORMAL.LINE_HEIGHT};\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: ${FONTS.NORMAL.SIZE};\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        ::placeholder {\n            color: ${COLORS[theme.name].PRIMARY};\n            opacity: 1;\n        }\n        ::selection {\n            color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                ![null, 'undefined'].includes(savedState)\n                    ? JSON.parse(savedState)\n                    : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport sample from 'lodash/sample';\nimport { PrimaryAppColumn } from './components/AppColumn';\nimport { ToggleButton } from './components/atoms/Button';\nimport Transition from './components/atoms/Transition';\nimport Backlog from './components/Backlog';\nimport CompletedTasksDropZone from './components/Trash';\nimport ListManager from './components/ListManager';\nimport TaskDetails from './components/TaskDetails';\nimport Timeline from './components/Timeline';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport ToolBar from './components/ToolBar';\nimport useKeyboardShortcuts from './hooks/useKeyboardShortcuts';\nimport usePersistentState from './hooks/usePersistentState';\nimport {\n    SIDEBAR_DEFAULT_WIDTH,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n    SIDEBAR_EXTENDED_WIDTH,\n} from './components/atoms/tokens';\n\nfunction App() {\n    const [isShowingBacklog, setIsShowingBacklog] = usePersistentState(\n        'is-backlog-visible',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        INITIAL_SELECTED_LIST_ID\n    );\n    const [isShowingListManager, setIsShowingListManager] = usePersistentState(\n        'is-showing-list-manager',\n        true\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        INITIAL_SELECTED_TASK_ID\n    );\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingList, setIsCreatingList] = useState(false);\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const [isTransitioning, setIsTransitioning] = useState(false);\n    const unarchivedLists = useMemo(\n        () => lists.filter(list => !list.isArchived),\n        [lists]\n    );\n    const currentListIndex = unarchivedLists.findIndex(\n        list => list.id === selectedListId\n    );\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n    const hasIncompleteTasks = incompleteTasks.length;\n    const hasUnarchivedList = lists.filter(list => !list.isArchived).length;\n    const isBacklogVisible = hasUnarchivedList && isShowingBacklog;\n\n    useEffect(() => {\n        const handleDragOver = () => setIsDraggingTask(true);\n        const handleDragEnd = () => setIsDraggingTask(false);\n        document.addEventListener('dragover', handleDragOver);\n        document.addEventListener('dragend', handleDragEnd);\n        document.addEventListener('drop', handleDragEnd);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n            document.removeEventListener('dragend', handleDragEnd);\n            document.removeEventListener('drop', handleDragEnd);\n        };\n    }, []);\n\n    const onCreateList = useCallback(\n        (overrides = {}) => {\n            const newListId = Date.now();\n\n            setLists(currentLists =>\n                currentLists.concat([\n                    {\n                        id: newListId,\n                        isArchived: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_LIST_LABEL\n                        }`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedListId(newListId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingList(true);\n\n            setTimeout(() => setIsCreatingList(false), 1000);\n        },\n        [setSelectedListId, setLists]\n    );\n\n    const onUpdateList = useCallback(\n        (listId, updates) => {\n            setLists(prevLists =>\n                prevLists.map(list => {\n                    if (list.id === listId) {\n                        return {\n                            ...list,\n                            ...updates,\n                        };\n                    }\n                    return list;\n                })\n            );\n        },\n        [setLists]\n    );\n\n    const onSelectList = listId => {\n        setSelectedListId(listId);\n        setIsShowingBacklog(true);\n    };\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                [\n                    {\n                        icon: ICONS.TASK_DEFAULT,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_TASK_LABEL\n                        }`,\n                        notes: COPY.NEW_TASK_NOTES,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ].concat(currentTasks)\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingTask(true);\n\n            setIsShowingListManager(false);\n        },\n        [selectedListId, setIsShowingListManager, setSelectedTaskId, setTasks]\n    );\n\n    useEffect(() => {\n        if (isCreatingTask) {\n            setIsShowingListManager(false);\n            const timer = setTimeout(() => setIsCreatingTask(false), 100);\n            return () => clearTimeout(timer);\n        }\n    }, [isCreatingTask, setIsCreatingTask, setIsShowingListManager]);\n\n    const transition = useCallback(\n        callback => {\n            setIsTransitioning(true);\n            setTimeout(() => {\n                callback();\n                setIsTransitioning(false);\n            }, ROUTE_TRANSITION_ANIMATION_DURATION / 2);\n        },\n        [setIsTransitioning]\n    );\n\n    const onImmediatelySelectTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            setSelectedTaskId(taskId);\n        },\n        [isShowingListManager, setIsShowingListManager, setSelectedTaskId]\n    );\n\n    const onTransitionToTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            transition(() => setSelectedTaskId(taskId));\n        },\n        [\n            isShowingListManager,\n            setIsShowingListManager,\n            setSelectedTaskId,\n            transition,\n        ]\n    );\n\n    const onChangeIsShowingBacklog = setIsShowingBacklog;\n\n    const onChangeIsShowingListManager = useCallback(\n        newIsShowingListManager => {\n            transition(() => {\n                setIsShowingListManager(newIsShowingListManager);\n\n                if (newIsShowingListManager) {\n                    setIsShowingBacklog(true);\n                }\n            });\n        },\n        [setIsShowingBacklog, setIsShowingListManager, transition]\n    );\n\n    const onDeleteTask = useCallback(\n        taskId => {\n            if (selectedTaskId === taskId) {\n                const firstUnarchivedTask = tasks.find(\n                    task =>\n                        task.id !== taskId &&\n                        task.list_id === selectedListId &&\n                        !task.isComplete\n                );\n\n                if (firstUnarchivedTask) {\n                    onImmediatelySelectTask(firstUnarchivedTask.id);\n                } else {\n                    onChangeIsShowingListManager(true);\n                }\n            }\n\n            onUpdateTask(taskId, {\n                isComplete: true,\n            });\n        },\n        [\n            onChangeIsShowingListManager,\n            onImmediatelySelectTask,\n            onUpdateTask,\n            selectedListId,\n            tasks,\n            selectedTaskId,\n        ]\n    );\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const moveTaskToTimeline = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: true,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const moveTaskToBacklog = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: false,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const selectNextList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const nextListIndex = currentListIndex + 1;\n            const nextIndex =\n                nextListIndex > unarchivedLists.length - 1 ? 0 : nextListIndex;\n            setSelectedListId(unarchivedLists[nextIndex].id);\n            setIsShowingListManager(true);\n        },\n        [\n            currentListIndex,\n            setIsShowingListManager,\n            setSelectedListId,\n            unarchivedLists,\n        ]\n    );\n\n    const selectPreviousList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const prevListIndex = currentListIndex - 1;\n            const prevIndex =\n                prevListIndex < 0 ? unarchivedLists.length - 1 : prevListIndex;\n            setSelectedListId(unarchivedLists[prevIndex].id);\n            setIsShowingListManager(true);\n        },\n        [\n            currentListIndex,\n            setIsShowingListManager,\n            setSelectedListId,\n            unarchivedLists,\n        ]\n    );\n\n    const setTaskDuration = useCallback(\n        duration => {\n            onUpdateTask(selectedTaskId, {\n                scheduled_minutes: duration,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const toggleBacklogVisibility = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeIsShowingBacklog(!isShowingBacklog);\n        },\n        [isShowingBacklog, onChangeIsShowingBacklog]\n    );\n\n    const toggleDarkMode = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n        },\n        [onChangeTheme, themeName]\n    );\n\n    const toggleIsEditingCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            setIsCreatingTask(true);\n        },\n        [setIsCreatingTask]\n    );\n\n    const toggleIsShowingListManager = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeIsShowingListManager(!isShowingListManager);\n        },\n        [isShowingListManager, onChangeIsShowingListManager]\n    );\n\n    const createNewTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onCreateTask();\n        },\n        [onCreateTask]\n    );\n\n    const deleteCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onDeleteTask(selectedTaskId);\n        },\n        [onDeleteTask, selectedTaskId]\n    );\n\n    const keyMap = useMemo(() => {\n        return {\n            ...[15, 30, 45, 60, 90, 120].reduce((acc, duration, index) => {\n                return {\n                    ...acc,\n                    [index + 1]: setTaskDuration.bind(null, duration),\n                };\n            }, {}),\n            'cmd + arrowRight': moveTaskToTimeline,\n            'cmd + arrowLeft': moveTaskToBacklog,\n            'cmd + shift + arrowRight': selectNextList,\n            'cmd + shift + arrowLeft': selectPreviousList,\n            'cmd + shift + ]': selectNextList,\n            'cmd + shift + [': selectPreviousList,\n            'b': toggleBacklogVisibility,\n            'd': toggleDarkMode,\n            'e': toggleIsEditingCurrentTask,\n            'l': toggleIsShowingListManager,\n            'n': createNewTask,\n            't': deleteCurrentTask,\n        };\n    }, [\n        createNewTask,\n        deleteCurrentTask,\n        moveTaskToBacklog,\n        moveTaskToTimeline,\n        selectNextList,\n        selectPreviousList,\n        setTaskDuration,\n        toggleBacklogVisibility,\n        toggleDarkMode,\n        toggleIsEditingCurrentTask,\n        toggleIsShowingListManager,\n    ]);\n\n    useKeyboardShortcuts(keyMap);\n\n    const appActions = {\n        onChangeIsShowingBacklog,\n        onChangeTaskPosition,\n        onChangeIsShowingListManager,\n        onChangeTheme,\n        onCreateList,\n        onCreateTask,\n        onDeleteTask,\n        onSelectList,\n        onImmediatelySelectTask,\n        onTransitionToTask,\n        onUpdateList,\n        onUpdateTask,\n    };\n\n    const appData = {\n        incompleteTasks,\n        isBacklogVisible,\n        isCreatingList,\n        isCreatingTask,\n        isDraggingTask,\n        isShowingListManager,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    const columnWidths = isBacklogVisible\n        ? {\n              backlog: SIDEBAR_DEFAULT_WIDTH,\n              listManager: '40vw',\n              taskDetails: '40vw',\n              timeline: SIDEBAR_DEFAULT_WIDTH,\n          }\n        : {\n              backlog: `calc(${GRID_UNIT} * 2)`,\n              listManager: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              taskDetails: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              timeline: SIDEBAR_EXTENDED_WIDTH,\n          };\n\n    return (\n        <ThemeProvider theme={{ name: themeName }}>\n            <GlobalStyle />\n            <CompletedTasksDropZone appActions={appActions} appData={appData} />\n            <FlexBox align=\"stretch\" direction=\"row-reverse\">\n                <Timeline\n                    appActions={appActions}\n                    appData={appData}\n                    selectedTaskId={selectedTaskId}\n                    from={TIMELINE_FROM}\n                    style={{\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                        width: columnWidths.timeline,\n                        pointerEvents: hasIncompleteTasks ? 'all' : 'none',\n                    }}\n                    tasks={incompleteTasks}\n                    to={TIMELINE_TO}\n                />\n                <PrimaryAppColumn\n                    label={\n                        isShowingListManager\n                            ? COPY.LABEL_FOR_LIST_MANAGER\n                            : COPY.LABEL_FOR_TASK_DETAILS\n                    }\n                    style={{\n                        width: isShowingListManager\n                            ? columnWidths.listManager\n                            : columnWidths.taskDetails,\n                    }}\n                >\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={isShowingListManager}\n                            title={COPY.TIPS.TOGGLE_LIST_MANAGER}\n                            onClick={() =>\n                                onChangeIsShowingListManager(\n                                    !isShowingListManager\n                                )\n                            }\n                        >\n                            {isShowingListManager\n                                ? `${ICONS.TASK_DETAILS} ${COPY.LABEL_FOR_TASK_DETAILS}`\n                                : `${ICONS.LIST_MANAGER} ${COPY.LABEL_FOR_LIST_MANAGER}`}\n                        </ToggleButton>\n                    </ToolBar>\n                    <Transition isTransitioning={isTransitioning}>\n                        {isShowingListManager ? (\n                            <ListManager\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : (\n                            <TaskDetails\n                                appActions={appActions}\n                                appData={appData}\n                                style={{\n                                    opacity: hasIncompleteTasks ? 1 : 0.25,\n                                }}\n                            />\n                        )}\n                    </Transition>\n                </PrimaryAppColumn>\n                <Backlog\n                    appActions={appActions}\n                    appData={appData}\n                    style={{\n                        width: columnWidths.backlog,\n                    }}\n                />\n            </FlexBox>\n        </ThemeProvider>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}