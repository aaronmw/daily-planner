{"version":3,"sources":["components/atoms/Icon.js","components/atoms/tokens.js","components/atoms/copy/motivational-descriptors.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","components/atoms/Button.js","components/atoms/GlobalStyles.js","components/atoms/Transition.js","hooks/useDrag.js","hooks/useDrop.js","hooks/useKeyboardShortcuts.js","utils/toInt.js","components/EditInPlace.js","components/ListCard.js","components/ListManager.js","components/TaskListToggleButton.js","components/ToolBar.js","components/Sidebar.js","components/OptionBar.js","components/TaskDetails.js","utils/minutesToHeight.js","components/TaskCard.js","components/TaskList.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/Trash.js","components/TrashedCard.js","components/TrashedLists.js","components/TrashedTasks.js","hooks/usePersistentState.js","index.js"],"names":["STYLE_PREFIX_MAP","solid","regular","light","duotone","brands","Icon","_ref","iconName","_ref$styleName","styleName","otherProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","SIDEBAR_DEFAULT_WIDTH","SIDEBAR_EXTENDED_WIDTH","DURATION_OPTIONS","GRID_UNIT","FONTS","NORMAL","LINE_HEIGHT","SIZE","LARGE","INITIAL_LISTS","id","isArchived","label","INITIAL_SELECTED_LIST_ID","INITIAL_TASKS","INITIAL_SELECTED_TASK_ID","LIST_CARD_HEIGHT","LIST_CARD_SPACING","LIST_CARD_WIDTH","MIN_SLOT_HEIGHT","ROUTE_TRANSITION_ANIMATION_DURATION","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","CREATE_NEW_TASK","DELETE_TASK","MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE","MOVE_BETWEEN_LISTS","PREFIX","SETTING_DURATION","TOGGLE_TASK_LIST","TOGGLE_DARK_MODE","TOGGLE_LIST_MANAGER","DARK","PRIMARY_FADED","darken","PRIMARY","BACKGROUND","HIGH_CONTRAST_BACKGROUND","HIGH_CONTRAST_TEXT","SHADED","setLightness","SHADOW","transparentize","TEXT","TEXT_FADED","TASK_BORDER","TASK_BORDER_HOVER","TASK_BORDER_ACTIVE","BORDER","BORDER_FADED","LIGHT","lighten","COLORS","ICON_PACKS","EMOJI","DARK_MODE","END_ZONE","LEFT","LIGHT_MODE","LIST_MANAGER","RIGHT","TASK_DETAILS","FONT_AWESOME","ICON_NAME","STYLE_NAME","keys","forEach","key","_ICON_PACKS$FONT_AWES","atoms_Icon","ICONS","TASK_DEFAULT","styled","div","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","name","Box","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","_ref$wrapped","wrapped","Container","FlexBox","attrs","isDisabled","ContentContainer","_templateObject","ColumnHeader","_ref2","AppColumn","_ref3","children","_ref3$disabledIf","disabledIf","length","some","condition","PrimaryAppColumn","_ref4","SecondaryAppColumn","_ref5","isTargetedForDrop","Button","as","GhostButton","ToggleButton","isActive","createGlobalStyle","Transition","isTransitioning","useDrag","dataTypes","_useState","useState","_useState2","slicedToArray","isDragging","setIsDragging","draggable","onDragEnd","onDragStart","evt","map","dataType","dataTransfer","setData","useDrop","dataTypeHandlers","setIsTargetedForDrop","targetedElement","useRef","droppable","onDragEnter","preventDefault","current","target","onDragOver","onDragLeave","onDrop","data","getData","payload","isNaN","parseFloat","dataTypeHandler","INPUT_TAG_NAMES","isInput","node","tagName","toLowerCase","includes","useKeyboardShortcuts","keyMap","targetElementRef","arguments","undefined","useEffect","onKeyDown","scopedToElementRef","keysDown","ctrlKey","push","shiftKey","metaKey","currentKeySequence","uniq","keyDown","sort","join","mapKeys","handler","sequence","shortcutKeySequence","split","trim","scopedToElement","scopedElement","scopedToAnInput","firedOnAnInput","stopPropagation","buildKeyboardShortcutHandler","document","addEventListener","removeEventListener","toInt","str","parseInt","isEditable","isEditing","_ref$tracingElementSt","tracingElementStyles","StyledTextarea","textarea","EditInPlace_templateObject","Canvas","isEmpty","memo","_ref3$canvasStyles","canvasStyles","_ref3$doubleClickToEd","doubleClickToEdit","_ref3$isEditable","_ref3$isMultiLine","isMultiLine","_ref3$isRemotelyActiv","isRemotelyActivated","_ref3$placeholder","placeholder","_ref3$render","render","value","_ref3$tracingElementS","_ref3$value","_ref3$onSave","onSave","setIsEditing","_useState3","_useState4","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","containerElementRef","inputRef","measuringElementRef","isSingleLine","select","focus","el","offsetHeight","handleClick","useCallback","useMemo","saveAndClose","close","cmd + escape","shift + escape","cmd + enter","shift + enter","escape","enter","EditInPlace_Container","ref","tabIndex","onClick","onDoubleClick","style","objectSpread2","Fragment","position","pointerEvents","opacity","whiteSpace","width","disabled","rows","height","onBlur","onChange","ListCardTaskIconContainer","GhostListCard","ListCard_templateObject","ListCardContainer","ListCard","appActions","appData","listId","_ref4$isEditable","onUpdateList","onUpdateTask","isCreatingList","lists","selectedListId","tasks","list","find","tasksInList","filter","task","list_id","isComplete","listCardElementRef","_useDrag","list-id","dragProps","_useDrop","task-id","taskId","targetListId","currentTarget","dataset","dropProps","triggerClick","click","space","ListCard_Container","data-list-id","title","TIPS","components_EditInPlace","alignSelf","flexGrow","flexShrink","newLabel","icon","ListManager","onCreateList","onSelectList","unarchivedLists","sortedLists","sortBy","CREATE_LIST_LABEL","components_ListCard","TaskListToggleButton","isSidebarOpen","onChangeIsSidebarOpen","ToolBar","Sidebar","onChangeTheme","isShowingTrashContents","isTaskListForcedOpen","setIsTaskListForcedOpen","selectedList","scheduled","sidebarDropProps","LABEL_FOR_TRASHED_TASKS","components_ToolBar","components_TaskListToggleButton","OptionButton","isSelected","OptionBar","options","_ref2$renderOption","renderOption","option","_ref2$renderSelectedO","renderSelectedOption","selectedOption","optionIndex","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","role","_templateObject2","DurationOptionBar","TaskDetails","_ref3$appActions","_ref3$appData","isCreatingTask","selectedTaskId","activeTask","notes","scheduled_minutes","handleUpdateTask","field","[object Object]","handleSaveDuration","newDuration","handleSaveIcon","newNotes","handleSaveLabel","handleSaveNotes","EMPTY_LABEL","EMPTY_NOTES","rawNotes","dangerouslySetInnerHTML","__html","marked","bottom","fontSize","left","overflow","right","top","minutesToHeight","minutes","duration","CardLabel","Math","min","CardIcon","TaskCardContainer","TaskCard_templateObject","onImmediatelySelectTask","onTransitionToTask","isShowingListManager","TaskCard_Container","data-task-id","onChangeTaskPosition","onCreateTask","incompleteTasks","unscheduledTasks","droppedOnTaskId","droppedOnTaskIndex","findIndex","taskCardDropProps","CREATE_TASK_LABEL","components_TaskCard","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","floor","scheduled_time","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","LABEL_FOR_TIMELINE","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","from","to","onClickTask","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isDraggingTask","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","DROP_ZONE_SIZE","pulsingAnimation","keyframes","Trash_templateObject","AnimatedContainer","css","Trash_templateObject2","TrashDropZone","TrashIconContainer","Trash","onChangeIsShowingTrashContents","onDeleteTask","firstUnarchivedList","TrashedCard_templateObject2","random","minOpacity","translationDistance","TrashedCard_templateObject","animation","RestoreButton","TrashedCard","restoreButtonTitle","onRestore","TrashedCard_Container","deletedLists","hasDeletedLists","handleRestoreList","EMPTY_TRASHED_LISTS","components_TrashedCard","LABEL_FOR_RESTORING_LIST","bind","deletedTasks","hasDeletedTasks","handleRestoreTask","EMPTY_TRASHED_TASKS","LABEL_FOR_RESTORING_TASK","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","isShowingSidebar","setIsShowingSidebar","_usePersistentState3","_usePersistentState4","setLists","_usePersistentState5","_usePersistentState6","setSelectedListId","_usePersistentState7","_usePersistentState8","setIsShowingListManager","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","setSelectedTaskId","_usePersistentState13","_usePersistentState14","themeName","setThemeName","setIsCreatingList","setIsCreatingTask","setIsDraggingTask","_useState7","_useState8","setIsShowingTrashContents","_useState9","_useState10","setIsTransitioning","currentListIndex","hasIncompleteTasks","handleDragOver","handleDragEnd","overrides","newListId","currentLists","sample","MOTIVATIONAL_DESCRIPTORS","NEW_LIST_LABEL","setTimeout","updates","prevLists","prevTasks","newTaskId","currentTasks","NEW_TASK_LABEL","NEW_TASK_NOTES","clearTimeout","transition","callback","onChangeIsShowingListManager","newIsShowingListManager","firstUnarchivedTask","newIndex","tasksMinusTarget","slice","moveTaskToTimeline","moveTaskToTaskList","selectNextList","nextListIndex","nextIndex","selectPreviousList","prevListIndex","prevIndex","setTaskDuration","toggleTaskListVisibility","toggleDarkMode","toggleIsEditingCurrentTask","toggleIsShowingListManager","createNewTask","deleteCurrentTask","goBack","reduce","acc","index","cmd + arrowRight","cmd + arrowLeft","cmd + shift + arrowRight","cmd + shift + arrowLeft","cmd + shift + ]","cmd + shift + [","b","d","e","l","n","t","columnWidths","sidebar","listManager","taskDetails","timeline","styled_components_browser_esm","GlobalStyles","components_Trash","components_Sidebar","components_TrashedTasks","components_TaskList","LABEL_FOR_TRASHED_LISTS","LABEL_FOR_LIST_MANAGER","LABEL_FOR_TASK_DETAILS","atoms_Transition","components_TrashedLists","components_ListManager","components_TaskDetails","components_Timeline","rootElement","getElementById","ReactDOM"],"mappings":"iMAEMA,EAAmB,CACrBC,MAAO,MACPC,QAAS,MACTC,MAAO,MACPC,QAAS,MACTC,OAAQ,OAUGC,EAPF,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAHC,EAAAF,EAAaG,iBAAb,IAAAD,EAAyB,UAAzBA,EAAuCE,EAAvCC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,iCACTO,EAAAC,EAAAC,cAAA,IAAAJ,OAAAK,OAAA,CACIC,UAAS,GAAAC,OAAKnB,EAAiBU,GAAtB,QAAAS,OAAuCX,IAC5CG,KCRCS,EAAwB,OACxBC,EAAyB,OAIzBC,EAAmB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,KACxCC,EAAY,OACZC,EAAQ,CACjBC,OAAQ,CAAEC,YAAa,QAASC,KAAI,QAAAR,OAAUI,EAAV,YACpCK,MAAO,CAAEF,YAAa,QAASC,KAAI,QAAAR,OAAUI,EAAV,cAG1BM,EAAgB,CACzB,CACIC,GAAI,EACJC,YAAY,EACZC,MAAO,iBAGFC,GAA4BJ,EAAc,IAAM,IAAIC,GACpDI,EAAgB,GAChBC,GAA4BD,EAAc,IAAM,IAAIJ,GACpDM,EAAgB,QAAAjB,OAAWI,EAAX,SAChBc,EAAiB,QAAAlB,OAAWI,EAAX,WACjBe,EAAe,iBAAAnB,OAAoBkB,EAApB,eACfE,EAAkBhB,EAClBiB,EAAsC,IACtCC,EAAgB,OAChBC,EAAc,QACdC,EAAqB,oCAE5BC,EAAO,CACbA,yBCrCe,CACX,WACA,cACA,UACA,YACA,UACA,YACA,OACA,SACA,WACA,QACA,YACA,OACA,UACA,UACA,YACA,WACA,WACA,YACA,QACA,WACA,QACA,YACA,aACA,OACA,cACA,UACA,QACA,UACA,WACA,QACA,aACA,aDMJA,YAAmB,YACnBA,YAAmB,YACnBA,oBAA2B,mBAC3BA,oBAA2B,mBAC3BA,uBAA8B,eAC9BA,yBAAgC,oBAChCA,yBAAgC,oBAChCA,uBAA8B,eAC9BA,mBAA0B,mBAC1BA,wBAA+B,gBAC/BA,wBAA+B,gBAC/BA,kBAAyB,cACzBA,kBAAyB,cACzBA,eAAsB,WACtBA,eAAA,WACAA,eAAsB,GACtBA,KAAY,CACRC,gBAAiB,uDACjBC,YAAa,qDACbC,yCACI,qGACJC,mBACI,oEACJC,OAAQ,qBACRC,iBACI,mFACJC,iBACI,8DACJC,iBAAkB,kCAClBC,oBAAqB,kCAOnBC,EAAO,CACbA,QAAe,WACfA,EAAKC,cAAgBC,YAAO,GAAKF,EAAKG,SACtCH,EAAKI,WAAa,UAClBJ,EAAKK,yBAA2BL,EAAKG,QACrCH,EAAKM,mBAAqBN,EAAKI,WAC/BJ,EAAKO,OAASC,YAAa,IAAMR,EAAKG,SACtCH,EAAKS,OAASC,YAAe,IAAMV,EAAKI,YACxCJ,EAAKW,KAAOX,EAAKG,QACjBH,EAAKY,WAAaJ,YAAa,IAAMR,EAAKW,MAC1CX,EAAKa,YAAcH,YAAe,GAAKV,EAAKG,SAC5CH,EAAKc,kBAAoBJ,YAAe,GAAKV,EAAKG,SAClDH,EAAKe,mBAAqBf,EAAKG,QAC/BH,EAAKgB,OAASR,YAAa,IAAMR,EAAKG,SACtCH,EAAKiB,aAAejB,EAAKY,WAEzB,IAAMM,EAAQ,CACdA,QAnBgB,WAoBhBA,EAAMjB,cAAgBkB,YAAQ,GAAKD,EAAMf,SACzCe,EAAMd,WAAa,UACnBc,EAAMb,yBAA2Ba,EAAMf,QACvCe,EAAMZ,mBAAqBY,EAAMd,WACjCc,EAAMX,OAASC,YAAa,IAAMU,EAAMf,SACxCe,EAAMT,OAASC,YAAe,GAAKF,YAAa,IAAMU,EAAMf,UAC5De,EAAMP,KAAOH,YAAa,IAAMU,EAAMf,SACtCe,EAAMN,WAAaF,YAAe,GAAKQ,EAAMP,MAC7CO,EAAML,YAAcH,YAAe,GAAKQ,EAAMf,SAC9Ce,EAAMJ,kBAAoBJ,YAAe,GAAKQ,EAAMf,SACpDe,EAAMH,mBAAqBG,EAAMf,QACjCe,EAAMF,OAASN,YAAe,IAAMQ,EAAMP,MAC1CO,EAAMD,aAAeP,YAAe,IAAMQ,EAAMN,YAEzC,IAAMQ,EAAS,CAClBpB,OACAkB,SAGEG,EAAa,CACfC,MAAO,CACHC,UAAW,eACXC,SAAU,eACVC,KAAM,eACNC,WAAY,eACZC,aAAc,eACdC,MAAO,eACPC,aAAc,gBAElBC,aAAc,CACVP,UAAW,CACPQ,UAAW,aACXC,WAAY,SAEhBR,SAAU,CACNO,UAAW,YACXC,WAAY,SAEhBP,KAAM,CACFM,UAAW,kBACXC,WAAY,SAEhBN,WAAY,CACRK,UAAW,MACXC,WAAY,SAEhBL,aAAc,CACVI,UAAW,OACXC,WAAY,SAEhBJ,MAAO,CACHG,UAAW,mBACXC,WAAY,SAEhBH,aAAc,CACVE,UAAW,YACXC,WAAY,WAKxB1E,OAAO2E,KAAKZ,EAAWS,cAAcI,QAAQ,SAAAC,GAAO,IAAAC,EACdf,EAAWS,aAAaK,GAAlDJ,EADwCK,EACxCL,UAAWC,EAD6BI,EAC7BJ,WACnBX,EAAWS,aAAaK,GACpB3E,EAAAC,EAAAC,cAAC2E,EAAD,CAAMnF,SAAU6E,EAAW3E,UAAW4E,MAI9C,IAAMM,EAAQjB,EAAWS,aAEzBQ,EAAMC,aAAe,eE/JNC,UAAOC,IAClB,SAAAxF,GAAA,IAAAyF,EAAAzF,EACI0F,cADJ,IAAAD,KAAAE,EAAA3F,EAEI4F,kBAFJ,IAAAD,KAAAE,EAAA7F,EAGI8F,cAHJ,IAAAD,EAGa,EAHbA,EAAAE,EAAA/F,EAIIgG,eAJJ,IAAAD,EAIc,EAJdA,EAAAE,EAAAjG,EAKIkG,eALJ,IAAAD,EAKc,EALdA,EAAAE,EAAAnG,EAMIoG,eANJ,IAAAD,EAMc,EANdA,EAAAE,EAAArG,EAOIsG,gBAPJ,IAAAD,EAOe,EAPfA,EAAAE,EAAAvG,EAQIwG,gBARJ,IAAAD,EAQe,EARfA,EASIE,EATJzG,EASIyG,MATJ,+BAAA7F,OAYQ8E,EAAM,aAAA9E,OAAgBuD,EAAOsC,EAAMC,MAAM3C,QAAW,OAZ5D,0BAAAnD,OAciBgF,EAAa,EAAI,EAdlC,4BAAAhF,OAemBgF,EAAa,EAAI,EAfpC,eAAAhF,OAiBQoF,EAAO,2CAAApF,OAEqBoF,EAFrB,OAAApF,OAEkCI,EAFlC,+CAAAJ,OAGsBoF,EAHtB,OAAApF,OAGmCI,EAHnC,wBAKD,GAtBd,cAAAJ,OAyBQsF,EAAO,0CAAAtF,OAEoBsF,EAFpB,OAAAtF,OAEiCI,EAFjC,gDAAAJ,OAGuBsF,EAHvB,OAAAtF,OAGoCI,EAHpC,wBAKD,GA9Bd,cAAAJ,OAiCQkF,EAAM,sCAAAlF,OAEiBkF,EAFjB,OAAAlF,OAE6BI,EAF7B,wBAIA,GArCd,cAAAJ,OAwCQ0F,EAAQ,4CAAA1F,OAEqB0F,EAFrB,OAAA1F,OAEmCI,EAFnC,gDAAAJ,OAGsB0F,EAHtB,OAAA1F,OAGoCI,EAHpC,wBAKF,GA7Cd,cAAAJ,OAgDQ4F,EAAQ,2CAAA5F,OAEoB4F,EAFpB,OAAA5F,OAEkCI,EAFlC,iDAAAJ,OAGuB4F,EAHvB,OAAA5F,OAGqCI,EAHrC,wBAKF,GArDd,cAAAJ,OAwDQwF,EAAO,uCAAAxF,OAEiBwF,EAFjB,OAAAxF,OAE8BI,EAF9B,wBAID,GA5Dd,YCAWuE,cAAOoB,EAAPpB,CACX,SAAAvF,GAAA,IAAA4G,EAAA5G,EACI6G,aADJ,IAAAD,EACY,SADZA,EAAAE,EAAA9G,EAEI+G,iBAFJ,IAAAD,EAEgB,MAFhBA,EAAAnB,EAAA3F,EAGI4F,kBAHJ,IAAAD,KAAAqB,EAAAhH,EAIIiH,eAJJ,IAAAD,EAIc,UAJdA,EAAAE,EAAAlH,EAKImH,eALJ,IAAAD,EAKc,EALdA,EAAAE,EAAApH,EAMIqH,eANJ,IAAAD,KAAA,gCAAAxG,OAQmBiG,EARnB,uDAAAjG,OAUsBmG,EAVtB,0BAAAnG,OAWiBgF,EAAa,EAAI,EAXlC,4BAAAhF,OAYmBgF,EAAa,EAAI,EAZpC,0BAAAhF,OAaiByG,EAAU,OAAS,SAbpC,iCAAAzG,OAcuBqG,EAdvB,+CAAArG,OAkBQuG,EAAO,qEAAAvG,OAIuB,QAAdmG,EAAsB,OAAS,MAJxC,WAAAnG,OAKeuG,EALf,OAAAvG,OAK4BI,EAL5B,+CAQD,GA1Bd,+NCKJ,IAAMsG,EAAY/B,YAAOgC,GAASC,MAAM,CACpCT,UAAW,SACXnB,YAAY,GAFEL,CAId,SAAAvF,GAAA,IAAGyH,EAAHzH,EAAGyH,WAAYhB,EAAfzG,EAAeyG,MAAf,oGAAA7F,OAI4BuD,EAAOsC,EAAMC,MAAMvD,WAJ/C,oGAAAvC,OAQmB6G,EAAa,IAAO,EARvC,mCAAA7G,OAS0B6G,EAAa,MAAQ,OAT/C,gIAkBEC,EAAmBnC,YAAOgC,GAASC,MAAM,CAC3CT,UAAW,UADUxB,CAAHoC,IAGK3G,EAGrBoB,GAOAwF,EAAerC,YAAOgC,GAASC,MAAM,CACvCP,QAAS,UADQ1B,CAGjB,SAAAsC,GAAA,IAAGpB,EAAHoB,EAAGpB,MAAH,+BAAA7F,OACkBuD,EAAOsC,EAAMC,MAAMvD,WADrC,sBAAAvC,OAEauD,EAAOsC,EAAMC,MAAM/C,WAFhC,2CAAA/C,OJxCwB,MIwCxB,WAAAA,OAIgCuD,EAAOsC,EAAMC,MAAM3C,OAJnD,oDAAAnD,OAMcI,EANd,oHAcE8G,EAAY,SAAAC,GAKZ,IAJFC,EAIED,EAJFC,SAIEC,EAAAF,EAHFG,kBAGE,IAAAD,EAHW,EAAC,GAGZA,EAFFxG,EAEEsG,EAFFtG,MACGrB,EACDC,OAAAC,EAAA,EAAAD,CAAA0H,EAAA,mCACIN,EACFS,EAAWC,QAAUD,EAAWE,KAAK,SAAAC,GAAS,OAAkB,IAAdA,IAEtD,OACI9H,EAAAC,EAAAC,cAAC6G,EAAD,CAAWG,WAAYA,GACnBlH,EAAAC,EAAAC,cAACmH,EAAD,KAAenG,GACflB,EAAAC,EAAAC,cAACiH,EAAqBtH,EAAa4H,KAKlCM,EAAmB/C,YAAOuC,EAAPvC,CAC5B,SAAAgD,GAAA,IAAG9B,EAAH8B,EAAG9B,MAAH,6CAAA7F,OACgCuD,EAAOsC,EAAMC,MAAMlD,OADnD,4BAAA5C,OJxEwB,MIwExB,WAAAA,OAEyCuD,EAAOsC,EAAMC,MAAM3C,OAF5D,2CAAAnD,OJxEwB,MIwExB,WAAAA,OAIgCuD,EAAOsC,EAAMC,MAAM3C,OAJnD,6DAUSyE,EAAqBjD,YAAOuC,EAAPvC,CAC9B,SAAAkD,GAAA,IAAGC,EAAHD,EAAGC,kBAAmBjC,EAAtBgC,EAAsBhC,MAAtB,qCAAA7F,OACwBuD,EAAOsC,EAAMC,MAAMpD,OAD3C,0IAAA1C,OAQY8H,EAAiB,aAAA9H,OACEuD,EAAOsC,EAAMC,MAAM7C,kBADrB,UAEX,UAVlB,4OAwBWiE,IC/GTa,EAASpD,YAAOgC,GAASC,MAAM,CACjCoB,GAAI,SACJ3B,QAAS,SACTX,SAAU,GACVE,SAAU,KAJCjB,CAMX,SAAAvF,GAAA,IAAGyG,EAAHzG,EAAGyG,MAAH,+BAAA7F,OACkBuD,EAAOsC,EAAMC,MAAMxD,QADrC,8BAAAtC,OLHyB,MKGzB,sBAAAA,OAGauD,EAAOsC,EAAMC,MAAMhD,KAHhC,4EAAA9C,OAMMwB,EANN,6HAAAxB,OAWwBuD,EAAOsC,EAAMC,MAAMxD,QAX3C,gGAmBS2F,EAActD,YAAOoD,EAAPpD,CACvB,SAAAsC,GAAA,IAAGpB,EAAHoB,EAAGpB,MAAH,mEAAA7F,OAEyBuD,EAAOsC,EAAMC,MAAM1C,aAF5C,sBAAApD,OAGauD,EAAOsC,EAAMC,MAAM/C,WAHhC,+FAAA/C,OAQiBuD,EAAOsC,EAAMC,MAAMhD,KARpC,0DAcSoF,EAAevD,YAAOoD,EAAPpD,CACxB,SAAAwC,KAAGgB,SAAHhB,EAAatB,MAAb,2GAOWkC,ICjDAK,eACX,SAAAhJ,GAAA,IAAGyG,EAAHzG,EAAGyG,MAAH,wOAAA7F,OAQuBK,EAAMC,OAAOC,YARpC,6KAAAP,OAesBuD,EAAOsC,EAAMC,MAAMvD,WAfzC,0BAAAvC,OAgBiBuD,EAAOsC,EAAMC,MAAMhD,KAhBpC,oFAAA9C,OAkBqBK,EAAMC,OAAOE,KAlBlC,6QAAAR,OA8BiBuD,EAAOsC,EAAMC,MAAMxD,QA9BpC,qFAAAtC,OAkCiBuD,EAAOsC,EAAMC,MAAMrD,mBAlCpC,qCAAAzC,OAmC4BuD,EAAOsC,EAAMC,MAAMtD,yBAnC/C,uGAAAxC,OAwC+BI,EAxC/B,oFAAAJ,OA4CqBuD,EAAOsC,EAAMC,MAAM/C,WA5CxC,wHAAA/C,OA+CwCuD,EAAOsC,EAAMC,MAAM/C,WA/C3D,4CAAA/C,OAgDmCI,EAhDnC,0FAAAJ,OAmD8BI,EAnD9B,sHAAAJ,OAwDsCuD,EAAOsC,EAAMC,MAAM/C,WAxDzD,0EAAA/C,OA0D4BI,EA1D5B,YAAAJ,OA0DgDI,EA1DhD,gFAAAJ,OA8D4BI,EA9D5B,8SAAAJ,OAuEqCuD,EAAOsC,EAAMC,MAAM/C,WAvExD,6EAAA/C,ONKuB,OMLvB,mCAAAA,ONKuB,OMLvB,0DCeWqI,GAZI1D,YAAOgC,GAASC,MAAM,CACrCX,MAAO,UACPE,UAAW,SACXnB,YAAY,GAHGL,CAKf,SAAAvF,GAAA,IAAGkJ,EAAHlJ,EAAGkJ,gBAAH,4BAAAtI,OACesI,EAAkB,EAAI,EADrC,eAAAtI,OAEMwB,EAFN,oCAAAxB,OAG2BqB,EAAsC,EAHjE,mCCeWkH,GAzBC,SAAAC,GAAa,IAAAC,EACWC,oBAAS,GADpBC,EAAAlJ,OAAAmJ,EAAA,EAAAnJ,CAAAgJ,EAAA,GAClBI,EADkBF,EAAA,GACNG,EADMH,EAAA,GAsBzB,MAAO,CAPW,CACdI,WAAW,EACXF,aACAG,UAfc,WACdF,GAAc,IAedG,YAZgB,SAAAC,GAChBzJ,OAAO2E,KAAKoE,GAAWW,IAAI,SAAAC,GAEvB,OADAF,EAAIG,aAAaC,QAAQF,EAAUZ,EAAUY,IACtCA,IAEXN,GAAc,OC2CPS,GAvDC,SAAAC,GAAoB,IAAAf,EACkBC,oBAAS,GAD3BC,EAAAlJ,OAAAmJ,EAAA,EAAAnJ,CAAAgJ,EAAA,GACzBX,EADyBa,EAAA,GACNc,EADMd,EAAA,GAE1Be,EAAkBC,iBAAO,MAkD/B,MAAO,CATW,CACd7B,oBACA8B,WAAW,EACXC,YA1CgB,SAAAX,GAChBA,EAAIY,iBACJJ,EAAgBK,QAAUb,EAAIc,OACzBlC,GACD2B,GAAqB,IAuCzBQ,WAnCe,SAAAf,GACfA,EAAIY,kBAmCJI,YAhCgB,SAAAhB,GACZA,EAAIc,SAAWN,EAAgBK,SAC/BN,GAAqB,IA+BzBU,OA3BW,SAAAjB,GACXzJ,OAAO2E,KAAKoF,GAAkBL,IAAI,SAAAC,GAC9B,IAAMgB,EAAOlB,EAAIG,aAAagB,QAAQjB,GAChCkB,EACc,IAAhBF,EAAK7C,OACC,KACAgD,MAAMH,GACNA,EACAI,WAAWJ,GAOrB,OALgB,OAAZE,IAEAG,EADwBjB,EAAiBJ,IACzBkB,EAASpB,GAGtBE,IAGXK,GAAqB,+CCtCvBiB,GAAkB,CAAC,QAAS,YAE5BC,GAAU,SAAAC,GAAI,OAChBA,EAAKC,SACLH,GAAgBvB,IAAI,SAAA0B,GAAO,OAAIA,EAAQC,gBAAeC,SAClDH,EAAKC,QAAQC,gBAsENE,GAbc,SAACC,GAAoC,IAA5BC,EAA4BC,UAAA5D,OAAA,QAAA6D,IAAAD,UAAA,GAAAA,UAAA,GAAT,KACrDE,oBAAU,WACN,IAAMC,EAxDuB,SAACL,EAAQM,GAAT,OAAgC,SAAArC,GACjE,IAAMsC,EAAW,GAEbtC,EAAIuC,SACJD,EAASE,KAAK,WAGdxC,EAAIyC,UACJH,EAASE,KAAK,SAGdxC,EAAI0C,SACJJ,EAASE,KAAK,OAGlBF,EAASE,KAAKxC,EAAI5E,KAElB,IAAMuH,EAAqBC,KAAKN,GAC3BrC,IAAI,SAAA4C,GAAO,OAAIA,EAAQjB,gBACvBkB,OACAC,KAAK,KAEVC,KAAQjB,EAAQ,SAACkB,EAASC,GACtB,IAAMC,EAAsBD,EACvBE,MAAM,KACNnD,IAAI,SAAA7E,GAAG,OAAIA,EAAIiI,OAAOzB,gBACtBkB,OACAC,KAAK,KAEV,GAAIJ,IAAuBQ,EAAqB,CAC5C,IAAMG,EAAyC,OAAvBjB,EAClBkB,EAAgBD,GAAmBjB,EAAmBxB,QACtD2C,EAAkBD,GAAiB9B,GAAQ8B,GAC3CE,EAAiBhC,GAAQzB,EAAIc,QASnC,OANKyC,GAAiBvD,EAAIc,SAAWyC,GAChCE,IAAmBD,IAEpBxD,EAAI0D,oBAIHD,IAAmBD,GACnBF,IAAoBC,IAKlBN,EAAQjD,OAOD2D,CACd5B,EACAC,GAKJ,OAFA4B,SAASC,iBAAiB,UAAWzB,GAE9B,kBAAMwB,SAASE,oBAAoB,UAAW1B,KACtD,CAACL,EAAQC,KC5ED+B,GAAA,SAAAC,GAAG,OAAIC,SAASD,EAAK,wICkBpC,IAAMxG,GAAY/B,YAAOoB,GAAKa,MAAM,CAChC5B,YAAY,GADEL,CAGd,SAAAvF,GAAA,IAAGgO,EAAHhO,EAAGgO,WAAYC,EAAfjO,EAAeiO,UAAWxH,EAA1BzG,EAA0ByG,MAA1ByH,EAAAlO,EAAiCmO,4BAAjC,IAAAD,EAAwD,aAAxDA,EAAA,2BAAAtN,OACcqN,EAAY,OAAS,UADnC,yDAAArN,OAGmBqN,EAAY,OAAS,OAHxC,+IAAArN,OAWgBqN,EACM,OADG,cAAArN,OAEWuD,EAAOsC,EAAMC,MAAM3C,QAbvD,gDAAAnD,OAiBgBqN,EAAS,aAAArN,OACUuD,EAAOsC,EAAMC,MAAMxD,SAD7B,WAAAtC,OAEQuD,EAAOsC,EAAMC,MAAMxD,SAnBpD,kCAAAtC,OZdyB,MYczB,sDAAAA,OAuBmBqN,EAAY,EAAI,EAvBnC,iGAAArN,OA0BoBI,EA1BpB,4CAAAJ,OA2BsBI,EA3BtB,4CAAAJ,OA4BuBI,EA5BvB,2CAAAJ,OA6BqBI,EA7BrB,+BAAAJ,OA8BUwB,EA9BV,mBAAAxB,OA+BUuN,EAAqB1H,GA/B/B,iHAAA7F,OAqCuBoN,EAAa,EAAI,EArCxC,uCA2CEI,GAAiB7I,IAAO8I,SAAVC,MAMdC,GAAShJ,YAAOoB,EAAPpB,CACX,SAAAsC,GAAA,IAAG2G,EAAH3G,EAAG2G,QAAH,4BAAA5N,OACe4N,EAAU,GAAM,EAD/B,aAsJWC,kBAjJK,SAAA1G,GAYd,IAAA2G,EAAA3G,EAXF4G,oBAWE,IAAAD,EAXa,GAWbA,EAAAE,EAAA7G,EAVF8G,yBAUE,IAAAD,KAAAE,EAAA/G,EATFiG,kBASE,IAAAc,KAAAC,EAAAhH,EARFiH,mBAQE,IAAAD,KAAAE,EAAAlH,EAPFmH,2BAOE,IAAAD,KAAAE,EAAApH,EANFqH,mBAME,IAAAD,EANY,QAMZA,EAAAE,EAAAtH,EALFuH,cAKE,IAAAD,EALO,SAAAE,GAAK,OAAIA,GAKhBF,EAAAG,EAAAzH,EAJFoG,4BAIE,IAAAqB,EAJqB,aAIrBA,EAAAC,EAAA1H,EAHFwH,aAGE,IAAAE,EAHM,GAGNA,EAAAC,EAAA3H,EAFF4H,cAEE,IAAAD,EAFO,aAEPA,EADCtP,EACDC,OAAAC,EAAA,EAAAD,CAAA0H,EAAA,sJAAAsB,EACgCC,oBAAS,GADzCC,EAAAlJ,OAAAmJ,EAAA,EAAAnJ,CAAAgJ,EAAA,GACK4E,EADL1E,EAAA,GACgBqG,EADhBrG,EAAA,GAAAsG,EAEwCvG,mBAASiG,GAFjDO,EAAAzP,OAAAmJ,EAAA,EAAAnJ,CAAAwP,EAAA,GAEKE,EAFLD,EAAA,GAEoBE,EAFpBF,EAAA,GAAAG,EAG0D3G,mBAAS,MAHnE4G,EAAA7P,OAAAmJ,EAAA,EAAAnJ,CAAA4P,EAAA,GAGKE,EAHLD,EAAA,GAG6BE,EAH7BF,EAAA,GAIIG,EAAsB9F,iBAAO,MAC7B+F,EAAW/F,iBAAO,MAClBgG,EAAsBhG,iBAAO,MAC7BiE,EAAmC,KAAzBuB,EAAc5C,OACxBqD,GAAgBxB,EAEtB/C,oBAAU,WACN+D,EAAiBT,IAClB,CAACA,IAEJtD,oBAAU,WACFgC,GAAaqC,EAAS3F,UACtB2F,EAAS3F,QAAQ8F,SACjBH,EAAS3F,QAAQ+F,UAEtB,CAACJ,EAAUrC,IAEdhC,oBAAU,WACN,IAAM0E,EAAKJ,EAAoB5F,QAC3BgG,GACAP,EAA0BO,EAAGC,eAElC,CAACb,EAAe9B,EAAWsC,IAE9B,IAAMM,EAAcC,sBAAY,WACxB9C,IAAeC,IACf+B,EAAiBT,GACjBK,GAAa,KAElB,CAAC5B,EAAYC,EAAW+B,EAAkBJ,EAAcL,IAE3DtD,oBAAU,YACsB,IAAxBiD,GACA2B,KAEL,CAACA,EAAa3B,IAEjB,IASMrD,EAASkF,kBAAQ,WACnB,IAAMC,EAAe,WACjBrB,EAAOI,GACPH,GAAa,IAGXqB,EAAQ,WACVjB,EAAiBT,GACjBK,GAAa,IAGjB,MAAO,CACHsB,eAAgBD,EAChBE,iBAAkBF,EAClBG,cAAeJ,EACfK,gBAAiBL,EACjBM,OAAUN,EACVO,MAAS,SAAAzH,GACL,GACyC,aAArCA,EAAIc,OAAOa,QAAQC,eACnB8E,EAIA,OAFAQ,IACAlH,EAAIY,kBACG,EAGPZ,EAAIc,SAAWyF,EAAoB1F,UACnCb,EAAIY,iBACJmG,QAIb,CAACd,EAAec,EAAalB,EAAQa,EAAcjB,IAItD,OAFA3D,GAAqBC,EAAQyE,GAGzB/P,EAAAC,EAAAC,cAAC+Q,GAADnR,OAAAK,OAAA,CACIsN,WAAYA,EACZC,UAAWA,EACXwD,IAAKpB,EACLqB,SAAU,EACVvD,qBAAsBA,EACtBwD,QAAU9C,EAAkC,KAAdgC,EAC9Be,cAAe/C,EAAoBgC,EAAc,MAC7CzQ,GAEJG,EAAAC,EAAAC,cAAC8N,GAAD,CAAQC,QAASA,EAASqD,MAAKxR,OAAAyR,EAAA,EAAAzR,CAAA,GAAOsO,IACjCV,EACG1N,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuR,SAAA,KACIxR,EAAAC,EAAAC,cAAA,OACIgR,IAAKlB,EACLsB,MAAO,CACHG,SAAU,WACVC,cAAe,OACfC,QAAS,EACTC,WAAY,WACZC,MAAO,SAGVrC,EAVL,KAYAxP,EAAAC,EAAAC,cAAC2N,GAAD,CACIiE,UAAWpE,EACXwD,IAAKnB,EACLgC,KAAM,EACNT,MAAO,CACHU,OAAM,GAAA3R,OAAKuP,EAAL,OAEVZ,MAAOQ,EACPyC,OAhFL,WACf7C,EAAOI,GACPH,GAAa,IA+EO6C,SA5EH,SAAA3I,GACjBkG,EAAiBlG,EAAIc,OAAO2E,WA+EhBD,EAAOd,EAAUY,EAAcG,4IClMnD,IAAMjI,GAAY/B,YAAOgC,GAASC,MAAM,CACpCX,MAAO,aACPE,UAAW,SACXE,QAAS,gBACTE,QAAS,IAJK5B,CAMd,SAAAvF,GAAA,IAAG+I,EAAH/I,EAAG+I,SAAUL,EAAb1I,EAAa0I,kBAAmBjC,EAAhCzG,EAAgCyG,MAAhC,qCAAA7F,OAEQuD,EAAOsC,EAAMC,MACTqC,EAAW,2BAA6B,iBAHpD,8BAAAnI,ObnByB,MamBzB,kDAAAA,OAQoBmI,EAAW5E,EAAOsC,EAAMC,MAAMpD,OAAS,cAR3D,6BAAA1C,OAUYmI,EACM5E,EAAOsC,EAAMC,MACTqC,EAAW,qBAAuB,qBAEtC,cAdlB,sBAAAnI,OAgBauD,EAAOsC,EAAMC,MAAMrD,mBAhBhC,iDAAAzC,OAkBciB,EAlBd,8BAAAjB,OAmBqBkB,EAnBrB,4BAAAlB,OAoBmBkB,EApBnB,wFAAAlB,OAuBuB8H,EAAoB,IAAM,EAvBjD,uBAAA9H,OAwBamB,EAxBb,eAAAnB,OAyBMwB,EAzBN,2MAAAxB,OAmCwBuD,EAAOsC,EAAMC,MAAMpD,OAnC3C,iCAAA1C,OAqCgBuD,EAAOsC,EAAMC,MACTqC,EAAW,qBAAuB,qBAtCtD,wBA6CS2J,GAA4BnN,YAAOgC,GAASC,MAAM,CAC3DP,QAAS,aACTX,SAAU,IACVE,SAAU,IACVa,SAAS,GAJ4B9B,CAMrC,SAAAsC,GAAA,IAAGkB,EAAHlB,EAAGkB,SAAH,yDAAAnI,OAC4CmI,EAAW,IAAO,IAD9D,+BAAAnI,ObtEyB,MasEzB,oJAUS+R,GAAgBpN,YAAOsD,GAAarB,MAAM,CACnDX,MAAO,SACPI,QAAS,UAFgB1B,CAAHqN,KAIZ/Q,EACOC,EACRC,GAGA8Q,GAAoBtN,YAAOgC,GAASC,MAAM,CACnDX,MAAO,aACPjB,YAAY,EACZqB,QAAS,aACTb,QAAS,EACTiB,SAAS,GALoB9B,CAO7B,SAAAwC,GAAA,IAAGtB,EAAHsB,EAAGtB,MAAH,yEAAA7F,OAEwBuD,EAAOsC,EAAMC,MAAMpD,OAF3C,oFAAA1C,OAK2BI,EAL3B,oBAsGW8R,GA7FE,SAAAvK,GAMX,IALFwK,EAKExK,EALFwK,WACAC,EAIEzK,EAJFyK,QACAC,EAGE1K,EAHF0K,OAGEC,EAAA3K,EAFFyF,kBAEE,IAAAkF,KADC9S,EACDC,OAAAC,EAAA,EAAAD,CAAAkI,EAAA,gDACM4K,EAA+BJ,EAA/BI,aAAcC,EAAiBL,EAAjBK,aAEdC,EAAiDL,EAAjDK,eAAgBC,EAAiCN,EAAjCM,MAAOC,EAA0BP,EAA1BO,eAAgBC,EAAUR,EAAVQ,MAEzCC,EAAOH,EAAMI,KAAK,SAAAD,GAAI,OAAIA,EAAKlS,KAAO0R,IAEtCU,EAAcH,EAAMI,OACtB,SAAAC,GAAI,OAAIA,EAAKC,UAAYb,IAAWY,EAAKE,aAGvChL,EAAWkK,IAAWM,EAEtBS,EAAqBzJ,iBAAO,MAbhC0J,EAekB9K,GAAQ,CAAE+K,UAAWjB,IAAlCkB,EAfL9T,OAAAmJ,EAAA,EAAAnJ,CAAA4T,EAAA,MAAAG,EAiBkBjK,GAAQ,CACxBkK,UAAW,SAACC,EAAQxK,GAChB,IAAMyK,EAAe1G,GAAM/D,EAAI0K,cAAcC,QAAQxB,QACjDsB,GACAnB,EAAakB,EAAQ,CACjBP,YAAY,EACZD,QAASS,OANlBG,EAjBLrU,OAAAmJ,EAAA,EAAAnJ,CAAA+T,EAAA,MA6BIO,EAAe7D,sBAAY,SAAAhH,GAC7BA,EAAIY,iBACJZ,EAAIc,OAAOgK,SACZ,IAEG/I,EAASkF,kBACX,iBAAO,CACHQ,MAAOoD,EACPE,MAAOF,IAEX,CAACA,IAGL/I,GAAqBC,EAAQmI,GAM7B,OACIzT,EAAAC,EAAAC,cAACqU,GAADzU,OAAAK,OAAA,CACIqU,eAAc9B,EACdxB,IAAKuC,EACLtC,SAAU,EACVsD,MAAO3S,EAAK4S,KAAKxS,oBACb0R,EACAO,EACAtU,GAEJG,EAAAC,EAAAC,cAACyU,GAAD,CACIlH,WAAYA,EACZkB,oBACImE,GAAkBE,IAAmBN,EAEzCjN,QAAS,IACTE,QAAS,GACT2L,MAAO,CACHsD,UAAW,UACXC,SAAU,EACVC,WAAY,GAEhBlH,qBA1BiB,SAAA1H,GAAK,iCAAA7F,OACduD,EAAOsC,EAAMC,MAAMrD,mBADL,WA2BtBkM,MAAOkE,EAAKhS,MACZkO,OAAQ,SAAA2F,GACJnC,EAAaF,EAAQ,CAAExR,MAAO6T,OAGrC3B,EAAYxL,QAAU,GACnB5H,EAAAC,EAAAC,cAACiS,GAAD,CAA2B3J,SAAUA,GAChC4K,EAAY5J,IAAI,SAAA8J,GAAI,OACjBtT,EAAAC,EAAAC,cAAA,QAAMyE,IAAK2O,EAAKtS,IAAKsS,EAAK0B,WCxKnCC,GAxBK,SAAAxV,GAA6B,IAA1B+S,EAA0B/S,EAA1B+S,WAAYC,EAAchT,EAAdgT,QACvByC,EAA+B1C,EAA/B0C,aAAcC,EAAiB3C,EAAjB2C,aAEhBC,EADY3C,EAAVM,MACsBM,OAAO,SAAAH,GAAI,OAAKA,EAAKjS,aAC7CoU,EAAcC,KAAOF,EAAiB,CAAC,SAAAlC,GAAI,OAAIA,EAAKhS,SAE1D,OACIlB,EAAAC,EAAAC,cAACoS,GAAD,KACItS,EAAAC,EAAAC,cAACkS,GAAD,CAAehB,QAAS,kBAAM8D,MACzBpT,EAAKyT,mBAETF,EAAY7L,IAAI,SAAA0J,GAAI,OACjBlT,EAAAC,EAAAC,cAACsV,GAAD,CACI7Q,IAAKuO,EAAKlS,GACVwR,WAAYA,EACZC,QAASA,EACTC,OAAQQ,EAAKlS,GACboQ,QAAS,kBAAM+D,EAAajC,EAAKlS,WCRtCyU,GAVc,SAAAhW,GAAA,IAAGiW,EAAHjW,EAAGiW,cAAeC,EAAlBlW,EAAkBkW,sBAAlB,OACzB3V,EAAAC,EAAAC,cAACqI,EAAD,CACIC,SAAUkN,EACVjB,MAAO3S,EAAK4S,KAAKrS,iBACjB+O,QAAS,kBAAMuE,GAAuBD,KAErCA,EAAgB5Q,EAAMb,KAAOa,EAAMV,QCc7BwR,GApBC5Q,YAAOgC,GAASC,MAAM,CAClCX,MAAO,SACPI,QAAS,gBACTX,SAAU,GACVa,QAAS,IAJG5B,CAMZ,SAAAvF,GAAA,IAAGyG,EAAHzG,EAAGyG,MAAH,qCAAA7F,OACwBuD,EAAOsC,EAAMC,MAAMvD,WAD3C,sBAAAvC,OAEauD,EAAOsC,EAAMC,MAAM/C,WAFhC,4BAAA/C,OAGmBI,EAHnB,mIAAAJ,OASiBuD,EAAOsC,EAAMC,MAAMhD,KATpC,wBCuFW0S,GAzFC,SAAApW,GAAsD,IAAnD+S,EAAmD/S,EAAnD+S,WAAYC,EAAuChT,EAAvCgT,QAAShL,EAA8BhI,EAA9BgI,SAAa5H,EAAiBC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,qCAC1DkW,EAAuDnD,EAAvDmD,sBAAuBG,EAAgCtD,EAAhCsD,cAAejD,EAAiBL,EAAjBK,aAG1CkD,EAKAtD,EALAsD,uBACAL,EAIAjD,EAJAiD,cACA3C,EAGAN,EAHAM,MACAC,EAEAP,EAFAO,eACA9M,EACAuM,EADAvM,MAR8D4C,EAWVC,oBAAS,GAXCC,EAAAlJ,OAAAmJ,EAAA,EAAAnJ,CAAAgJ,EAAA,GAW3DkN,EAX2DhN,EAAA,GAWrCiN,EAXqCjN,EAAA,GAa5DkN,EAAenD,EAAMI,KAAK,SAAAD,GAAI,OAAIA,EAAKlS,KAAOgS,IAbca,EAevCjK,GAAQ,CAC/BkK,UAAW,SAAAC,GACPlB,EAAakB,EAAQ,CACjBR,QAASP,EACTmD,WAAW,OAJhBC,EAf2DtW,OAAAmJ,EAAA,EAAAnJ,CAAA+T,EAAA,MA2ClE,OAnBAnI,oBAAU,WACN,IAAKgK,GAAiBU,EAAiBjO,kBAGnC,OAFA8N,GAAwB,QACxBN,GAAsB,GAItBK,IAAyBI,EAAiBjO,oBAC1C8N,GAAwB,GACxBN,GAAsB,KAE3B,CACCS,EAAiBjO,kBACjB6N,EACAN,EACAO,EACAN,IAIA3V,EAAAC,EAAAC,cAAC+H,EAADnI,OAAAK,OAAA,CACIe,MACKwU,EAEKK,EACAjU,EAAKuU,wBACLH,EAAahV,MAHb,IAKNkV,EACAvW,GAEF6V,EAME1V,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuR,SAAA,KACIxR,EAAAC,EAAAC,cAACoW,GAAD,KACItW,EAAAC,EAAAC,cAACqI,EAAD,CACIC,SAAoB,SAAVtC,EACVuO,MAAO3S,EAAK4S,KAAKpS,iBACjB8O,QAAS,kBACL0E,EACc,UAAV5P,EAAoB,OAAS,WAI1B,UAAVA,EACKpB,EAAMf,UACNe,EAAMZ,YAEhBlE,EAAAC,EAAAC,cAACqW,GAAD,CACIb,cAAeA,EACfC,sBAAuBA,KAI9BlO,GA1BLzH,EAAAC,EAAAC,cAACqW,GAAD,CACIb,cAAeA,EACfC,sBAAuBA,0BC5DrCa,GAAexR,YAAOoD,EAAPpD,CACjB,SAAAvF,GAAA,IAAGgX,EAAHhX,EAAGgX,WAAH,2FAAApW,OAGmBoW,EAAa,IAAM,IAHtC,wBAAApW,OAIeoW,EAAa,EAAI,IAJhC,qCAAApW,OAMMwB,EANN,yBAAAxB,OAQMuV,GARN,gCAAAvV,OASMuV,GATN,4DA6CWc,GA9BG,SAAApP,GAAA,IACdqP,EADcrP,EACdqP,QADcC,EAAAtP,EAEduP,oBAFc,IAAAD,EAEC,SAAAE,GAAM,OAAIA,GAFXF,EAAAG,EAAAzP,EAGd0P,4BAHc,IAAAD,EAGS,SAAAD,GAAM,OAAIA,GAHnBC,EAIdE,EAJc3P,EAId2P,eACA/E,EALc5K,EAKd4K,SACGrS,EANWC,OAAAC,EAAA,EAAAD,CAAAwH,EAAA,sFAQdtH,EAAAC,EAAAC,cAACoW,GAAYzW,EACR8W,EAAQnN,IAAI,SAACsN,EAAQI,GAClB,IAAMT,EAAaK,IAAWG,EAE9B,OACIjX,EAAAC,EAAAC,cAACsW,GAAD,CACI7R,IAAKmS,EACLL,WAAYA,EACZrF,QAAS,kBAAMc,EAAS4E,KAEvBL,EACKO,EACIH,EAAaC,EAAQI,GACrBA,GAEJL,EAAaC,EAAQI,qWC7B/C,IAAMC,GAAanS,YAAOgC,GAASC,MAAM,CACrCoB,GAAI,KACJ/B,MAAO,SACPM,QAAS,IACTb,SAAU,EACVE,SAAU,KALKjB,CAOf,SAAAvF,GAAA,IAAGyG,EAAHzG,EAAGyG,MAAH,qCAAA7F,OACwBuD,EAAOsC,EAAMC,MAAMpD,OAD3C,0BAAA1C,OAEiBK,EAAMI,MAAMD,KAF7B,qEAQEuW,GAAkBpS,YAAOoB,EAAPpB,CAAHqS,MAMfC,GAAiBtS,YAAOoB,GAAKa,MAAM,CACrCsQ,KAAM,OADavS,CAAHwS,MAWdC,GAAoBzS,YAAO0R,GAAP1R,CACtB,SAAAsC,GAAA,IAAGpB,EAAHoB,EAAGpB,MAAH,qCAAA7F,OACwBuD,EAAOsC,EAAMC,MAAMpD,OAD3C,2BAAA1C,OnBzCwB,MmByCxB,WAAAA,OAEwCuD,EAAOsC,EAAMC,MAAMvD,WAF3D,aAiGW8U,GA3FK,SAAAlQ,GAAuC,IAAAmQ,EAAAnQ,EAApCgL,kBAAoC,IAAAmF,EAAvB,GAAuBA,EAAAC,EAAApQ,EAAnBiL,eAAmB,IAAAmF,EAAT,GAASA,EAC/C/E,EAAiBL,EAAjBK,aACAgF,EAA0CpF,EAA1CoF,eAAgBC,EAA0BrF,EAA1BqF,eAClBC,EAD4CtF,EAAVQ,MACfE,KAAK,SAAAG,GAAI,OAAIA,EAAKtS,KAAO8W,KAAmB,GAC7D9C,EAA8C+C,EAA9C/C,KAAMhU,EAAwC+W,EAAxC/W,GAAIE,EAAoC6W,EAApC7W,MAAO8W,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,kBAC1BhK,GAAW8J,EAAW/W,GAEtBkX,EAAmB3H,sBACrB,SAAC4H,EAAOnJ,GAAR,OAAkB6D,EAAa7R,EAAI,CAAEoX,CAACD,GAAQnJ,KAC9C,CAAChO,EAAI6R,IAGHwF,EAAqB9H,sBACvB,SAAA+H,GAAW,OAAIJ,EAAiB,oBAAqBI,IACrD,CAACJ,IAGCK,EAAiBhI,sBACnB,SAAAiI,GAAQ,OAAIN,EAAiB,OAAQM,IACrC,CAACN,IAGCO,EAAkBlI,sBACpB,SAAAwE,GAAQ,OAAImD,EAAiB,QAASnD,IACtC,CAACmD,IAGCQ,EAAkBnI,sBACpB,SAAAiI,GAAQ,OAAIN,EAAiB,QAASM,IACtC,CAACN,IAGL,OACKjK,GACGjO,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuR,SAAA,KACIxR,EAAAC,EAAAC,cAACiX,GAAD,KACInX,EAAAC,EAAAC,cAACkX,GAAD,KACIpX,EAAAC,EAAAC,cAACyU,GAAD,CACIhG,oBAAqBkJ,EACrBhJ,YAAa/M,EAAK6W,YAClB3J,MAAO9N,EACPkO,OAAQqJ,KAGhBzY,EAAAC,EAAAC,cAACoX,GAAD,KACItX,EAAAC,EAAAC,cAACyU,GAAD,CACI9F,YAAa/J,EAAMC,aACnBiK,MAAOgG,EACP5F,OAAQmJ,MAKpBvY,EAAAC,EAAAC,cAACuX,GAAD,CACId,QAASnW,EACTwW,qBAAsB,SAAAF,GAAM,OAAI9W,EAAAC,EAAAC,cAAA,YAAO4W,EAAP,UAChCG,eAAgBgB,EAChBxD,MAAO3S,EAAK4S,KAAKtS,iBACjB8P,SAAUmG,IAGdrY,EAAAC,EAAAC,cAACyU,GAAD,CACItP,YAAU,EACVoJ,aAAW,EACXlJ,OAAQ,EACRsJ,YAAa/M,EAAK8W,YAClB7J,OAAQ,SAAA8J,GAAQ,OACZ7Y,EAAAC,EAAAC,cAAA,OACIE,UAAU,WACV0Y,wBAAyB,CACrBC,OAAQC,KAAOH,OAI3BzK,aAAc,CACV6K,OAAQ,EACRC,SAAUxY,EAAMI,MAAMD,KACtBsY,KAAM,EACNC,SAAU,OACV3H,SAAU,WACV4H,MAAO,EACPC,IAAK,GAETtK,MAAOgJ,EACP5I,OAAQsJ,MCrIba,GAAA,SAAAC,GAAO,sCAAAnZ,OAEHI,EAFG,SAAAJ,OpBUU,GoBVV,aAAAA,OAE0CmZ,EAF1C,eAAAnZ,OAGZoB,EAHY,WAAApB,OAGamZ,EAHb,0FCQtB,IAEMzS,GAAY/B,YAAOgC,GAASC,MAAM,CACpCX,MAAO,aACPI,QAAS,gBACTE,QAAS,GACTb,SAAU,IAJIf,CAMd,SAAAvF,GAAA,IAAGga,EAAHha,EAAGga,SAAUjR,EAAb/I,EAAa+I,SAAUU,EAAvBzJ,EAAuByJ,WAAYhD,EAAnCzG,EAAmCyG,MAAnC,qCAAA7F,OACwBuD,EAAOsC,EAAMC,MAAMvD,WAD3C,8BAAAvC,OrBfyB,MqBezB,8CAAAA,OAIgBmI,EAAW,EAAI,EAJ/B,oBAAAnI,OAMYuD,EAAOsC,EAAMC,MACTqC,EAAW,qBAAuB,eAPlD,iDAAAnI,OAWckZ,GAAgBE,GAX9B,wBAAApZ,OAYe6I,EAAa,EAAI,EAZhC,6DAAA7I,OAcyBI,EAdzB,aAAAJ,OARsB,MAQtB,4EAAAA,OAiBemI,EAAW,IAAM,GAjBhC,eAAAnI,OAkBMwB,EAlBN,gPAAAxB,OA4BmBuD,EAAOsC,EAAMC,MAAMtD,yBA5BtC,qCAAAxC,OA6B4BuD,EAAOsC,EAAMC,MAAMrD,mBA7B/C,mEAAAzC,OA+B4BuD,EAAOsC,EAAMC,MAAMrD,mBA/B/C,sEAAAzC,OAmC4BuD,EAAOsC,EAAMC,MAAMxD,QAnC/C,8CAAAtC,OrBfyB,MqBezB,2CAAAA,OrBfyB,MqBezB,wGAAAA,OAyCmBmI,EAAW,EAAI,GAzClC,kFAAAnI,OARsB,MAQtB,mBAAAA,OA6CUwB,EA7CV,iFAAAxB,OAkDYuD,EAAOsC,EAAMC,MACTqC,EAAW,qBAAuB,qBAnDlD,iFAAAnI,OAyDgCuD,EAAOsC,EAAMC,MAAM5C,mBAzDnD,kFAAAlD,OA8DYuD,EAAOsC,EAAMC,MAAM5C,mBA9D/B,0CAAAlD,OAkEMqZ,GAlEN,2BAAArZ,OAmEiBuD,EAAOsC,EAAMC,MAAMqC,EAAW,OAAS,cAnExD,+BAAAnI,OAoEsBkZ,GAAgBI,KAAKC,IAAI,GAAIH,IApEnD,4BAAApZ,OAuEMwZ,GAvEN,4BAAAxZ,OAwEkBkZ,GAAgBI,KAAKC,IAAI,GAAIH,IAxE/C,wBA6EEC,GAAY1U,YAAOgC,GAASC,MAAM,CACpCX,MAAO,SACPjB,YAAY,GAFEL,CAId,SAAAsC,GAAA,IAAGpB,EAAHoB,EAAGpB,MAAH,sEAAA7F,OAGMwB,EAHN,yBAAAxB,OAKM0G,GALN,qCAAA1G,OAMiBuD,EAAOsC,EAAMC,MAAMhD,KANpC,wBAWE0W,GAAW7U,YAAOgC,GAASC,MAAM,CACnCX,MAAO,SACPI,QAAS,UAFI1B,CAIb,SAAAwC,GAAA,IAAGiS,EAAHjS,EAAGiS,SAAHjS,EAAatB,MAAb,8BAAA7F,OACiBoZ,GAAY,GAAK/Y,EAAMC,OAAOE,KAAOH,EAAMI,MAAMD,KADlE,mCAMSiZ,GAAoB9U,YAAOgC,GAASC,MAAM,CACnD5B,YAAY,EACZqB,QAAS,aACTF,UAAW,SACXI,QAAS,GACTf,QAAS,GALoBb,CAAH+U,MA6Cf7L,kBArCE,SAAAlG,GAAkD,IAA/CwK,EAA+CxK,EAA/CwK,WAAYC,EAAmCzK,EAAnCyK,QAASa,EAA0BtL,EAA1BsL,KAASzT,EAAiBC,OAAAC,EAAA,EAAAD,CAAAkI,EAAA,iCACvDgS,EAAgDxH,EAAhDwH,wBAAyBC,EAAuBzH,EAAvByH,mBAEzBC,EAAyCzH,EAAzCyH,qBAAsBpC,EAAmBrF,EAAnBqF,eAEtB9C,EAAuC1B,EAAvC0B,KAAMhU,EAAiCsS,EAAjCtS,GAAIE,EAA6BoS,EAA7BpS,MAAO+W,EAAsB3E,EAAtB2E,kBAEnBzP,EAAW8K,EAAKtS,KAAO8W,EAPkCpE,EAS3C9K,GAAQ,CAAEkL,UAAW9S,IAAlC4S,EATwD9T,OAAAmJ,EAAA,EAAAnJ,CAAA4T,EAAA,MAoB/D,OACI1T,EAAAC,EAAAC,cAACia,GAADra,OAAAK,OAAA,CACIia,eAAcpZ,EACdyY,SAAUxB,EACVzP,SAAUA,EACV2I,SAAU,EACVsD,MAAO3S,EAAK4S,KAAKzS,yCACjBmP,QAhBY,WACZ8I,EACAF,EAAwBhZ,GAI5BiZ,EAAmBjZ,KAWX4S,EACA/T,GAEJG,EAAAC,EAAAC,cAACwZ,GAAD,KAAYxY,GACZlB,EAAAC,EAAAC,cAAC2Z,GAAD,CAAUJ,SAAUxB,GAAoBjD,MC5GrC9G,kBAhDE,SAAAzO,GAA4C,IAAzC+S,EAAyC/S,EAAzC+S,WAAYC,EAA6BhT,EAA7BgT,QAAY5S,EAAiBC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,0BACjD4a,EAAuC7H,EAAvC6H,qBAAsBC,EAAiB9H,EAAjB8H,aAEtBC,EAA2C9H,EAA3C8H,gBAAiBxH,EAA0BN,EAA1BM,MAAOC,EAAmBP,EAAnBO,eAE1BkD,EAAenD,EAAMI,KAAK,SAAAD,GAAI,OAAIA,EAAKlS,KAAOgS,IAE9CwH,EAAmBD,EAAgBlH,OACrC,SAAAC,GAAI,OACCA,EAAK6C,WACN7C,EAAKC,UAAYP,IAChBkD,EAAajV,aAXmC4S,EAc7BjK,GAAQ,CAChCkK,UAAW,SAACC,EAAQxK,GAChB,IAAMkR,EAAkBnN,GAAM/D,EAAI0K,cAAcC,QAAQH,QAClD2G,EAAqBjI,EAAQQ,MAAM0H,UACrC,SAAArH,GAAI,OAAIA,EAAKtS,KAAOyZ,IAExBJ,EAAqBtG,EAAQ2G,MAN9BE,EAdkD9a,OAAAmJ,EAAA,EAAAnJ,CAAA+T,EAAA,MAwBzD,OACI7T,EAAAC,EAAAC,cAAC4Z,GAAsBja,EACnBG,EAAAC,EAAAC,cAACoI,EAAD,CACIgJ,MAAO,CACHU,OAAQuH,GAAgB,KAE5B9E,MAAO3S,EAAK4S,KAAK3S,gBACjBqP,QAAS,kBAAMkJ,MAEdxY,EAAK+Y,mBAETL,EAAiBhR,IAAI,SAAA8J,GAAI,OACtBtT,EAAAC,EAAAC,cAAC4a,GAADhb,OAAAK,OAAA,CACIwE,IAAK2O,EAAKtS,GACVwR,WAAYA,EACZC,QAASA,EACTa,KAAMA,GACFsH,6BC/CTG,GAAA,SAAAxN,GAAG,OAAKA,EAAMA,EAAIZ,MAAM,KAAKnD,IAAI,SAAAwR,GAAG,OAAI1N,GAAM0N,KAAQ,CAAC,EAAG,qMCOzE,IAAMjU,GAAY/B,IAAOC,IAAVgW,MAUTC,GAA2BlW,IAAOC,IACpC,SAAAxF,GAAA,IAAG0I,EAAH1I,EAAG0I,kBAAmBjC,EAAtBzG,EAAsByG,MAAtB,8EAAA7F,OAGckZ,GAAgB,IAH9B,gDAAAlZ,OAMQ8H,EAAiB,cAAA9H,OAAiBuD,EAAOsC,EAAMC,MAAMxD,SAAY,GANzE,aAWEwY,GAAqBjN,eACvB,SAAA5G,GAAqD,IChC1CkS,EDgCRhH,EAAkDlL,EAAlDkL,WAAY4I,EAAsC9T,EAAtC8T,iBAAqBvb,EAAiBC,OAAAC,EAAA,EAAAD,CAAAwH,EAAA,mCACzCuL,EAAiBL,EAAjBK,aADyCwI,EAEhBN,GAAqBpZ,GAFL2Z,EAAAxb,OAAAmJ,EAAA,EAAAnJ,CAAAub,EAAA,GAE1CE,EAF0CD,EAAA,GAE/BE,EAF+BF,EAAA,GAK3CG,GCrCCjC,EDoCS,GAAZ+B,EAAiBC,EAAiC,GAAnBJ,ECpCrB,GAAA/a,OAAOsZ,KAAK+B,MAAMlC,EAAU,IAA5B,KAAAnZ,OAAmCmZ,EAAU,KDgCV3F,EAM7BjK,GAAQ,CACxBkK,UAAW,SAAAC,GAAM,OACblB,EAAakB,EAAQ,CACjBP,YAAY,EACZ2C,WAAW,EACXwF,eAAgBF,OALrBtH,EAN0CrU,OAAAmJ,EAAA,EAAAnJ,CAAA+T,EAAA,MAejD,OAAO7T,EAAAC,EAAAC,cAACgb,GAADpb,OAAAK,OAAA,GAA8BgU,EAAetU,MAgB7C+b,GAZU1N,eAAK,SAAA1G,GAAA,IAAGgL,EAAHhL,EAAGgL,WAAYqJ,EAAfrU,EAAeqU,aAAiBhc,EAAhCC,OAAAC,EAAA,EAAAD,CAAA0H,EAAA,sCAC1BxH,EAAAC,EAAAC,cAAC4b,GAAcjc,EACVkc,KAAMF,EAAe,IAAIrS,IAAI,SAAA4R,GAAgB,OAC1Cpb,EAAAC,EAAAC,cAACib,GAAD,CACIxW,IAAKyW,EACL5I,WAAYA,EACZ4I,iBAAkBA,oME7ClC,IAEMrU,GAAY/B,YAAOuC,GAAWN,MAAM,CACtC/F,MAAOY,EAAKka,oBADEhX,CAAHiX,MAITC,GAAoBlX,IAAOC,IAC7B,SAAAxF,GAAA,IAAG0I,EAAH1I,EAAG0I,kBAAmBjC,EAAtBzG,EAAsByG,MAAtB,mDAAA7F,OAGQ8H,EAAiB,aAAA9H,OACEuD,EAAOsC,EAAMC,MAAM7C,kBADrB,UAEX,UALd,qJAgBE6Y,GAAcnX,IAAOC,IAAVmX,KAEH7C,GAAgB,KAGxB8C,GAAgBrX,IAAOC,IACzB,SAAAqC,GAAA,IAAGgV,EAAHhV,EAAGgV,UAAWC,EAAdjV,EAAciV,QAASrW,EAAvBoB,EAAuBpB,MAAvB,0BAAA7F,OAEQic,EACM,cACApZ,YAAeqZ,EAAU,EAAI,EAAG3Y,EAAOsC,EAAMC,MAAM/C,YAJjE,0CAAA/C,OA7BqB,OA6BrB,QAAAA,OAMwDI,EANxD,yMAAAJ,OAc4BuD,EAAOsC,EAAMC,MAAM3C,OAd/C,6EAAAnD,OA7BqB,OA6BrB,4BAAAA,OAkBmBkc,EAAU,GAAM,EAlBnC,uGA0BEC,GAAoBxX,YAAOyX,GAAPzX,CACtB,SAAAwC,GAAA,IAAGkV,EAAHlV,EAAGkV,0BAA2BC,EAA9BnV,EAA8BmV,cAA9B,8BAAAtc,OACiBI,EADjB,oCAAAJ,OAEsBqc,EAA4B,OAAS,MAF3D,mDAAArc,OAIaI,EAJb,oBAAAJ,OAKWkZ,GAAgBoD,GAL3B,mCAUEC,GAAoB5X,IAAOC,IAC7B,SAAA+C,GAAA,IAAG2U,EAAH3U,EAAG2U,cAAH,+KAAAtc,OAOWkZ,GAAgBoD,GAP3B,mCAoHWzO,kBAxGE,SAAAhG,GASX,IARFsK,EAQEtK,EARFsK,WACAC,EAOEvK,EAPFuK,QACAqF,EAME5P,EANF4P,eACA+E,EAKE3U,EALF2U,KACA5J,EAIE/K,EAJF+K,MACA6J,EAGE5U,EAHF4U,GAEGjd,GACDqI,EAFF6U,YAEEjd,OAAAC,EAAA,EAAAD,CAAAoI,EAAA,8EAAA2L,EAC0BjK,GAAQ,CAAEkK,UAAW,eAA1CkJ,EADLld,OAAAmJ,EAAA,EAAAnJ,CAAA+T,EAAA,MAAA/K,EAEoCC,mBAAS,MAF7CC,EAAAlJ,OAAAmJ,EAAA,EAAAnJ,CAAAgJ,EAAA,GAEKmU,EAFLjU,EAAA,GAEkBkU,EAFlBlU,EAAA,GAAAqS,EAGmCN,GAAqBkC,GAHxD3B,EAAAxb,OAAAmJ,EAAA,EAAAnJ,CAAAub,EAAA,GAGK8B,EAHL7B,EAAA,GAGkB8B,EAHlB9B,EAAA,GAAA+B,EAI8BtC,GAAqB8B,GAJnDS,EAAAxd,OAAAmJ,EAAA,EAAAnJ,CAAAud,EAAA,GAIKE,EAJLD,EAAA,GAIe9B,EAJf8B,EAAA,GAKME,EAAmB/K,EAAnB+K,eALNlO,EAM8BvG,oBAAS,GANvCwG,EAAAzP,OAAAmJ,EAAA,EAAAnJ,CAAAwP,EAAA,GAMKmO,EANLlO,EAAA,GAMemO,EANfnO,EAAA,GAOIoO,EAAiB1K,EAAMI,OAAO,SAAAC,GAAI,OAAIA,EAAK6C,YAP/CyH,EAQ0B7C,GAAqB+B,GAR/Ce,EAAA/d,OAAAmJ,EAAA,EAAAnJ,CAAA8d,EAAA,GAQKE,EARLD,EAAA,GAQaE,EARbF,EAAA,GASIG,EAAaF,EAASP,EACtB1B,EACO,GAATiC,EAAcC,GAAwB,GAAXR,EAAgB/B,GACzCyC,EAAuBjU,iBAAO,MAC9BkU,EAAuBlU,iBAAO,MA0BpC,OAxBA0B,oBAAU,WACN,IAAMyS,EAAa,WACf,IAAMC,EAAM,IAAIC,KAChBnB,EAAc,GAAA7c,OAAI+d,EAAIE,WAAR,KAAAje,OAAsB+d,EAAIG,eACxCb,GAAY,IAEhBS,IACA,IAAMK,EAAQC,YAAYN,EAAY,KACtC,OAAO,kBAAMO,cAAcF,KAC5B,IAEH9S,oBAAU,WAEF+R,GACAQ,EAAqB7T,SACrB8T,EAAqB9T,SAErB8T,EAAqB9T,QAAQuU,SACzB,EACAV,EAAqB7T,QAAQwU,UAAY,MAGlD,CAACnB,EAAUQ,EAAsBC,IAGhCle,EAAAC,EAAAC,cAAC2e,GAAchf,EACXG,EAAAC,EAAAC,cAACgc,GAADpc,OAAAK,OAAA,CACI+Q,IAAKgN,GACDlB,GAEHW,EAAenU,IAAI,SAAA8J,GAAQ,IAAAwL,EACF/D,GAClBzH,EAAKqI,gBAFeoD,EAAAjf,OAAAmJ,EAAA,EAAAnJ,CAAAgf,EAAA,GAIlBnC,EACM,GALYoC,EAAA,GAAAA,EAAA,IAKY,GAAXxB,EAAgB/B,GAEzC,OACIxb,EAAAC,EAAAC,cAACsc,GAAD,CACI7X,IAAK2O,EAAKtS,GACVwR,WAAYA,EACZC,QAASA,EACTiK,0BAA2Bc,EAC3BhV,SAAUsP,IAAmBxE,EAAKtS,GAClC2b,cAAeA,EACfrJ,KAAMA,MAIlBtT,EAAAC,EAAAC,cAAC0c,GAAD,CACI1L,IAAK+M,EACLtB,cACkB,GAAdQ,EACAC,GACY,GAAXG,EAAgB/B,KAGzBxb,EAAAC,EAAAC,cAAC8e,GAAD,CACIxM,WAAYA,EACZqJ,aAAcA,IAEjBE,KAAMiC,GAAYxU,IAAI,SAAAyV,GAAI,OACvBjf,EAAAC,EAAAC,cAACgf,EAAA,SAAD,CAAUva,IAAKsa,GACXjf,EAAAC,EAAAC,cAACic,GAAD,KACInc,EAAAC,EAAAC,cAACmc,GAAD,CAAeC,UAAoB,IAAT2C,IACpB1B,EAAW0B,GAAQ,IAAM,GAD/B,QAIJjf,EAAAC,EAAAC,cAACic,GAAD,KACInc,EAAAC,EAAAC,cAACmc,GAAD,CAAeE,SAAO,IAChBgB,EAAW0B,GAAQ,IAAM,GAD/B,8qBC5K5B,IAAME,GAAc,QAAA9e,OAAWI,EAAX,SAEd2e,GAAmB,SAAA3f,GAAA,IAAGod,EAAHpd,EAAGod,KAAMC,EAATrd,EAASqd,GAAT,OAAkBuC,YAAjBC,KAECzC,EAGAC,IAIrByC,GAAoBva,YAAOgC,EAAPhC,CACtB,SAAAsC,GAAA,IAAGkW,EAAHlW,EAAGkW,eAAgBrV,EAAnBb,EAAmBa,kBAAnB,OAA2CqX,YAA1CC,KAIqBtX,EACZiX,GAAiB,CAAEvC,KAAM,IAAKC,GAAI,MAClCU,EACA4B,GAAiB,CAAEvC,KAAM,EAAGC,GAAI,MAChC,QAGIqC,GAIS3B,EAAiB,IAAM,EACjC2B,GAEPtd,KAIJ6d,GAAgB1a,YAAOua,GAAPva,CAClB,SAAAwC,GAAA,IAAGgW,EAAHhW,EAAGgW,eAAH,mCAAAnd,OACsBmd,EAAiB,MAAQ,OAD/C,aAKEmC,GAAqB3a,YAAOua,IAAmBtY,MAAM,CACvDX,MAAO,SACPI,QAAS,SACTb,QAAS,GAHcb,CAKvB,SAAAgD,GAAA,IAAGwV,EAAHxV,EAAGwV,eAAgBzH,EAAnB/N,EAAmB+N,uBAAwB5N,EAA3CH,EAA2CG,kBAAmBjC,EAA9D8B,EAA8D9B,MAA9D,0BAAA7F,OAEQ8H,EACM,UACAvE,EAAOsC,EAAMC,MACTqX,GAAkBzH,EACZ,UACA,cAPxB,4EAAA1V,OAYgB8H,GAAsBqV,EAAuB,EAAN,GAZvD,uDAAAnd,OAeiBuD,EAAOsC,EAAMC,MAAMxD,QAfpC,wBA6EWid,GAzDD,SAAA1X,GAA4C,IAAzCsK,EAAyCtK,EAAzCsK,WAAYC,EAA6BvK,EAA7BuK,QAAY5S,EAAiBC,OAAAC,EAAA,EAAAD,CAAAoI,EAAA,0BAElD2X,EAIArN,EAJAqN,+BACAC,EAGAtN,EAHAsN,aACA3K,EAEA3C,EAFA2C,aACAvC,EACAJ,EADAI,aAIA4K,EAIA/K,EAJA+K,eACAzH,EAGAtD,EAHAsD,uBACAhD,EAEAN,EAFAM,MACAC,EACAP,EADAO,eAZkDa,EAelCjK,GAAQ,CACxB+J,UAAW,SAAAjB,GACP,GAAIM,IAAmBN,EAAQ,CAC3B,IAAMqN,EAAsBhN,EAAMI,KAC9B,SAAAD,GAAI,OAAIA,EAAKlS,KAAO0R,IAAWQ,EAAKjS,aAGpC8e,GACA5K,EAAa4K,EAAoB/e,IAIzC4R,EAAaF,EAAQ,CACjBzR,YAAY,KAGpB6S,UAAWgM,IAhBR3L,EAf+CrU,OAAAmJ,EAAA,EAAAnJ,CAAA+T,EAAA,MAqCtD,OACI7T,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuR,SAAA,KACIxR,EAAAC,EAAAC,cAACyf,GAAD,CACInC,eAAgBA,EAChBzH,uBAAwBA,EACxB5N,kBAAmBgM,EAAUhM,kBAC7BsM,MAAO3S,EAAK4S,KAAK1S,YACjBoP,QAVQ,kBAChByO,GAAgC9J,KAWvBjR,EAAMd,UAEXhE,EAAAC,EAAAC,cAACwf,GAAD5f,OAAAK,OAAA,CACIqd,eAAgBA,GACZrJ,EACAtU,8mBCzHpB,IAWMkH,GAAY/B,IAAOC,IACrB,kBAAMua,YAALQ,KAEyBC,KAAO,IAAK,KAdxB,SAAAxgB,GAAA,IAAGygB,EAAHzgB,EAAGygB,WAAYC,EAAf1gB,EAAe0gB,oBAAf,OAAyCd,YAAxCe,KAEcD,EACdD,EAGaC,GAUNE,CAAU,CACxBF,oBAAqBF,KAAO,GAAK,GACjCC,WAAYD,KAAO,IAAM,SAW/BK,GAAgBtb,YAAOgC,GAASC,MAAM,CACxCX,MAAO,SACPI,QAAS,SACTb,QAAS,KAHSb,CAKlB,SAAAsC,GAAA,IAAGpB,EAAHoB,EAAGpB,MAAH,qCAAA7F,OACwBuD,EAAOsC,EAAMC,MAAMrD,mBAD3C,iCAAAzC,OAEwBuD,EAAOsC,EAAMC,MAAMtD,yBAF3C,qDAAAxC,OAIauD,EAAOsC,EAAMC,MAAMtD,yBAJhC,sDAAAxC,OAMmBI,EANnB,uIAAAJ,OAWkBI,EAXlB,2FAAAJ,OAe4BuD,EAAOsC,EAAMC,MAAMtD,yBAf/C,0BAAAxC,OAgBiBuD,EAAOsC,EAAMC,MAAMrD,mBAhBpC,wBAqCWyd,GAhBK,SAAA/Y,GAKd,IAJFC,EAIED,EAJFC,SACA+Y,EAGEhZ,EAHFgZ,mBACAC,EAEEjZ,EAFFiZ,UACG5gB,EACDC,OAAAC,EAAA,EAAAD,CAAA0H,EAAA,+CACF,OACIxH,EAAAC,EAAAC,cAACwgB,GAAc7gB,EACXG,EAAAC,EAAAC,cAACogB,GAAD,CAAe7L,MAAO+L,EAAoBpP,QAASqP,GAC/CzgB,EAAAC,EAAAC,cAAC2E,EAAD,CAAMnF,SAAS,WAElB+H,ICrBEyG,kBA9CM,SAAAzO,GAA4C,IAAzC+S,EAAyC/S,EAAzC+S,WAAYC,EAA6BhT,EAA7BgT,QAAY5S,EAAiBC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,0BACrDmT,EAAiBJ,EAAjBI,aAIF+N,EAFYlO,EAAVM,MAEmBM,OAAO,SAAAH,GAAI,OAAIA,EAAKjS,aAEzC2f,EAAkBD,EAAa/Y,OAE/BiZ,EAAoB,SAAAnO,GAAM,OAC5BE,EAAaF,EAAQ,CAAEzR,YAAY,KAEvC,OACIjB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuR,SAAA,MACMoP,GACE5gB,EAAAC,EAAAC,cAAC8G,EAAD,CACIV,MAAM,SACNjB,YAAU,EACVqB,QAAQ,SACR4K,MAAO,CAAEK,QAAS,KAEjB7P,EAAKgf,uBAGXF,GACC5gB,EAAAC,EAAAC,cAACoS,GAAsBzS,EAClB8gB,EAAanX,IAAI,SAAA0J,GAAI,OAClBlT,EAAAC,EAAAC,cAAC6gB,GAAD,CACIpc,IAAKuO,EAAKlS,GACVwf,mBAAoB1e,EAAKkf,yBACzBP,UAAWI,EAAkBI,YAAW/N,EAAKlS,KAE7ChB,EAAAC,EAAAC,cAACsV,GAAD,CACIhD,WAAYA,EACZC,QAASA,EACThF,YAAY,EACZiF,OAAQQ,EAAKlS,YCW9BkN,kBA/CM,SAAAzO,GAA4C,IAAzC+S,EAAyC/S,EAAzC+S,WAAYC,EAA6BhT,EAA7BgT,QAAY5S,EAAiBC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,0BACrDoT,EAAiBJ,EAAjBI,aAIFqO,EAFYzO,EAAVQ,MAEmBI,OAAO,SAAAC,GAAI,OAAIA,EAAKE,aAEzC2N,EAAkBD,EAAatZ,OAE/BwZ,EAAoB,SAAArN,GAAM,OAC5BlB,EAAakB,EAAQ,CAAEP,YAAY,KAEvC,OACIxT,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuR,SAAA,MACM2P,GACEnhB,EAAAC,EAAAC,cAAC8G,EAAD,CACIV,MAAM,SACNjB,YAAU,EACVqB,QAAQ,SACR4K,MAAO,CAAEK,QAAS,KAEjB7P,EAAKuf,uBAGXF,GACCnhB,EAAAC,EAAAC,cAAC4Z,GAAsBja,EAClBqhB,EAAa1X,IAAI,SAAA8J,GAAI,OAClBtT,EAAAC,EAAAC,cAAC6gB,GAAD,CACIpc,IAAK2O,EAAKtS,GACVwf,mBAAoB1e,EAAKwf,yBACzBhQ,MAAO,CAAEO,MAAO,QAChB4O,UAAWW,EAAkBH,YAAW3N,EAAKtS,KAE7ChB,EAAAC,EAAAC,cAAC4a,GAAD,CACItI,WAAYA,EACZC,QAASA,EACTjK,UAAQ,EACR8K,KAAMA,WCzCvBiO,GAAA,SAAC5c,EAAK6c,GAAiB,IAAA1Y,EACFC,oBAAS,GADPC,EAAAlJ,OAAAmJ,EAAA,EAAAnJ,CAAAgJ,EAAA,GAC3B2U,EAD2BzU,EAAA,GACjB0U,EADiB1U,EAAA,GAAAsG,EAERvG,mBAASyY,GAFDjS,EAAAzP,OAAAmJ,EAAA,EAAAnJ,CAAAwP,EAAA,GAE3BmS,EAF2BlS,EAAA,GAEpBmS,EAFoBnS,EAAA,GAsBlC,OAlBA7D,oBAAU,WACN,IAAK+R,EAAU,CACX,IAAMkE,EAAaC,OAAOC,aAAaC,QAAQnd,GAC/C+c,EACK,CAAC,KAAM,aAAatW,SAASuW,GAExBH,EADAO,KAAKC,MAAML,IAGrBjE,GAAY,KAEjB,CAAC/Y,EAAK6c,EAAc/D,IAEvB/R,oBAAU,WACF+R,GACAmE,OAAOC,aAAaI,QAAQtd,EAAKod,KAAKG,UAAUT,KAErD,CAAChE,EAAU9Y,EAAK8c,IAEZ,CAACA,EAAOC,ICWnB,SAASS,KAAM,IAAAC,EACqCb,GAC5C,sBACA,GAHOc,EAAAviB,OAAAmJ,EAAA,EAAAnJ,CAAAsiB,EAAA,GACJE,EADID,EAAA,GACcE,EADdF,EAAA,GAAAG,EAKejB,GAAmB,QAASxgB,GAL3C0hB,EAAA3iB,OAAAmJ,EAAA,EAAAnJ,CAAA0iB,EAAA,GAKJzP,EALI0P,EAAA,GAKGC,EALHD,EAAA,GAAAE,EAMiCpB,GACxC,mBACApgB,GAROyhB,EAAA9iB,OAAAmJ,EAAA,EAAAnJ,CAAA6iB,EAAA,GAMJ3P,EANI4P,EAAA,GAMYC,EANZD,EAAA,GAAAE,EAU6CvB,GACpD,2BACA,GAZOwB,EAAAjjB,OAAAmJ,EAAA,EAAAnJ,CAAAgjB,EAAA,GAUJ5I,EAVI6I,EAAA,GAUkBC,EAVlBD,EAAA,GAAAE,EAce1B,GAAmB,QAASngB,GAd3C8hB,EAAApjB,OAAAmJ,EAAA,EAAAnJ,CAAAmjB,EAAA,GAcJhQ,EAdIiQ,EAAA,GAcGC,EAdHD,EAAA,GAAAE,EAeiC7B,GACxC,mBACAlgB,GAjBOgiB,EAAAvjB,OAAAmJ,EAAA,EAAAnJ,CAAAsjB,EAAA,GAeJtL,EAfIuL,EAAA,GAeYC,EAfZD,EAAA,GAAAE,EAmBuBhC,GAAmB,aAAc,QAnBxDiC,EAAA1jB,OAAAmJ,EAAA,EAAAnJ,CAAAyjB,EAAA,GAmBJE,EAnBID,EAAA,GAmBOE,EAnBPF,EAAA,GAAA1a,EAoBiCC,oBAAS,GApB1CC,EAAAlJ,OAAAmJ,EAAA,EAAAnJ,CAAAgJ,EAAA,GAoBJgK,EApBI9J,EAAA,GAoBY2a,EApBZ3a,EAAA,GAAAsG,EAqBiCvG,oBAAS,GArB1CwG,GAAAzP,OAAAmJ,EAAA,EAAAnJ,CAAAwP,EAAA,GAqBJuI,GArBItI,GAAA,GAqBYqU,GArBZrU,GAAA,GAAAG,GAsBiC3G,oBAAS,GAtB1C4G,GAAA7P,OAAAmJ,EAAA,EAAAnJ,CAAA4P,GAAA,GAsBJ8N,GAtBI7N,GAAA,GAsBYkU,GAtBZlU,GAAA,GAAAmU,GAuBiD/a,oBAAS,GAvB1Dgb,GAAAjkB,OAAAmJ,EAAA,EAAAnJ,CAAAgkB,GAAA,GAuBJ/N,GAvBIgO,GAAA,GAuBoBC,GAvBpBD,GAAA,GAAAE,GAwBmClb,oBAAS,GAxB5Cmb,GAAApkB,OAAAmJ,EAAA,EAAAnJ,CAAAmkB,GAAA,GAwBJtb,GAxBIub,GAAA,GAwBaC,GAxBbD,GAAA,GAyBL9O,GAAkB5E,kBACpB,kBAAMuC,EAAMM,OAAO,SAAAH,GAAI,OAAKA,EAAKjS,cACjC,CAAC8R,IAECqR,GAAmBhP,GAAgBuF,UACrC,SAAAzH,GAAI,OAAIA,EAAKlS,KAAOgS,IAElBuH,GAAkB/J,kBACpB,kBAAMyC,EAAMI,OAAO,SAAAC,GAAI,OAAKA,EAAKE,cACjC,CAACP,IAECoR,GAAqB9J,GAAgB3S,OAErC8N,GADoB3C,EAAMM,OAAO,SAAAH,GAAI,OAAKA,EAAKjS,aAAY2G,QACtB0a,EAE3C5W,oBAAU,WACN,IAAM4Y,EAAiB,kBAAMT,IAAkB,IACzCU,EAAgB,kBAAMV,IAAkB,IAK9C,OAJA1W,SAASC,iBAAiB,WAAYkX,GACtCnX,SAASC,iBAAiB,UAAWmX,GACrCpX,SAASC,iBAAiB,OAAQmX,GAE3B,WACHpX,SAASE,oBAAoB,WAAYiX,GACzCnX,SAASE,oBAAoB,UAAWkX,GACxCpX,SAASE,oBAAoB,OAAQkX,KAE1C,IAEH,IAAMrP,GAAe3E,sBACjB,WAAoB,IAAnBiU,EAAmBhZ,UAAA5D,OAAA,QAAA6D,IAAAD,UAAA,GAAAA,UAAA,GAAP,GACHiZ,EAAYpG,KAAKD,MAEvBsE,EAAS,SAAAgC,GAAY,OACjBA,EAAarkB,OAAO,CAACP,OAAAyR,EAAA,EAAAzR,CAAA,CAEbkB,GAAIyjB,EACJxjB,YAAY,EACZC,MAAK,GAAAb,OAAKskB,IAAO7iB,EAAK8iB,0BAAjB,KAAAvkB,OACDyB,EAAK+iB,iBAENL,OAKf3B,EAAkB4B,GAElBd,GAAkB,GAElBmB,WAAW,kBAAMnB,GAAkB,IAAQ,MAE/C,CAACd,EAAmBH,IAGlB9P,GAAerC,sBACjB,SAACmC,EAAQqS,GACLrC,EAAS,SAAAsC,GAAS,OACdA,EAAUxb,IAAI,SAAA0J,GACV,OAAIA,EAAKlS,KAAO0R,EACL5S,OAAAyR,EAAA,EAAAzR,QAAAyR,EAAA,EAAAzR,CAAA,GACAoT,GACA6R,GAGJ7R,OAInB,CAACwP,IASC7P,GAAetC,sBACjB,SAACwD,EAAQgR,GACL5B,EAAS,SAAA8B,GAAS,OACdA,EAAUzb,IAAI,SAAA8J,GACV,OAAIA,EAAKtS,KAAO+S,EACLjU,OAAAyR,EAAA,EAAAzR,QAAAyR,EAAA,EAAAzR,CAAA,GACAwT,GACAyR,GAGJzR,OAInB,CAAC6P,IAGC7I,GAAe/J,sBACjB,WAAoB,IAAnBiU,EAAmBhZ,UAAA5D,OAAA,QAAA6D,IAAAD,UAAA,GAAAA,UAAA,GAAP,GACH0Z,EAAY7G,KAAKD,MACjBA,EAAM,IAAIC,KACVlB,EAAciB,EAAIE,WAClBlB,EAAgBgB,EAAIG,aAE1B4E,EAAS,SAAAgC,GAAY,MACjB,CAACrlB,OAAAyR,EAAA,EAAAzR,CAAA,CAEOkV,KAAMlQ,EAAMC,aACZ/D,GAAIkkB,EACJ3R,QAASP,EACTQ,YAAY,EACZtS,MAAK,GAAAb,OAAKskB,IAAO7iB,EAAK8iB,0BAAjB,KAAAvkB,OACDyB,EAAKsjB,gBAETpN,MAAOlW,EAAKujB,eACZlP,WAAW,EACX8B,kBAAmB,GACnB0D,eAAc,GAAAtb,OAAK8c,EAAL,KAAA9c,OAAoB+c,IAC/BoH,IAETnkB,OAAO8kB,KAGb7B,EAAkB4B,GAGlBtB,IAAkB,GAElBZ,GAAwB,IAE5B,CAAChQ,EAAgBgQ,EAAyBM,EAAmBH,IAGjEzX,oBAAU,WACN,GAAImM,GAAgB,CAChBmL,GAAwB,GACxB,IAAMxE,EAAQsG,WAAW,kBAAMlB,IAAkB,IAAQ,KACzD,OAAO,kBAAM0B,aAAa9G,MAE/B,CAAC3G,GAAgB+L,GAAmBZ,IAEvC,IAAMuC,GAAahV,sBACf,SAAAiV,GACIrB,IAAmB,GACnBW,WAAW,WACPU,IACArB,IAAmB,IACpBziB,EAAsC,IAE7C,CAACyiB,KAGCnK,GAA0BzJ,sBAC5B,SAAAwD,GACQmG,GACA8I,GAAwB,GAG5BM,EAAkBvP,IAEtB,CAACmG,EAAsB8I,EAAyBM,IAG9CrJ,GAAqB1J,sBACvB,SAAAwD,GACQmG,GACA8I,GAAwB,GAG5BuC,GAAW,kBAAMjC,EAAkBvP,MAEvC,CACImG,EACA8I,EACAM,EACAiC,KAIF5P,GAAwB4M,EAExBkD,GAA+BlV,sBACjC,SAAAmV,GACIH,GAAW,WACPvC,EAAwB0C,GAEpBA,GACAnD,GAAoB,MAIhC,CAACA,EAAqBS,EAAyBuC,KAG7C1F,GAAiCtP,sBAAY,WAC1C+R,GACDC,GAAoB,GAEnBrI,GACD8I,GAAwB,GAE5BgB,IAA2BjO,KAC5B,CACCmE,EACAoI,EACAvM,GACAiN,EACAT,EACAyB,KAGElE,GAAevP,sBACjB,SAAAwD,GACI,GAAI+D,IAAmB/D,EAAQ,CAC3B,IAAM4R,EAAsB1S,EAAME,KAC9B,SAAAG,GAAI,OACAA,EAAKtS,KAAO+S,GACZT,EAAKC,UAAYP,IAChBM,EAAKE,aAGVmS,EACA3L,GAAwB2L,EAAoB3kB,IAE5CykB,IAA6B,GAIrC5S,GAAakB,EAAQ,CACjBP,YAAY,KAGpB,CACIiS,GACAzL,GACAnH,GACAG,EACAC,EACA6E,IAIFhC,GAAgB4N,EAEhBrJ,GAAuB9J,sBACzB,SAACwD,EAAQ6R,GACLzC,EAAS,SAAA8B,GACL,IAAMY,EAAmBZ,EAAU5R,OAC/B,SAAAC,GAAI,OAAIA,EAAKtS,KAAO+S,IAElBT,EAAO2R,EAAU9R,KAAK,SAAAG,GAAI,OAAIA,EAAKtS,KAAO+S,IAEhD,MAAO,GAAG1T,OACNwlB,EAAiBC,MAAM,EAAGF,GAC1B,CAACtS,GACDuS,EAAiBC,MAAMF,OAInC,CAACzC,IAGC4C,GAAqBxV,sBACvB,SAAAhH,GACIA,EAAIY,iBACJ0I,GAAaiF,EAAgB,CACzB3B,WAAW,KAGnB,CAACtD,GAAciF,IAGbkO,GAAqBzV,sBACvB,SAAAhH,GACIA,EAAIY,iBACJ0I,GAAaiF,EAAgB,CACzB3B,WAAW,KAGnB,CAACtD,GAAciF,IAGbmO,GAAiB1V,sBACnB,SAAAhH,GACIA,EAAIY,iBACJ,IAAM+b,EAAgB9B,GAAmB,EACnC+B,EACFD,EAAgB9Q,GAAgBxN,OAAS,EAAI,EAAIse,EACrDrD,EAAkBzN,GAAgB+Q,GAAWnlB,IAC7CgiB,GAAwB,IAE5B,CACIoB,GACApB,EACAH,EACAzN,KAIFgR,GAAqB7V,sBACvB,SAAAhH,GACIA,EAAIY,iBACJ,IAAMkc,EAAgBjC,GAAmB,EACnCkC,EACFD,EAAgB,EAAIjR,GAAgBxN,OAAS,EAAIye,EACrDxD,EAAkBzN,GAAgBkR,GAAWtlB,IAC7CgiB,GAAwB,IAE5B,CACIoB,GACApB,EACAH,EACAzN,KAIFmR,GAAkBhW,sBACpB,SAAAkJ,GACI5G,GAAaiF,EAAgB,CACzBG,kBAAmBwB,KAG3B,CAAC5G,GAAciF,IAGb0O,GAA2BjW,sBAC7B,SAAAhH,GACIA,EAAIY,iBAEAmY,GACA0B,IAA0B,GAG9BrO,IAAuB2M,IAE3B,CAACA,EAAkB3M,KAGjB8Q,GAAiBlW,sBACnB,SAAAhH,GACIA,EAAIY,iBACJ2L,GAA4B,UAAd2N,EAAwB,OAAS,UAEnD,CAAC3N,GAAe2N,IAGdiD,GAA6BnW,sBAC/B,SAAAhH,GACIA,EAAIY,iBACJyZ,IAAkB,IAEtB,CAACA,KAGC+C,GAA6BpW,sBAC/B,SAAAhH,GACIA,EAAIY,iBACJsb,IAA8BvL,IAElC,CAACA,EAAsBuL,KAGrBmB,GAAgBrW,sBAClB,SAAAhH,GACIA,EAAIY,iBACJmQ,MAEJ,CAACA,KAGCuM,GAAoBtW,sBACtB,SAAAhH,GACIA,EAAIY,iBACJ2V,GAAahI,IAEjB,CAACgI,GAAchI,IAGbgP,GAASvW,sBAAY,WACvByT,GAA0B,SAAA5Z,GACtB,GAAIA,EACA,OAAO,IAIf4Y,EAAwB,SAAA5Y,GAAO,OAAKA,KACrC,CAAC4Y,EAAyBgB,KAEvB1Y,GAASkF,kBAAQ,WACnB,OAAO1Q,OAAAyR,EAAA,EAAAzR,QAAAyR,EAAA,EAAAzR,CAAA,GACA,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,KAAKinB,OAAO,SAACC,EAAKvN,EAAUwN,GAChD,OAAOnnB,OAAAyR,EAAA,EAAAzR,QAAAyR,EAAA,EAAAzR,CAAA,GACAknB,GADP,IAEI5O,CAAC6O,EAAQ,GAAIV,GAAgBtF,KAAK,KAAMxH,MAE7C,KANP,IAOIyN,mBAAoBnB,GACpBoB,kBAAmBnB,GACnBoB,2BAA4BnB,GAC5BoB,0BAA2BjB,GAC3BkB,kBAAmBrB,GACnBsB,kBAAmBnB,GACnBoB,EAAKhB,GACLiB,EAAKhB,GACLiB,EAAKhB,GACL3V,OAAU+V,GACVa,EAAKhB,GACLiB,EAAKhB,GACLiB,EAAKhB,MAEV,CACCD,GACAC,GACAC,GACAd,GACAD,GACAE,GACAG,GACAG,GACAC,GACAC,GACAC,GACAC,KAGJtb,GAAqBC,IAErB,IAAMkH,GAAa,CACfmD,yBACA0E,wBACAoL,gCACA5F,kCACA/J,iBACAZ,gBACAoF,gBACAwF,gBACA3K,aA1WiB,SAAAzC,GACjBmQ,EAAkBnQ,GAClB6P,GAAoB,GACpByB,IAA0B,IAwW1BhK,2BACAC,sBACArH,gBACAC,iBAGEJ,GAAU,CACZ8H,mBACA7E,iBACA5C,iBACA+E,kBACA2F,kBACAtD,uBACAnE,0BACAhD,QACAC,iBACA8E,iBACA7E,QACA/M,MAAOud,GAGLqE,GAAepS,GACf,CACIqS,QAASznB,EACT0nB,YAAa,OACbC,YAAa,OACbC,SAAU5nB,GAEd,CACIynB,QAAO,QAAA1nB,OAAUI,EAAV,SACPunB,YAAW,iBAAA3nB,OAAmBE,EAAnB,QAAAF,OAAgDI,EAAhD,SACXwnB,YAAW,iBAAA5nB,OAAmBE,EAAnB,QAAAF,OAAgDI,EAAhD,SACXynB,SAAU3nB,GAGpB,OACIP,EAAAC,EAAAC,cAACioB,EAAA,EAAD,CAAejiB,MAAO,CAAEC,KAAMsd,IAC1BzjB,EAAAC,EAAAC,cAACkoB,GAAD,MACApoB,EAAAC,EAAAC,cAACmoB,GAAD,CAAwB7V,WAAYA,GAAYC,QAASA,KACzDzS,EAAAC,EAAAC,cAAC8G,EAAD,CAASV,MAAM,WACXtG,EAAAC,EAAAC,cAACooB,GAAD,CAAS9V,WAAYA,GAAYC,QAASA,IACrCsD,GACG/V,EAAAC,EAAAC,cAACqoB,GAAD,CACI/V,WAAYA,GACZC,QAASA,KAGbzS,EAAAC,EAAAC,cAACsoB,GAAD,CAAUhW,WAAYA,GAAYC,QAASA,MAInDzS,EAAAC,EAAAC,cAAC6H,EAAD,CACIJ,WAAY,EAAE6V,KAAmB6G,IACjCnjB,MACI6U,GACMjU,EAAK2mB,wBACLvO,EACApY,EAAK4mB,uBACL5mB,EAAK6mB,uBAEfrX,MAAO,CACHO,MAAOqI,EACD4N,GAAaE,YACbF,GAAaG,cAGvBjoB,EAAAC,EAAAC,cAACoW,GAAD,KACItW,EAAAC,EAAAC,cAACqI,EAAD,CACIC,SAAU0R,EACVzF,MAAO3S,EAAK4S,KAAKnS,oBACjB6O,QAAS,kBACLqU,IACKvL,KAIRA,EACGla,EAAAC,EAAAC,cAAC8G,EAAD,CAASJ,QAAS,KACb9B,EAAMT,aACPrE,EAAAC,EAAAC,cAAA,YAAO4B,EAAK6mB,yBAGhB3oB,EAAAC,EAAAC,cAAC8G,EAAD,CAASJ,QAAS,KACb9B,EAAMX,aACPnE,EAAAC,EAAAC,cAAA,YAAO4B,EAAK4mB,2BAK5B1oB,EAAAC,EAAAC,cAAC0oB,GAAD,CAAYjgB,gBAAiBA,IACxBoN,GACG/V,EAAAC,EAAAC,cAAC2oB,GAAD,CACIrW,WAAYA,GACZC,QAASA,KAEbyH,EACAla,EAAAC,EAAAC,cAAC4oB,GAAD,CACItW,WAAYA,GACZC,QAASA,KAGbzS,EAAAC,EAAAC,cAAC6oB,GAAD,CACIvW,WAAYA,GACZC,QAASA,OAMzBzS,EAAAC,EAAAC,cAAC8oB,GAAD,CACIxW,WAAYA,GACZC,QAASA,GACT9K,WAAY,EAAE6V,KAAmB6G,IACjCvM,eAAgBA,EAChB+E,KAAMlb,EACN2P,MAAO,CACHO,MAAOiW,GAAaI,UAExBjV,MAAOsH,GACPuC,GAAIlb,MAOxB,IAAMqnB,GAAc9b,SAAS+b,eAAe,QAC5CC,IAASpa,OAAO/O,EAAAC,EAAAC,cAACiiB,GAAD,MAAS8G","file":"static/js/main.1602ab83.chunk.js","sourcesContent":["import React from 'react';\n\nconst STYLE_PREFIX_MAP = {\n    solid: 'fas',\n    regular: 'far',\n    light: 'fal',\n    duotone: 'fad',\n    brands: 'fab',\n};\n\nconst Icon = ({ iconName, styleName = 'regular', ...otherProps }) => (\n    <i\n        className={`${STYLE_PREFIX_MAP[styleName]} fa-${iconName}`}\n        {...otherProps}\n    />\n);\n\nexport default Icon;\n","import React from 'react';\nimport { darken, lighten, setLightness, transparentize } from 'polished';\nimport MOTIVATIONAL_DESCRIPTORS from './copy/motivational-descriptors';\nimport Icon from './Icon';\n\nexport const SIDEBAR_DEFAULT_WIDTH = '30vw';\nexport const SIDEBAR_EXTENDED_WIDTH = '40vw';\nexport const BORDER_RADIUS = '3px';\nexport const BORDER_WIDTH = '1px';\nexport const BULLET_SIZE = '10px';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '25px';\nexport const FONTS = {\n    NORMAL: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.5)` },\n    LARGE: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.75)` },\n};\nexport const HOURS_PER_SCREEN = 10;\nexport const INITIAL_LISTS = [\n    {\n        id: 1,\n        isArchived: false,\n        label: 'Default List',\n    },\n];\nexport const INITIAL_SELECTED_LIST_ID = (INITIAL_LISTS[0] || {}).id;\nexport const INITIAL_TASKS = [];\nexport const INITIAL_SELECTED_TASK_ID = (INITIAL_TASKS[0] || {}).id;\nexport const LIST_CARD_HEIGHT = `calc(${GRID_UNIT} * 8)`;\nexport const LIST_CARD_SPACING = `calc(${GRID_UNIT} * 0.5)`;\nexport const LIST_CARD_WIDTH = `calc((100% - (${LIST_CARD_SPACING} * 2)) / 3)`;\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const ROUTE_TRANSITION_ANIMATION_DURATION = 250;\nexport const TIMELINE_FROM = '6:00';\nexport const TIMELINE_TO = '30:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.MOTIVATIONAL_DESCRIPTORS = MOTIVATIONAL_DESCRIPTORS;\nCOPY.EMPTY_LABEL = '...label?';\nCOPY.EMPTY_NOTES = '...notes?';\nCOPY.EMPTY_TRASHED_LISTS = 'No Trashed Lists';\nCOPY.EMPTY_TRASHED_TASKS = 'No Trashed Tasks';\nCOPY.LABEL_FOR_LIST_MANAGER = 'Switch Lists';\nCOPY.LABEL_FOR_RESTORING_LIST = 'Restore this List';\nCOPY.LABEL_FOR_RESTORING_TASK = 'Restore this Task';\nCOPY.LABEL_FOR_TASK_DETAILS = 'Back to Task';\nCOPY.LABEL_FOR_TIMELINE = \"Today's Schedule\";\nCOPY.LABEL_FOR_TRASHED_LISTS = 'Trashed Lists';\nCOPY.LABEL_FOR_TRASHED_TASKS = 'Trashed Tasks';\nCOPY.CREATE_LIST_LABEL = 'Create List';\nCOPY.CREATE_TASK_LABEL = 'Create Task';\nCOPY.NEW_LIST_LABEL = 'New List';\nCOPY.NEW_TASK_LABEL = `New Task`;\nCOPY.NEW_TASK_NOTES = '';\nCOPY.TIPS = {\n    CREATE_NEW_TASK: 'Press [N] to create a [N]ew task in the current list',\n    DELETE_TASK: 'Press [T] to move the selected task to the [T]rash',\n    MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE:\n        'Press [⌘]+[LEFT or RIGHT] to move the selected task to the TaskList or Timeline, respectively',\n    MOVE_BETWEEN_LISTS:\n        'Press [⌘]+[SHIFT]+[LEFT or RIGHT] to move between your lists',\n    PREFIX: 'Tip ☝️: ',\n    SETTING_DURATION:\n        'Press keys [1] to [6] to quickly adjust your time estimate for the selected task',\n    TOGGLE_TASK_LIST:\n        'Press [B] to show / hide the side[B]ar of unscheduled tasks',\n    TOGGLE_DARK_MODE: 'Press [D] to toggle [D]ark Mode',\n    TOGGLE_LIST_MANAGER: 'Press [L] to see your [L]ists',\n};\n\nexport { COPY };\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = '#FFB73E';\nDARK.PRIMARY_FADED = darken(0.2, DARK.PRIMARY);\nDARK.BACKGROUND = '#050300';\nDARK.HIGH_CONTRAST_BACKGROUND = DARK.PRIMARY;\nDARK.HIGH_CONTRAST_TEXT = DARK.BACKGROUND;\nDARK.SHADED = setLightness(0.04, DARK.PRIMARY);\nDARK.SHADOW = transparentize(0.95, DARK.BACKGROUND);\nDARK.TEXT = DARK.PRIMARY;\nDARK.TEXT_FADED = setLightness(0.35, DARK.TEXT);\nDARK.TASK_BORDER = transparentize(0.5, DARK.PRIMARY);\nDARK.TASK_BORDER_HOVER = transparentize(0.5, DARK.PRIMARY);\nDARK.TASK_BORDER_ACTIVE = DARK.PRIMARY;\nDARK.BORDER = setLightness(0.15, DARK.PRIMARY);\nDARK.BORDER_FADED = DARK.TEXT_FADED;\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.PRIMARY_FADED = lighten(0.2, LIGHT.PRIMARY);\nLIGHT.BACKGROUND = '#FFFFFF';\nLIGHT.HIGH_CONTRAST_BACKGROUND = LIGHT.PRIMARY;\nLIGHT.HIGH_CONTRAST_TEXT = LIGHT.BACKGROUND;\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.SHADOW = transparentize(0.8, setLightness(0.25, LIGHT.PRIMARY));\nLIGHT.TEXT = setLightness(0.15, LIGHT.PRIMARY);\nLIGHT.TEXT_FADED = transparentize(0.4, LIGHT.TEXT);\nLIGHT.TASK_BORDER = transparentize(0.5, LIGHT.PRIMARY);\nLIGHT.TASK_BORDER_HOVER = transparentize(0.5, LIGHT.PRIMARY);\nLIGHT.TASK_BORDER_ACTIVE = LIGHT.PRIMARY;\nLIGHT.BORDER = transparentize(0.75, LIGHT.TEXT);\nLIGHT.BORDER_FADED = transparentize(0.25, LIGHT.TEXT_FADED);\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\n\nconst ICON_PACKS = {\n    EMOJI: {\n        DARK_MODE: '🌚',\n        END_ZONE: '🗑',\n        LEFT: '👈',\n        LIGHT_MODE: '🌞',\n        LIST_MANAGER: '📚',\n        RIGHT: '👉',\n        TASK_DETAILS: '📌',\n    },\n    FONT_AWESOME: {\n        DARK_MODE: {\n            ICON_NAME: 'moon-stars',\n            STYLE_NAME: 'light',\n        },\n        END_ZONE: {\n            ICON_NAME: 'trash-alt',\n            STYLE_NAME: 'light',\n        },\n        LEFT: {\n            ICON_NAME: 'long-arrow-left',\n            STYLE_NAME: 'light',\n        },\n        LIGHT_MODE: {\n            ICON_NAME: 'sun',\n            STYLE_NAME: 'light',\n        },\n        LIST_MANAGER: {\n            ICON_NAME: 'book',\n            STYLE_NAME: 'light',\n        },\n        RIGHT: {\n            ICON_NAME: 'long-arrow-right',\n            STYLE_NAME: 'light',\n        },\n        TASK_DETAILS: {\n            ICON_NAME: 'thumbtack',\n            STYLE_NAME: 'light',\n        },\n    },\n};\n\nObject.keys(ICON_PACKS.FONT_AWESOME).forEach(key => {\n    const { ICON_NAME, STYLE_NAME } = ICON_PACKS.FONT_AWESOME[key];\n    ICON_PACKS.FONT_AWESOME[key] = (\n        <Icon iconName={ICON_NAME} styleName={STYLE_NAME} />\n    );\n});\n\nconst ICONS = ICON_PACKS.FONT_AWESOME;\n\nICONS.TASK_DEFAULT = '📌';\n\nexport { ICONS };\n","export default [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\n","import styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from './tokens';\n\nexport default styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = 0,\n        marginX = 0,\n        marginY = 0,\n        padding = 0,\n        paddingX = 0,\n        paddingY = 0,\n        theme,\n    }) => `\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        isFlexible = false,\n        justify = 'stretch',\n        spacing = 0,\n        wrapped = false,\n    }) => `\n        align-items: ${align};\n        display: flex;\n        flex-direction: ${direction};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        flex-wrap: ${wrapped ? 'wrap' : 'nowrap'}; \n        justify-content: ${justify};\n        width: 100%;\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_WIDTH,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isDisabled, theme }) => `\n        position: relative;\n        \n        &:before {\n            background-color: ${COLORS[theme.name].BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isDisabled ? 0.25 : 0};\n            pointer-events: ${isDisabled ? 'all' : 'none'};\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 200;\n        }\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})`\n    height: calc(100vh - ${GRID_UNIT});\n    overflow: auto;\n    position: relative;\n    ${UNIFIED_TRANSITION};\n\n    & > * {\n        align-self: stretch;\n    }\n`;\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        border-bottom:\n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({\n    children,\n    disabledIf = [false],\n    label,\n    ...otherProps\n}) => {\n    const isDisabled =\n        disabledIf.length && disabledIf.some(condition => condition === true);\n\n    return (\n        <Container isDisabled={isDisabled}>\n            <ColumnHeader>{label}</ColumnHeader>\n            <ContentContainer {...otherProps}>{children}</ContentContainer>\n        </Container>\n    );\n};\n\nexport const PrimaryAppColumn = styled(AppColumn)(\n    ({ theme }) => `\n        box-shadow: 0 0 10px 10px ${COLORS[theme.name].SHADOW};\n        border-left: ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        border-right: \n            ${BORDER_WIDTH} solid ${COLORS[theme.name].BORDER};\n        overflow: unset;\n        z-index: 11;\n    `\n);\n\nexport const SecondaryAppColumn = styled(AppColumn)(\n    ({ isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        flex-grow: 1;\n        overflow: auto;\n        position: relative;\n        \n        &:before {\n            box-shadow: ${\n                isTargetedForDrop\n                    ? `0 0 0 5px ${COLORS[theme.name].TASK_BORDER_HOVER} inset`\n                    : 'initial'\n            };\n            bottom: 0;\n            content: '';\n            left: 0;\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 1000;\n        }\n    `\n);\n\nexport default AppColumn;\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport { BORDER_RADIUS, COLORS, UNIFIED_TRANSITION } from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    as: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].PRIMARY};\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].TEXT};\n        cursor: pointer;\n        transform: translateY(0);\n        ${UNIFIED_TRANSITION};\n        transition-property: border, color;\n        \n        &:focus,\n        &:hover {\n            border-color: ${COLORS[theme.name].PRIMARY};\n        }\n        &:active {\n            transform: translateY(2px);\n        }\n    `\n);\n\nexport const GhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        border: 2px dashed ${COLORS[theme.name].BORDER_FADED};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n            border-style: solid;\n        }\n    `\n);\n\nexport const ToggleButton = styled(Button)(\n    ({ isActive, theme }) => `\n        background: unset;\n        border: 2px solid transparent;\n        width: auto;\n    `\n);\n\nexport default Button;\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, COLORS, FONTS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: ${FONTS.NORMAL.LINE_HEIGHT};\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: ${FONTS.NORMAL.SIZE};\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        ::placeholder {\n            color: ${COLORS[theme.name].PRIMARY};\n            opacity: 1;\n        }\n        ::selection {\n            color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport {\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Transition = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isTransitioning }) => `\n        opacity: ${isTransitioning ? 0 : 1};\n        ${UNIFIED_TRANSITION};\n        transition-duration: ${ROUTE_TRANSITION_ANIMATION_DURATION / 2}ms;\n    `\n);\n\nexport default Transition;\n","import { useState } from 'react';\n\nconst useDrag = dataTypes => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        Object.keys(dataTypes).map(dataType => {\n            evt.dataTransfer.setData(dataType, dataTypes[dataType]);\n            return dataType;\n        });\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import { useRef, useState } from 'react';\n\nconst useDrop = dataTypeHandlers => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        Object.keys(dataTypeHandlers).map(dataType => {\n            const data = evt.dataTransfer.getData(dataType);\n            const payload =\n                data.length === 0\n                    ? null\n                    : isNaN(data)\n                    ? data\n                    : parseFloat(data);\n\n            if (payload !== null) {\n                const dataTypeHandler = dataTypeHandlers[dataType];\n                dataTypeHandler(payload, evt);\n            }\n\n            return dataType;\n        });\n\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import { useEffect } from 'react';\nimport mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nconst buildKeyboardShortcutHandler = (keyMap, scopedToElementRef) => evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    const currentKeySequence = uniq(keysDown)\n        .map(keyDown => keyDown.toLowerCase())\n        .sort()\n        .join('+');\n\n    mapKeys(keyMap, (handler, sequence) => {\n        const shortcutKeySequence = sequence\n            .split('+')\n            .map(key => key.trim().toLowerCase())\n            .sort()\n            .join('+');\n\n        if (currentKeySequence === shortcutKeySequence) {\n            const scopedToElement = scopedToElementRef !== null;\n            const scopedElement = scopedToElement && scopedToElementRef.current;\n            const scopedToAnInput = scopedElement && isInput(scopedElement);\n            const firedOnAnInput = isInput(evt.target);\n\n            if (\n                (scopedElement && evt.target === scopedElement) ||\n                (firedOnAnInput && !scopedToAnInput)\n            ) {\n                evt.stopPropagation();\n            }\n\n            if (\n                (firedOnAnInput && !scopedToAnInput) ||\n                (scopedToElement && !scopedElement)\n            ) {\n                return false;\n            }\n\n            return handler(evt);\n        }\n    });\n};\n\nconst useKeyboardShortcuts = (keyMap, targetElementRef = null) => {\n    useEffect(() => {\n        const onKeyDown = buildKeyboardShortcutHandler(\n            keyMap,\n            targetElementRef\n        );\n\n        document.addEventListener('keydown', onKeyDown);\n\n        return () => document.removeEventListener('keydown', onKeyDown);\n    }, [keyMap, targetElementRef]);\n};\n\nexport default useKeyboardShortcuts;\n","export default str => parseInt(str, 10);\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditable, isEditing, theme, tracingElementStyles = () => {} }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border:\n                ${\n                    isEditing\n                        ? 'none'\n                        : `2px dashed ${COLORS[theme.name].BORDER}`\n                };\n            box-shadow:\n                ${\n                    isEditing\n                        ? `0 0 0 2px ${COLORS[theme.name].PRIMARY}`\n                        : `0 0 0 0 ${COLORS[theme.name].PRIMARY}`\n                };\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.25 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.25 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n            ${tracingElementStyles(theme)}\n        }\n        \n        &:focus,\n        &:hover {\n            &:before {\n                opacity: ${isEditable ? 1 : 0};\n            }\n        }\n    `\n);\n\nconst StyledTextarea = styled.textarea`\n    display: block;\n    height: 100%;\n    width: 100%;\n`;\n\nconst Canvas = styled(Box)(\n    ({ isEmpty }) => `\n        opacity: ${isEmpty ? 0.6 : 1};\n    `\n);\n\nconst EditInPlace = ({\n    canvasStyles = {},\n    doubleClickToEdit = false,\n    isEditable = true,\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    tracingElementStyles = () => {},\n    value = '',\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const containerElementRef = useRef(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = useCallback(() => {\n        if (isEditable && !isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    }, [isEditable, isEditing, setBufferedValue, setIsEditing, value]);\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [handleClick, isRemotelyActivated]);\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const keyMap = useMemo(() => {\n        const saveAndClose = () => {\n            onSave(bufferedValue);\n            setIsEditing(false);\n        };\n\n        const close = () => {\n            setBufferedValue(value);\n            setIsEditing(false);\n        };\n\n        return {\n            'cmd + escape': close,\n            'shift + escape': close,\n            'cmd + enter': saveAndClose,\n            'shift + enter': saveAndClose,\n            'escape': saveAndClose,\n            'enter': evt => {\n                if (\n                    evt.target.tagName.toLowerCase() === 'textarea' &&\n                    isSingleLine\n                ) {\n                    saveAndClose();\n                    evt.preventDefault();\n                    return false;\n                }\n\n                if (evt.target === containerElementRef.current) {\n                    evt.preventDefault();\n                    handleClick();\n                }\n            },\n        };\n    }, [bufferedValue, handleClick, onSave, isSingleLine, value]);\n\n    useKeyboardShortcuts(keyMap, inputRef);\n\n    return (\n        <Container\n            isEditable={isEditable}\n            isEditing={isEditing}\n            ref={containerElementRef}\n            tabIndex={0}\n            tracingElementStyles={tracingElementStyles}\n            onClick={!doubleClickToEdit ? handleClick : null}\n            onDoubleClick={doubleClickToEdit ? handleClick : null}\n            {...otherProps}\n        >\n            <Canvas isEmpty={isEmpty} style={{ ...canvasStyles }}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <StyledTextarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                height: `${measuringElementHeight}px`,\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Canvas>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React, { useCallback, useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    GRID_UNIT,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport EditInPlace from './EditInPlace';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    direction: 'column',\n    justify: 'space-between',\n    spacing: 0.5,\n})(\n    ({ isActive, isTargetedForDrop, theme }) => `\n        background-color: ${\n            COLORS[theme.name][\n                isActive ? 'HIGH_CONTRAST_BACKGROUND' : 'PRIMARY_FADED'\n            ]\n        };\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 2px ${isActive ? COLORS[theme.name].SHADED : 'transparent'},\n            0 0 0 4px ${\n                isActive\n                    ? COLORS[theme.name][\n                          isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                      ]\n                    : 'transparent'\n            };\n        color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        cursor: pointer;\n        height: ${LIST_CARD_HEIGHT};\n        margin-bottom: ${LIST_CARD_SPACING};\n        margin-left: ${LIST_CARD_SPACING};\n        overflow: hidden;\n        position: relative;\n        transform: scale(${isTargetedForDrop ? 1.1 : 1});\n        width: ${LIST_CARD_WIDTH};\n        ${UNIFIED_TRANSITION};\n        \n        &:nth-child(3n+4) {\n            margin-left: 0;\n        }\n        \n        &:active,\n        &:focus,\n        &:hover {\n            box-shadow:\n                0 0 0 2px ${COLORS[theme.name].SHADED},\n                0 0 0 4px ${\n                    COLORS[theme.name][\n                        isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                    ]\n                };\n        }\n    `\n);\n\nexport const ListCardTaskIconContainer = styled(FlexBox).attrs({\n    justify: 'flex-start',\n    paddingX: 0.25,\n    paddingY: 0.25,\n    wrapped: true,\n})(\n    ({ isActive }) => `\n        background-color: rgba(255, 255, 255, ${isActive ? 0.75 : 0.25});\n        border-radius: ${BORDER_RADIUS};\n        border-top-right-radius: 0;\n        border-top-left-radius: 0;\n        margin: 5px;\n        width: calc(100% - (5px * 2));\n    `\n);\n\nexport const GhostListCard = styled(GhostButton).attrs({\n    align: 'center',\n    justify: 'center',\n})`\n    height: ${LIST_CARD_HEIGHT};\n    margin-bottom: ${LIST_CARD_SPACING};\n    width: ${LIST_CARD_WIDTH};\n`;\n\nexport const ListCardContainer = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n    justify: 'flex-start',\n    padding: 1,\n    wrapped: true,\n})(\n    ({ theme }) => `\n        align-content: flex-start;\n        background-color: ${COLORS[theme.name].SHADED};\n        height: 100%;\n        overflow: auto;\n        padding-bottom: calc(${GRID_UNIT} * 1.5);\n    `\n);\n\nconst ListCard = ({\n    appActions,\n    appData,\n    listId,\n    isEditable = true,\n    ...otherProps\n}) => {\n    const { onUpdateList, onUpdateTask } = appActions;\n\n    const { isCreatingList, lists, selectedListId, tasks } = appData;\n\n    const list = lists.find(list => list.id === listId);\n\n    const tasksInList = tasks.filter(\n        task => task.list_id === listId && !task.isComplete\n    );\n\n    const isActive = listId === selectedListId;\n\n    const listCardElementRef = useRef(null);\n\n    const [dragProps] = useDrag({ 'list-id': listId });\n\n    const [dropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const targetListId = toInt(evt.currentTarget.dataset.listId);\n            if (targetListId) {\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    list_id: targetListId,\n                });\n            }\n        },\n    });\n\n    const triggerClick = useCallback(evt => {\n        evt.preventDefault();\n        evt.target.click();\n    }, []);\n\n    const keyMap = useMemo(\n        () => ({\n            enter: triggerClick,\n            space: triggerClick,\n        }),\n        [triggerClick]\n    );\n\n    useKeyboardShortcuts(keyMap, listCardElementRef);\n\n    const tracingElementStyles = theme => `\n        border-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT}\n    `;\n\n    return (\n        <Container\n            data-list-id={listId}\n            ref={listCardElementRef}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_BETWEEN_LISTS}\n            {...dragProps}\n            {...dropProps}\n            {...otherProps}\n        >\n            <EditInPlace\n                isEditable={isEditable}\n                isRemotelyActivated={\n                    isCreatingList && selectedListId === listId\n                }\n                marginX={0.75}\n                marginY={0.5}\n                style={{\n                    alignSelf: 'stretch',\n                    flexGrow: 0,\n                    flexShrink: 0,\n                }}\n                tracingElementStyles={tracingElementStyles}\n                value={list.label}\n                onSave={newLabel => {\n                    onUpdateList(listId, { label: newLabel });\n                }}\n            />\n            {tasksInList.length >= 1 && (\n                <ListCardTaskIconContainer isActive={isActive}>\n                    {tasksInList.map(task => (\n                        <span key={task.id}>{task.icon}</span>\n                    ))}\n                </ListCardTaskIconContainer>\n            )}\n        </Container>\n    );\n};\n\nexport default ListCard;\n","import sortBy from 'lodash/sortBy';\nimport React from 'react';\nimport { COPY } from './atoms/tokens';\nimport ListCard, { GhostListCard, ListCardContainer } from './ListCard';\n\nconst ListManager = ({ appActions, appData }) => {\n    const { onCreateList, onSelectList } = appActions;\n    const { lists } = appData;\n    const unarchivedLists = lists.filter(list => !list.isArchived);\n    const sortedLists = sortBy(unarchivedLists, [list => list.label]);\n\n    return (\n        <ListCardContainer>\n            <GhostListCard onClick={() => onCreateList()}>\n                {COPY.CREATE_LIST_LABEL}\n            </GhostListCard>\n            {sortedLists.map(list => (\n                <ListCard\n                    key={list.id}\n                    appActions={appActions}\n                    appData={appData}\n                    listId={list.id}\n                    onClick={() => onSelectList(list.id)}\n                />\n            ))}\n        </ListCardContainer>\n    );\n};\n\nexport default ListManager;\n","import React from 'react';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\n\nconst TaskListToggleButton = ({ isSidebarOpen, onChangeIsSidebarOpen }) => (\n    <ToggleButton\n        isActive={isSidebarOpen}\n        title={COPY.TIPS.TOGGLE_TASK_LIST}\n        onClick={() => onChangeIsSidebarOpen(!isSidebarOpen)}\n    >\n        {isSidebarOpen ? ICONS.LEFT : ICONS.RIGHT}\n    </ToggleButton>\n);\n\nexport default TaskListToggleButton;\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'space-between',\n    paddingX: 0.5,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React, { useEffect, useState } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport { SecondaryAppColumn } from './AppColumn';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\nimport SidebarToggleButton from './TaskListToggleButton';\nimport ToolBar from './ToolBar';\n\nconst Sidebar = ({ appActions, appData, children, ...otherProps }) => {\n    const { onChangeIsSidebarOpen, onChangeTheme, onUpdateTask } = appActions;\n\n    const {\n        isShowingTrashContents,\n        isSidebarOpen,\n        lists,\n        selectedListId,\n        theme,\n    } = appData;\n\n    const [isTaskListForcedOpen, setIsTaskListForcedOpen] = useState(false);\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const [sidebarDropProps] = useDrop({\n        'task-id': taskId => {\n            onUpdateTask(taskId, {\n                list_id: selectedListId,\n                scheduled: false,\n            });\n        },\n    });\n\n    useEffect(() => {\n        if (!isSidebarOpen && sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(true);\n            onChangeIsSidebarOpen(true);\n            return;\n        }\n\n        if (isTaskListForcedOpen && !sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(false);\n            onChangeIsSidebarOpen(false);\n        }\n    }, [\n        sidebarDropProps.isTargetedForDrop,\n        isTaskListForcedOpen,\n        isSidebarOpen,\n        setIsTaskListForcedOpen,\n        onChangeIsSidebarOpen,\n    ]);\n\n    return (\n        <SecondaryAppColumn\n            label={\n                !isSidebarOpen\n                    ? ''\n                    : isShowingTrashContents\n                    ? COPY.LABEL_FOR_TRASHED_TASKS\n                    : selectedList.label\n            }\n            {...sidebarDropProps}\n            {...otherProps}\n        >\n            {!isSidebarOpen ? (\n                <SidebarToggleButton\n                    isSidebarOpen={isSidebarOpen}\n                    onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                />\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={COPY.TIPS.TOGGLE_DARK_MODE}\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT'\n                                ? ICONS.DARK_MODE\n                                : ICONS.LIGHT_MODE}\n                        </ToggleButton>\n                        <SidebarToggleButton\n                            isSidebarOpen={isSidebarOpen}\n                            onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                        />\n                    </ToolBar>\n\n                    {children}\n                </>\n            )}\n        </SecondaryAppColumn>\n    );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0.75};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map((option, optionIndex) => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(\n                              renderOption(option, optionIndex),\n                              optionIndex\n                          )\n                        : renderOption(option, optionIndex)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    ICONS,\n    DURATION_OPTIONS,\n    FONTS,\n    BORDER_WIDTH,\n} from './atoms/tokens';\n\nconst TaskHeader = styled(FlexBox).attrs({\n    as: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: ${FONTS.LARGE.SIZE};\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-self: stretch;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst DurationOptionBar = styled(OptionBar)(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        border-top: ${BORDER_WIDTH} solid ${COLORS[theme.name].BACKGROUND};\n    `\n);\n\nconst TaskDetails = ({ appActions = {}, appData = {} }) => {\n    const { onUpdateTask } = appActions;\n    const { isCreatingTask, selectedTaskId, tasks } = appData;\n    const activeTask = tasks.find(task => task.id === selectedTaskId) || {};\n    const { icon, id, label, notes, scheduled_minutes } = activeTask;\n    const isEmpty = !activeTask.id;\n\n    const handleUpdateTask = useCallback(\n        (field, value) => onUpdateTask(id, { [field]: value }),\n        [id, onUpdateTask]\n    );\n\n    const handleSaveDuration = useCallback(\n        newDuration => handleUpdateTask('scheduled_minutes', newDuration),\n        [handleUpdateTask]\n    );\n\n    const handleSaveIcon = useCallback(\n        newNotes => handleUpdateTask('icon', newNotes),\n        [handleUpdateTask]\n    );\n\n    const handleSaveLabel = useCallback(\n        newLabel => handleUpdateTask('label', newLabel),\n        [handleUpdateTask]\n    );\n\n    const handleSaveNotes = useCallback(\n        newNotes => handleUpdateTask('notes', newNotes),\n        [handleUpdateTask]\n    );\n\n    return (\n        !isEmpty && (\n            <>\n                <TaskHeader>\n                    <TaskHeaderLabel>\n                        <EditInPlace\n                            isRemotelyActivated={isCreatingTask}\n                            placeholder={COPY.EMPTY_LABEL}\n                            value={label}\n                            onSave={handleSaveLabel}\n                        />\n                    </TaskHeaderLabel>\n                    <TaskHeaderIcon>\n                        <EditInPlace\n                            placeholder={ICONS.TASK_DEFAULT}\n                            value={icon}\n                            onSave={handleSaveIcon}\n                        />\n                    </TaskHeaderIcon>\n                </TaskHeader>\n\n                <DurationOptionBar\n                    options={DURATION_OPTIONS}\n                    renderSelectedOption={option => <span>{option} mins</span>}\n                    selectedOption={scheduled_minutes}\n                    title={COPY.TIPS.SETTING_DURATION}\n                    onChange={handleSaveDuration}\n                />\n\n                <EditInPlace\n                    isFlexible\n                    isMultiLine\n                    margin={1}\n                    placeholder={COPY.EMPTY_NOTES}\n                    render={rawNotes => (\n                        <div\n                            className=\"markdown\"\n                            dangerouslySetInnerHTML={{\n                                __html: marked(rawNotes),\n                            }}\n                        />\n                    )}\n                    canvasStyles={{\n                        bottom: 0,\n                        fontSize: FONTS.LARGE.SIZE,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                    value={notes}\n                    onSave={handleSaveNotes}\n                />\n            </>\n        )\n    );\n};\n\nexport default TaskDetails;\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 ${isActive ? 2 : 1}px\n            ${\n                COLORS[theme.name][\n                    isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER'\n                ]\n            };\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        width: 100%;\n        z-index: ${isActive ? 100 : 10};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n            \n        &::selection {\n            /*color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};*/\n            color: purple;\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        }\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${\n                COLORS[theme.name][\n                    isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                ]\n            };\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].TASK_BORDER_ACTIVE};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${\n                COLORS[theme.name].TASK_BORDER_ACTIVE\n            } inset;\n        }\n        \n        ${CardLabel} {\n            color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n            min-height: ${minutesToHeight(Math.min(30, duration))};\n        }\n\n        ${CardIcon} {\n            height: ${minutesToHeight(Math.min(30, duration))};\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'center',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ duration, theme }) => `\n        font-size: ${duration <= 15 ? FONTS.NORMAL.SIZE : FONTS.LARGE.SIZE};\n        width: auto;\n    `\n);\n\nexport const TaskCardContainer = styled(FlexBox).attrs({\n    isFlexible: true,\n    justify: 'flex-start',\n    direction: 'column',\n    spacing: 0.5,\n    padding: 1,\n})``;\n\nconst TaskCard = ({ appActions, appData, task, ...otherProps }) => {\n    const { onImmediatelySelectTask, onTransitionToTask } = appActions;\n\n    const { isShowingListManager, selectedTaskId } = appData;\n\n    const { icon, id, label, scheduled_minutes } = task;\n\n    const isActive = task.id === selectedTaskId;\n\n    const [dragProps] = useDrag({ 'task-id': id });\n\n    const handleClick = () => {\n        if (isShowingListManager) {\n            onImmediatelySelectTask(id);\n            return;\n        }\n\n        onTransitionToTask(id);\n    };\n\n    return (\n        <Container\n            data-task-id={id}\n            duration={scheduled_minutes}\n            isActive={isActive}\n            tabIndex={0}\n            title={COPY.TIPS.MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <CardLabel>{label}</CardLabel>\n            <CardIcon duration={scheduled_minutes}>{icon}</CardIcon>\n        </Container>\n    );\n};\n\nexport default memo(TaskCard);\n","import React, { memo } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\n\nconst TaskList = ({ appActions, appData, ...otherProps }) => {\n    const { onChangeTaskPosition, onCreateTask } = appActions;\n\n    const { incompleteTasks, lists, selectedListId } = appData;\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const unscheduledTasks = incompleteTasks.filter(\n        task =>\n            !task.scheduled &&\n            task.list_id === selectedListId &&\n            !selectedList.isArchived\n    );\n\n    const [taskCardDropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n            const droppedOnTaskIndex = appData.tasks.findIndex(\n                task => task.id === droppedOnTaskId\n            );\n            onChangeTaskPosition(taskId, droppedOnTaskIndex);\n        },\n    });\n\n    return (\n        <TaskCardContainer {...otherProps}>\n            <GhostButton\n                style={{\n                    height: minutesToHeight(30),\n                }}\n                title={COPY.TIPS.CREATE_NEW_TASK}\n                onClick={() => onCreateTask()}\n            >\n                {COPY.CREATE_TASK_LABEL}\n            </GhostButton>\n            {unscheduledTasks.map(task => (\n                <TaskCard\n                    key={task.id}\n                    appActions={appActions}\n                    appData={appData}\n                    task={task}\n                    {...taskCardDropProps}\n                />\n            ))}\n        </TaskCardContainer>\n    );\n};\n\nexport default memo(TaskList);\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop({\n            'task-id': taskId =>\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    scheduled: true,\n                    scheduled_time: newTime,\n                }),\n        });\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COLORS, COPY, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: COPY.LABEL_FOR_TIMELINE,\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].TASK_BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${COLORS[theme.name].BORDER};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            opacity: ${isFaded ? 0.5 : 1};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop({ 'task-id': () => {} });\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst DROP_ZONE_SIZE = `calc(${GRID_UNIT} * 4)`;\n\nconst pulsingAnimation = ({ from, to }) => keyframes`\n    0% {\n        transform: scale(${from});\n    }\n    100% {\n        transform: scale(${to});\n    }\n`;\n\nconst AnimatedContainer = styled(FlexBox)(\n    ({ isDraggingTask, isTargetedForDrop }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop\n            ? pulsingAnimation({ from: 1.6, to: 2.4 })\n            : isDraggingTask\n            ? pulsingAnimation({ from: 1, to: 1.6 })\n            : 'unset'};\n        animation-timing-function: ease-in-out;\n        bottom: 0;\n        height: ${DROP_ZONE_SIZE};\n        position: fixed;\n        right: 0;\n        transform-origin: bottom right;\n        transform: scale(${isDraggingTask ? 1.5 : 1});\n        width: ${DROP_ZONE_SIZE};\n        z-index: 1000;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst TrashDropZone = styled(AnimatedContainer)(\n    ({ isDraggingTask }) => `\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n    `\n);\n\nconst TrashIconContainer = styled(AnimatedContainer).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 1,\n})(\n    ({ isDraggingTask, isShowingTrashContents, isTargetedForDrop, theme }) => `\n        color: ${\n            isTargetedForDrop\n                ? '#FF0000'\n                : COLORS[theme.name][\n                      isDraggingTask || isShowingTrashContents\n                          ? 'PRIMARY'\n                          : 'TEXT_FADED'\n                  ]\n        };\n        cursor: pointer;\n        font-size: 3rem;\n        opacity: ${!isTargetedForDrop && !isDraggingTask ? 0.6 : 1};\n        \n        &:hover {\n            color: ${COLORS[theme.name].PRIMARY};\n        }\n    `\n);\n\nconst Trash = ({ appActions, appData, ...otherProps }) => {\n    const {\n        onChangeIsShowingTrashContents,\n        onDeleteTask,\n        onSelectList,\n        onUpdateList,\n    } = appActions;\n\n    const {\n        isDraggingTask,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n    } = appData;\n\n    const [dropProps] = useDrop({\n        'list-id': listId => {\n            if (selectedListId === listId) {\n                const firstUnarchivedList = lists.find(\n                    list => list.id !== listId && !list.isArchived\n                );\n\n                if (firstUnarchivedList) {\n                    onSelectList(firstUnarchivedList.id);\n                }\n            }\n\n            onUpdateList(listId, {\n                isArchived: true,\n            });\n        },\n        'task-id': onDeleteTask,\n    });\n\n    const handleClick = () =>\n        onChangeIsShowingTrashContents(!isShowingTrashContents);\n\n    return (\n        <>\n            <TrashIconContainer\n                isDraggingTask={isDraggingTask}\n                isShowingTrashContents={isShowingTrashContents}\n                isTargetedForDrop={dropProps.isTargetedForDrop}\n                title={COPY.TIPS.DELETE_TASK}\n                onClick={handleClick}\n            >\n                {ICONS.END_ZONE}\n            </TrashIconContainer>\n            <TrashDropZone\n                isDraggingTask={isDraggingTask}\n                {...dropProps}\n                {...otherProps}\n            />\n        </>\n    );\n};\n\nexport default Trash;\n","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport random from 'lodash/random';\nimport FlexBox from './atoms/FlexBox';\nimport Icon from './atoms/Icon';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst animation = ({ minOpacity, translationDistance }) => keyframes`\n    0% {\n        transform: translateY(-${translationDistance}px);\n        opacity: ${minOpacity};\n    }\n    100% {\n        transform: translateY(${translationDistance}px);\n        opacity: 1;\n    }\n`;\n\nconst Container = styled.div(\n    () => css`\n        animation-direction: alternate;\n        animation-duration: ${random(300, 400)}ms;\n        animation-iteration-count: infinite;\n        animation-name: ${animation({\n            translationDistance: random(0.5, 2),\n            minOpacity: random(0.75, 0.9),\n        })};\n        animation-timing-function: ease-in-out;\n        position: relative;\n\n        & > * {\n            width: auto;\n        }\n    `\n);\n\nconst RestoreButton = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 0.25,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        border: 2px solid ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n        border-radius: 100px;\n        color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n        cursor: pointer;\n        height: calc(${GRID_UNIT});\n        position: absolute;\n        right: 0;\n        top: 0;\n        transform: translate(50%, -50%);\n        width: calc(${GRID_UNIT});\n        z-index: 1000;\n        \n        &:hover {\n            background-color: ${COLORS[theme.name].HIGH_CONTRAST_BACKGROUND};\n            color: ${COLORS[theme.name].HIGH_CONTRAST_TEXT};\n        }\n    `\n);\n\nconst TrashedCard = ({\n    children,\n    restoreButtonTitle,\n    onRestore,\n    ...otherProps\n}) => {\n    return (\n        <Container {...otherProps}>\n            <RestoreButton title={restoreButtonTitle} onClick={onRestore}>\n                <Icon iconName=\"reply\" />\n            </RestoreButton>\n            {children}\n        </Container>\n    );\n};\n\nexport default TrashedCard;\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport ListCard, { ListCardContainer } from './ListCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedLists = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateList } = appActions;\n\n    const { lists } = appData;\n\n    const deletedLists = lists.filter(list => list.isArchived);\n\n    const hasDeletedLists = deletedLists.length;\n\n    const handleRestoreList = listId =>\n        onUpdateList(listId, { isArchived: false });\n\n    return (\n        <>\n            {!hasDeletedLists && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_LISTS}\n                </FlexBox>\n            )}\n            {!!hasDeletedLists && (\n                <ListCardContainer {...otherProps}>\n                    {deletedLists.map(list => (\n                        <TrashedCard\n                            key={list.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_LIST}\n                            onRestore={handleRestoreList.bind(this, list.id)}\n                        >\n                            <ListCard\n                                appActions={appActions}\n                                appData={appData}\n                                isEditable={false}\n                                listId={list.id}\n                            />\n                        </TrashedCard>\n                    ))}\n                </ListCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedLists);\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedTasks = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateTask } = appData;\n\n    const { tasks } = appData;\n\n    const deletedTasks = tasks.filter(task => task.isComplete);\n\n    const hasDeletedTasks = deletedTasks.length;\n\n    const handleRestoreTask = taskId =>\n        onUpdateTask(taskId, { isComplete: false });\n\n    return (\n        <>\n            {!hasDeletedTasks && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_TASKS}\n                </FlexBox>\n            )}\n            {!!hasDeletedTasks && (\n                <TaskCardContainer {...otherProps}>\n                    {deletedTasks.map(task => (\n                        <TrashedCard\n                            key={task.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_TASK}\n                            style={{ width: '100%' }}\n                            onRestore={handleRestoreTask.bind(this, task.id)}\n                        >\n                            <TaskCard\n                                appActions={appActions}\n                                appData={appData}\n                                isActive\n                                task={task}\n                            />\n                        </TrashedCard>\n                    ))}\n                </TaskCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedTasks);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                ![null, 'undefined'].includes(savedState)\n                    ? JSON.parse(savedState)\n                    : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import sample from 'lodash/sample';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { PrimaryAppColumn } from './components/AppColumn';\nimport { ToggleButton } from './components/atoms/Button';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport {\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    SIDEBAR_DEFAULT_WIDTH,\n    SIDEBAR_EXTENDED_WIDTH,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\nimport Transition from './components/atoms/Transition';\nimport ListManager from './components/ListManager';\nimport Sidebar from './components/Sidebar';\nimport TaskDetails from './components/TaskDetails';\nimport TaskList from './components/TaskList';\nimport Timeline from './components/Timeline';\nimport ToolBar from './components/ToolBar';\nimport CompletedTasksDropZone from './components/Trash';\nimport TrashedLists from './components/TrashedLists';\nimport TrashedTasks from './components/TrashedTasks';\nimport useKeyboardShortcuts from './hooks/useKeyboardShortcuts';\nimport usePersistentState from './hooks/usePersistentState';\n\nfunction App() {\n    const [isShowingSidebar, setIsShowingSidebar] = usePersistentState(\n        'is-showing-sidebar',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        INITIAL_SELECTED_LIST_ID\n    );\n    const [isShowingListManager, setIsShowingListManager] = usePersistentState(\n        'is-showing-list-manager',\n        true\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        INITIAL_SELECTED_TASK_ID\n    );\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingList, setIsCreatingList] = useState(false);\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const [isShowingTrashContents, setIsShowingTrashContents] = useState(false);\n    const [isTransitioning, setIsTransitioning] = useState(false);\n    const unarchivedLists = useMemo(\n        () => lists.filter(list => !list.isArchived),\n        [lists]\n    );\n    const currentListIndex = unarchivedLists.findIndex(\n        list => list.id === selectedListId\n    );\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n    const hasIncompleteTasks = incompleteTasks.length;\n    const hasUnarchivedList = lists.filter(list => !list.isArchived).length;\n    const isSidebarOpen = hasUnarchivedList && isShowingSidebar;\n\n    useEffect(() => {\n        const handleDragOver = () => setIsDraggingTask(true);\n        const handleDragEnd = () => setIsDraggingTask(false);\n        document.addEventListener('dragover', handleDragOver);\n        document.addEventListener('dragend', handleDragEnd);\n        document.addEventListener('drop', handleDragEnd);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n            document.removeEventListener('dragend', handleDragEnd);\n            document.removeEventListener('drop', handleDragEnd);\n        };\n    }, []);\n\n    const onCreateList = useCallback(\n        (overrides = {}) => {\n            const newListId = Date.now();\n\n            setLists(currentLists =>\n                currentLists.concat([\n                    {\n                        id: newListId,\n                        isArchived: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_LIST_LABEL\n                        }`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedListId(newListId);\n\n            setIsCreatingList(true);\n\n            setTimeout(() => setIsCreatingList(false), 1000);\n        },\n        [setSelectedListId, setLists]\n    );\n\n    const onUpdateList = useCallback(\n        (listId, updates) => {\n            setLists(prevLists =>\n                prevLists.map(list => {\n                    if (list.id === listId) {\n                        return {\n                            ...list,\n                            ...updates,\n                        };\n                    }\n                    return list;\n                })\n            );\n        },\n        [setLists]\n    );\n\n    const onSelectList = listId => {\n        setSelectedListId(listId);\n        setIsShowingSidebar(true);\n        setIsShowingTrashContents(false);\n    };\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                [\n                    {\n                        icon: ICONS.TASK_DEFAULT,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_TASK_LABEL\n                        }`,\n                        notes: COPY.NEW_TASK_NOTES,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ].concat(currentTasks)\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingTask(true);\n\n            setIsShowingListManager(false);\n        },\n        [selectedListId, setIsShowingListManager, setSelectedTaskId, setTasks]\n    );\n\n    useEffect(() => {\n        if (isCreatingTask) {\n            setIsShowingListManager(false);\n            const timer = setTimeout(() => setIsCreatingTask(false), 100);\n            return () => clearTimeout(timer);\n        }\n    }, [isCreatingTask, setIsCreatingTask, setIsShowingListManager]);\n\n    const transition = useCallback(\n        callback => {\n            setIsTransitioning(true);\n            setTimeout(() => {\n                callback();\n                setIsTransitioning(false);\n            }, ROUTE_TRANSITION_ANIMATION_DURATION / 2);\n        },\n        [setIsTransitioning]\n    );\n\n    const onImmediatelySelectTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            setSelectedTaskId(taskId);\n        },\n        [isShowingListManager, setIsShowingListManager, setSelectedTaskId]\n    );\n\n    const onTransitionToTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            transition(() => setSelectedTaskId(taskId));\n        },\n        [\n            isShowingListManager,\n            setIsShowingListManager,\n            setSelectedTaskId,\n            transition,\n        ]\n    );\n\n    const onChangeIsSidebarOpen = setIsShowingSidebar;\n\n    const onChangeIsShowingListManager = useCallback(\n        newIsShowingListManager => {\n            transition(() => {\n                setIsShowingListManager(newIsShowingListManager);\n\n                if (newIsShowingListManager) {\n                    setIsShowingSidebar(true);\n                }\n            });\n        },\n        [setIsShowingSidebar, setIsShowingListManager, transition]\n    );\n\n    const onChangeIsShowingTrashContents = useCallback(() => {\n        if (!isShowingSidebar) {\n            setIsShowingSidebar(true);\n        }\n        if (!isShowingListManager) {\n            setIsShowingListManager(true);\n        }\n        setIsShowingTrashContents(!isShowingTrashContents);\n    }, [\n        isShowingListManager,\n        isShowingSidebar,\n        isShowingTrashContents,\n        setIsShowingListManager,\n        setIsShowingSidebar,\n        setIsShowingTrashContents,\n    ]);\n\n    const onDeleteTask = useCallback(\n        taskId => {\n            if (selectedTaskId === taskId) {\n                const firstUnarchivedTask = tasks.find(\n                    task =>\n                        task.id !== taskId &&\n                        task.list_id === selectedListId &&\n                        !task.isComplete\n                );\n\n                if (firstUnarchivedTask) {\n                    onImmediatelySelectTask(firstUnarchivedTask.id);\n                } else {\n                    onChangeIsShowingListManager(true);\n                }\n            }\n\n            onUpdateTask(taskId, {\n                isComplete: true,\n            });\n        },\n        [\n            onChangeIsShowingListManager,\n            onImmediatelySelectTask,\n            onUpdateTask,\n            selectedListId,\n            tasks,\n            selectedTaskId,\n        ]\n    );\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const moveTaskToTimeline = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: true,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const moveTaskToTaskList = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: false,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const selectNextList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const nextListIndex = currentListIndex + 1;\n            const nextIndex =\n                nextListIndex > unarchivedLists.length - 1 ? 0 : nextListIndex;\n            setSelectedListId(unarchivedLists[nextIndex].id);\n            setIsShowingListManager(true);\n        },\n        [\n            currentListIndex,\n            setIsShowingListManager,\n            setSelectedListId,\n            unarchivedLists,\n        ]\n    );\n\n    const selectPreviousList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const prevListIndex = currentListIndex - 1;\n            const prevIndex =\n                prevListIndex < 0 ? unarchivedLists.length - 1 : prevListIndex;\n            setSelectedListId(unarchivedLists[prevIndex].id);\n            setIsShowingListManager(true);\n        },\n        [\n            currentListIndex,\n            setIsShowingListManager,\n            setSelectedListId,\n            unarchivedLists,\n        ]\n    );\n\n    const setTaskDuration = useCallback(\n        duration => {\n            onUpdateTask(selectedTaskId, {\n                scheduled_minutes: duration,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const toggleTaskListVisibility = useCallback(\n        evt => {\n            evt.preventDefault();\n\n            if (isShowingSidebar) {\n                setIsShowingTrashContents(false);\n            }\n\n            onChangeIsSidebarOpen(!isShowingSidebar);\n        },\n        [isShowingSidebar, onChangeIsSidebarOpen]\n    );\n\n    const toggleDarkMode = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n        },\n        [onChangeTheme, themeName]\n    );\n\n    const toggleIsEditingCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            setIsCreatingTask(true);\n        },\n        [setIsCreatingTask]\n    );\n\n    const toggleIsShowingListManager = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeIsShowingListManager(!isShowingListManager);\n        },\n        [isShowingListManager, onChangeIsShowingListManager]\n    );\n\n    const createNewTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onCreateTask();\n        },\n        [onCreateTask]\n    );\n\n    const deleteCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onDeleteTask(selectedTaskId);\n        },\n        [onDeleteTask, selectedTaskId]\n    );\n\n    const goBack = useCallback(() => {\n        setIsShowingTrashContents(current => {\n            if (current) {\n                return false;\n            }\n        });\n\n        setIsShowingListManager(current => !current);\n    }, [setIsShowingListManager, setIsShowingTrashContents]);\n\n    const keyMap = useMemo(() => {\n        return {\n            ...[15, 30, 45, 60, 90, 120].reduce((acc, duration, index) => {\n                return {\n                    ...acc,\n                    [index + 1]: setTaskDuration.bind(null, duration),\n                };\n            }, {}),\n            'cmd + arrowRight': moveTaskToTimeline,\n            'cmd + arrowLeft': moveTaskToTaskList,\n            'cmd + shift + arrowRight': selectNextList,\n            'cmd + shift + arrowLeft': selectPreviousList,\n            'cmd + shift + ]': selectNextList,\n            'cmd + shift + [': selectPreviousList,\n            'b': toggleTaskListVisibility,\n            'd': toggleDarkMode,\n            'e': toggleIsEditingCurrentTask,\n            'escape': goBack,\n            'l': toggleIsShowingListManager,\n            'n': createNewTask,\n            't': deleteCurrentTask,\n        };\n    }, [\n        createNewTask,\n        deleteCurrentTask,\n        goBack,\n        moveTaskToTaskList,\n        moveTaskToTimeline,\n        selectNextList,\n        selectPreviousList,\n        setTaskDuration,\n        toggleTaskListVisibility,\n        toggleDarkMode,\n        toggleIsEditingCurrentTask,\n        toggleIsShowingListManager,\n    ]);\n\n    useKeyboardShortcuts(keyMap);\n\n    const appActions = {\n        onChangeIsSidebarOpen,\n        onChangeTaskPosition,\n        onChangeIsShowingListManager,\n        onChangeIsShowingTrashContents,\n        onChangeTheme,\n        onCreateList,\n        onCreateTask,\n        onDeleteTask,\n        onSelectList,\n        onImmediatelySelectTask,\n        onTransitionToTask,\n        onUpdateList,\n        onUpdateTask,\n    };\n\n    const appData = {\n        incompleteTasks,\n        isSidebarOpen,\n        isCreatingList,\n        isCreatingTask,\n        isDraggingTask,\n        isShowingListManager,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    const columnWidths = isSidebarOpen\n        ? {\n              sidebar: SIDEBAR_DEFAULT_WIDTH,\n              listManager: '40vw',\n              taskDetails: '40vw',\n              timeline: SIDEBAR_DEFAULT_WIDTH,\n          }\n        : {\n              sidebar: `calc(${GRID_UNIT} * 2)`,\n              listManager: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              taskDetails: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              timeline: SIDEBAR_EXTENDED_WIDTH,\n          };\n\n    return (\n        <ThemeProvider theme={{ name: themeName }}>\n            <GlobalStyle />\n            <CompletedTasksDropZone appActions={appActions} appData={appData} />\n            <FlexBox align=\"stretch\">\n                <Sidebar appActions={appActions} appData={appData}>\n                    {isShowingTrashContents ? (\n                        <TrashedTasks\n                            appActions={appActions}\n                            appData={appData}\n                        />\n                    ) : (\n                        <TaskList appActions={appActions} appData={appData} />\n                    )}\n                </Sidebar>\n\n                <PrimaryAppColumn\n                    disabledIf={[!isDraggingTask && !hasIncompleteTasks]}\n                    label={\n                        isShowingTrashContents\n                            ? COPY.LABEL_FOR_TRASHED_LISTS\n                            : isShowingListManager\n                            ? COPY.LABEL_FOR_LIST_MANAGER\n                            : COPY.LABEL_FOR_TASK_DETAILS\n                    }\n                    style={{\n                        width: isShowingListManager\n                            ? columnWidths.listManager\n                            : columnWidths.taskDetails,\n                    }}\n                >\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={isShowingListManager}\n                            title={COPY.TIPS.TOGGLE_LIST_MANAGER}\n                            onClick={() =>\n                                onChangeIsShowingListManager(\n                                    !isShowingListManager\n                                )\n                            }\n                        >\n                            {isShowingListManager ? (\n                                <FlexBox spacing={0.25}>\n                                    {ICONS.TASK_DETAILS}\n                                    <span>{COPY.LABEL_FOR_TASK_DETAILS}</span>\n                                </FlexBox>\n                            ) : (\n                                <FlexBox spacing={0.25}>\n                                    {ICONS.LIST_MANAGER}\n                                    <span>{COPY.LABEL_FOR_LIST_MANAGER}</span>\n                                </FlexBox>\n                            )}\n                        </ToggleButton>\n                    </ToolBar>\n                    <Transition isTransitioning={isTransitioning}>\n                        {isShowingTrashContents ? (\n                            <TrashedLists\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : isShowingListManager ? (\n                            <ListManager\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : (\n                            <TaskDetails\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        )}\n                    </Transition>\n                </PrimaryAppColumn>\n\n                <Timeline\n                    appActions={appActions}\n                    appData={appData}\n                    disabledIf={[!isDraggingTask && !hasIncompleteTasks]}\n                    selectedTaskId={selectedTaskId}\n                    from={TIMELINE_FROM}\n                    style={{\n                        width: columnWidths.timeline,\n                    }}\n                    tasks={incompleteTasks}\n                    to={TIMELINE_TO}\n                />\n            </FlexBox>\n        </ThemeProvider>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}