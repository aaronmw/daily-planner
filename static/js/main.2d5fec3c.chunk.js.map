{"version":3,"sources":["components/atoms/Icon.js","components/atoms/tokens.js","components/atoms/copy/motivational-descriptors.js","utils/preventWidows.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","utils/toInt.js","components/atoms/Button.js","components/atoms/GlobalStyles.js","components/atoms/Transition.js","hooks/useDrag.js","hooks/useDrop.js","hooks/useKeyboardShortcuts.js","components/ColorPicker.js","components/EditInPlace.js","components/ListCard.js","components/ListManager.js","components/TaskListToggleButton.js","components/ToolBar.js","components/Sidebar.js","components/OptionBar.js","components/TaskDetails.js","utils/minutesToHeight.js","components/TaskCard.js","components/TaskList.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/Trash.js","components/TrashedCard.js","components/TrashedLists.js","components/TrashedTasks.js","hooks/usePersistentState.js","index.js"],"names":["STYLE_PREFIX_MAP","solid","regular","light","duotone","brands","Icon","_ref","iconName","_ref$styleName","styleName","otherProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","SIDEBAR_DEFAULT_WIDTH","SIDEBAR_EXTENDED_WIDTH","DURATION_OPTIONS","GRID_UNIT","FONTS","NORMAL","LINE_HEIGHT","SIZE","LARGE","LIST_CARD_HEIGHT","LIST_CARD_SPACING","LIST_CARD_WIDTH","MIN_SLOT_HEIGHT","ROUTE_TRANSITION_ANIMATION_DURATION","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","BASICALLY","CREATE_NEW_TASK","DELETE_TASK","EDIT_TASK","MOVE_BETWEEN_LISTS","SELECT_NEXT_PREV_TASK","MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE","SETTING_DURATION","TOGGLE_TASK_LIST","TOGGLE_DARK_MODE","TOGGLE_LIST_MANAGER","INITIAL_LISTS","id","color_code","isArchived","label","INITIAL_SELECTED_LIST_ID","INITIAL_TASKS","keys","TIPS","map","tipId","icon","list_id","isComplete","notes","scheduled","scheduled_minutes","scheduled_time","INITIAL_SELECTED_TASK_ID","PRIMARY_COLORS","primaryColor","highContrastTextColor","buildPalette","theme","arguments","length","undefined","colorCode","THEME","colorObj","find","PRIMARY","HIGH_CONTRAST_BACKGROUND","HIGH_CONTRAST_TEXT","TASK_BORDER","transparentize","TASK_BORDER_HOVER","TASK_BORDER_ACTIVE","BACKGROUND","SHADED","setLightness","SHADOW","TEXT","TEXT_FADED","BORDER","BORDER_FADED","NEUTRAL_FOREGROUND","NEUTRAL_BACKGROUND","ICON_PACKS","EMOJI","COLOR_PICKER","DARK_MODE","END_ZONE","LEFT","LIGHT_MODE","LIST_MANAGER","RIGHT","TASK_DETAILS","TIP","FONT_AWESOME","forEach","key","ICON_NAME","atoms_Icon","ICONS","TASK_DEFAULT","buildStyles","propName","propValue","edges","edge","join","Container","styled","div","_ref$border","border","_ref$margin","margin","_ref$marginBottom","marginBottom","_ref$marginLeft","marginLeft","_ref$marginRight","marginRight","_ref$marginTop","marginTop","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingBottom","paddingBottom","_ref$paddingLeft","paddingLeft","_ref$paddingRight","paddingRight","_ref$paddingTop","paddingTop","_ref$paddingX","paddingX","_ref$paddingY","paddingY","_ref$isFlexible","isFlexible","_ref$isRounded","isRounded","_ref$isScrollable","isScrollable","_ref$onClick","onClick","Box","forwardRef","_ref2","ref","str","children","_ref2$preventWidows","preventWidows","trim","replace","String","fromCharCode","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","_ref$wrapped","wrapped","FlexBox","attrs","isDisabled","ContentContainer","_templateObject","ColumnHeader","AppColumn","_ref3","_ref3$disabledIf","disabledIf","some","condition","AppColumn_Container","PrimaryAppColumn","_ref4","SecondaryAppColumn","_ref5","isTargetedForDrop","toInt","parseInt","Button","forwardedAs","_ref$isInverted","isInverted","StyledGhostButton","animation","keyframes","Button_templateObject","TracerSVGElement","svg","_templateObject2","Tracer","rect","isAnimated","isResizing","css","_templateObject3","AnimatedTracer","targetElementRef","_useState","useState","_useState2","slicedToArray","setIsResizing","_useState3","width","height","_useState4","viewBoxDimensions","setViewBoxDimensions","useEffect","timer","setInterval","current","_targetElementRef$cur","offsetWidth","offsetHeight","clearInterval","setTimeout","clearTimeout","preserveAspectRatio","viewBox","xmlns","rx","x","y","GhostButton","_useState5","_useState6","setIsAnimated","buttonElementRef","useRef","onMouseEnter","bind","onMouseLeave","Button_AnimatedTracer","ToggleButton","_ref6","_templateObject4","createGlobalStyle","Transition","isTransitioning","useDrag","dataTypes","isDragging","setIsDragging","draggable","onDragEnd","onDragStart","evt","dataType","dataTransfer","setData","useDrop","dataTypeHandlers","setIsTargetedForDrop","targetedElement","droppable","onDragEnter","preventDefault","target","onDragOver","onDragLeave","onDrop","data","getData","payload","isNaN","parseFloat","dataTypeHandler","INPUT_TAG_NAMES","isInput","node","tagName","toLowerCase","includes","useKeyboardShortcuts","keyMap","onKeyDown","scopedToElementRef","keysDown","ctrlKey","push","shiftKey","metaKey","currentKeySequence","uniq","keyDown","sort","mapKeys","handler","sequence","shortcutKeySequence","split","scopedToElement","scopedElement","scopedToAnInput","firedOnAnInput","stopPropagation","buildKeyboardShortcutHandler","document","addEventListener","removeEventListener","ColorPicker_templateObject","StyledWindowShader","ColorPicker_templateObject2","WindowShader","ReactDOM","createPortal","body","StyledColorPaletteContainer","ColorPaletteContainer","ColorChip","ColorPicker_templateObject3","palette","onPickColor","isPickingColor","setIsPickingColor","ColorPicker_Container","Fragment","ColorPicker_ColorPaletteContainer","style","backgroundColor","ColorPicker_WindowShader","ColorPicker_templateObject4","isEditable","isEditing","_ref$tracingElementSt","tracingElementStyles","StyledTextarea","textarea","EditInPlace_templateObject","Canvas","isEmpty","memo","_ref3$canvasStyles","canvasStyles","_ref3$doubleClickToEd","doubleClickToEdit","_ref3$isEditable","_ref3$isMultiLine","isMultiLine","_ref3$isRemotelyActiv","isRemotelyActivated","_ref3$placeholder","placeholder","_ref3$render","render","value","_ref3$tracingElementS","_ref3$value","_ref3$onSave","onSave","setIsEditing","bufferedValue","setBufferedValue","measuringElementHeight","setMeasuringElementHeight","containerElementRef","inputRef","measuringElementRef","isSingleLine","select","focus","el","handleClick","useCallback","textareaKeyMap","useMemo","saveAndClose","close","cmd + escape","shift + escape","cmd + enter","shift + enter","escape","enter","EditInPlace_Container","tabIndex","onDoubleClick","objectSpread2","position","pointerEvents","opacity","whiteSpace","disabled","rows","onBlur","onChange","isActive","GhostListCard","ListCard_templateObject","ListCardContainer","ListCard","appActions","appData","listId","onUpdateList","onUpdateTask","isCreatingList","lists","selectedListId","tasks","list","listPalette","tasksInList","filter","task","listCardElementRef","_useDrag","list-id","dragProps","_useDrop","task-id","taskId","targetListId","currentTarget","dataset","dropProps","triggerClick","click","space","styled_components_browser_esm","ListCard_Container","data-list-id","title","components_EditInPlace","alignSelf","flexGrow","flexShrink","newLabel","fontSize","components_ColorPicker","ListManager","onCreateList","onSelectList","unarchivedLists","sortedLists","sortBy","CREATE_LIST_LABEL","components_ListCard","TaskListToggleButton","isSidebarOpen","onChangeIsSidebarOpen","ToolBar","_ref$isCollapsed","isCollapsed","Sidebar","onChangeTheme","isShowingTrashContents","isTaskListForcedOpen","setIsTaskListForcedOpen","selectedList","sidebarDropProps","LABEL_FOR_TRASHED_TASKS","components_ToolBar","components_TaskListToggleButton","OptionButton","isSelected","OptionBar","options","_ref2$renderOption","renderOption","option","_ref2$renderSelectedO","renderSelectedOption","selectedOption","optionIndex","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","role","TaskDetails_templateObject2","DurationOptionBar","TaskDetails","_ref3$appActions","_ref3$appData","isCreatingTask","selectedTaskId","activeTask","handleUpdateTask","field","[object Object]","handleSaveDuration","newDuration","handleSaveIcon","newNotes","handleSaveLabel","handleSaveNotes","EMPTY_LABEL","EMPTY_NOTES","rawNotes","dangerouslySetInnerHTML","__html","marked","bottom","left","overflow","right","top","minutesToHeight","minutes","duration","CardLabel","isMouseOver","Math","min","CardIcon","TaskCardContainer","TaskCard_templateObject","setIsMouseOver","onImmediatelySelectTask","onTransitionToTask","isShowingListManager","listColorCode","cardPalette","toggleIsMouseOver","TaskCard_Container","data-task-id","onChangeTaskPosition","onCreateTask","incompleteTasks","unscheduledTasks","droppedOnTaskId","droppedOnTaskIndex","findIndex","taskCardDropProps","Button_GhostButton","CREATE_TASK_LABEL","components_TaskCard","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","floor","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","LABEL_FOR_TIMELINE","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","from","to","onClickTask","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isDraggingTask","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","DROP_ZONE_SIZE","pulsingAnimation","Trash_templateObject","AnimatedContainer","Trash_templateObject2","TrashDropZone","TrashIconContainer","Trash","onChangeIsShowingTrashContents","deleteTask","firstUnarchivedList","TrashedCard_templateObject2","random","minOpacity","translationDistance","TrashedCard_templateObject","RestoreButton","TrashedCard","restoreButtonTitle","onRestore","TrashedCard_Container","deletedLists","hasDeletedLists","handleRestoreList","EMPTY_TRASHED_LISTS","components_TrashedCard","LABEL_FOR_RESTORING_LIST","deletedTasks","hasDeletedTasks","handleRestoreTask","EMPTY_TRASHED_TASKS","LABEL_FOR_RESTORING_TASK","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","isShowingSidebar","setIsShowingSidebar","_usePersistentState3","_usePersistentState4","setLists","_usePersistentState5","_usePersistentState6","setSelectedListId","_usePersistentState7","_usePersistentState8","setIsShowingListManager","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","setSelectedTaskId","_usePersistentState13","_usePersistentState14","themeName","setThemeName","setIsCreatingList","setIsCreatingTask","setIsDraggingTask","_useState7","_useState8","setIsShowingTrashContents","_useState9","_useState10","setIsTransitioning","currentListIndex","selectedTask","listContainingSelectedTask","primarycolorCode","handleDragOver","handleDragEnd","overrides","newListId","randomcolorCode","currentLists","sample","MOTIVATIONAL_DESCRIPTORS","NEW_LIST_LABEL","updates","prevLists","firstTaskIdInList","prevTasks","newTaskId","currentTasks","NEW_TASK_LABEL","NEW_TASK_NOTES","onSelectTask","selectTaskByRelativeIndex","relativeIndex","numTasksInList","indexOfCurrentTask","taskAtRelativeIndex","abs","transition","callback","onChangeIsShowingListManager","newIsShowingListManager","firstUnarchivedTask","newIndex","tasksMinusTarget","slice","moveTaskToTimeline","moveTaskToTaskList","selectNextList","nextListIndex","nextIndex","selectPreviousList","prevListIndex","prevIndex","setTaskDuration","toggleTaskListVisibility","toggleDarkMode","toggleIsEditingCurrentTask","toggleIsShowingListManager","createNewTask","deleteCurrentTask","goBack","reduce","acc","index","cmd + arrowRight","cmd + arrowLeft","cmd + shift + arrowRight","cmd + shift + arrowLeft","cmd + shift + ]","cmd + shift + [","b","d","e","l","n","t","arrowUp","arrowDown","columnWidths","sidebar","listManager","taskDetails","timeline","disableVendorPrefixes","GlobalStyles","components_Trash","poop","components_Sidebar","components_TrashedTasks","components_TaskList","LABEL_FOR_TRASHED_LISTS","LABEL_FOR_LIST_MANAGER","LABEL_FOR_TASK_DETAILS","atoms_Transition","components_TrashedLists","components_ListManager","components_TaskDetails","components_Timeline","rootElement","getElementById"],"mappings":"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","file":"static/js/main.2d5fec3c.chunk.js","sourcesContent":["import React from 'react';\n\nconst STYLE_PREFIX_MAP = {\n    solid: 'fas',\n    regular: 'far',\n    light: 'fal',\n    duotone: 'fad',\n    brands: 'fab',\n};\n\nconst Icon = ({ iconName, styleName = 'solid', ...otherProps }) => (\n    <i\n        className={`${STYLE_PREFIX_MAP[styleName]} fa-${iconName}`}\n        {...otherProps}\n    />\n);\n\nexport default Icon;\n","import { setLightness, transparentize } from 'polished';\nimport React from 'react';\nimport MOTIVATIONAL_DESCRIPTORS from './copy/motivational-descriptors';\nimport Icon from './Icon';\n\nexport const SIDEBAR_DEFAULT_WIDTH = '30vw';\nexport const SIDEBAR_EXTENDED_WIDTH = '40vw';\nexport const BORDER_RADIUS = '3px';\nexport const BORDER_WIDTH = '1px';\nexport const BULLET_SIZE = '10px';\nexport const COLOR_PICKER_HEIGHT = '150px';\nexport const COLOR_PICKER_WIDTH = '200px';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '25px';\nexport const FONTS = {\n    NORMAL: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.5)` },\n    LARGE: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.75)` },\n};\nexport const HOURS_PER_SCREEN = 10;\nexport const LIST_CARD_HEIGHT = `calc(${GRID_UNIT} * 8)`;\nexport const LIST_CARD_SPACING = `calc(${GRID_UNIT} * 0.5)`;\nexport const LIST_CARD_WIDTH = `calc((100% - (${LIST_CARD_SPACING} * 2)) / 3)`;\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const ROUTE_TRANSITION_ANIMATION_DURATION = 250;\nexport const TIMELINE_FROM = '6:00';\nexport const TIMELINE_TO = '30:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.MOTIVATIONAL_DESCRIPTORS = MOTIVATIONAL_DESCRIPTORS;\nCOPY.EMPTY_LABEL = '...label?';\nCOPY.EMPTY_NOTES = '...notes?';\nCOPY.EMPTY_TRASHED_LISTS = 'No Trashed Lists';\nCOPY.EMPTY_TRASHED_TASKS = 'No Trashed Tasks';\nCOPY.LABEL_FOR_LIST_MANAGER = 'Switch Lists';\nCOPY.LABEL_FOR_RESTORING_LIST = 'Restore this List';\nCOPY.LABEL_FOR_RESTORING_TASK = 'Restore this Task';\nCOPY.LABEL_FOR_TASK_DETAILS = 'Back to Task';\nCOPY.LABEL_FOR_TIMELINE = \"Today's Schedule\";\nCOPY.LABEL_FOR_TRASHED_LISTS = 'Trashed Lists';\nCOPY.LABEL_FOR_TRASHED_TASKS = 'Trashed Tasks';\nCOPY.CREATE_LIST_LABEL = 'Create List';\nCOPY.CREATE_TASK_LABEL = 'Create Task';\nCOPY.NEW_LIST_LABEL = 'New List';\nCOPY.NEW_TASK_LABEL = `New Task`;\nCOPY.NEW_TASK_NOTES = '';\nCOPY.TIPS = {\n    BASICALLY:\n        'Make lists of tasks. Every day, schedule your most important ones',\n    CREATE_NEW_TASK: 'Press [N] to create a [N]ew task in the current list',\n    DELETE_TASK: 'Press [T] to move the selected task to the [T]rash',\n    EDIT_TASK: 'Press [E] to edit the selected task',\n    MOVE_BETWEEN_LISTS:\n        'Press [⌘]+[SHIFT]+[LEFT or RIGHT] to move between your lists',\n    SELECT_NEXT_PREV_TASK:\n        'Press [UP] or [DOWN] to select the previous and next unscheduled tasks in the active list',\n    MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE:\n        'Press [⌘]+[LEFT or RIGHT] to move the selected task to the TaskList or Timeline, respectively',\n    SETTING_DURATION:\n        'Press keys [1] to [6] to quickly adjust your time estimate for the selected task',\n    TOGGLE_TASK_LIST:\n        'Press [B] to show / hide the side[B]ar of unscheduled tasks',\n    TOGGLE_DARK_MODE: 'Press [D] to toggle [D]ark Mode',\n    TOGGLE_LIST_MANAGER: 'Press [L] to see your [L]ists',\n};\n\nexport { COPY };\n\nexport const INITIAL_LISTS = [\n    {\n        id: 1,\n        color_code: 0,\n        isArchived: false,\n        label: 'User Manual',\n    },\n];\nexport const INITIAL_SELECTED_LIST_ID = (INITIAL_LISTS[0] || {}).id;\n\nexport const INITIAL_TASKS = Object.keys(COPY.TIPS).map(tipId => {\n    const label = COPY.TIPS[tipId];\n\n    return {\n        icon: '☝️',\n        id: tipId,\n        list_id: INITIAL_SELECTED_LIST_ID,\n        label: label,\n        isComplete: false,\n        notes: '',\n        scheduled: false,\n        scheduled_minutes: 30,\n        scheduled_time: '9:00',\n    };\n});\n\nexport const INITIAL_SELECTED_TASK_ID = (INITIAL_TASKS[0] || {}).id;\n\nexport const PRIMARY_COLORS = [\n    {\n        primaryColor: '#FFB83D',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#E5FF3D',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#84FF3D',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#3DFF57',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#3DFFB8',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#3DE5FF',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#3D84FF',\n        highContrastTextColor: '#ffffff',\n    },\n    {\n        primaryColor: '#573DFF',\n        highContrastTextColor: '#ffffff',\n    },\n    {\n        primaryColor: '#B83DFF',\n        highContrastTextColor: '#ffffff',\n    },\n    {\n        primaryColor: '#FF3DE5',\n        highContrastTextColor: '#ffffff',\n    },\n    {\n        primaryColor: '#FF3D84',\n        highContrastTextColor: '#ffffff',\n    },\n    {\n        primaryColor: '#FF573D',\n        highContrastTextColor: '#ffffff',\n    },\n];\n\nexport const buildPalette = (theme = 'LIGHT', colorCode = '#0000FF') => {\n    const THEME = {};\n\n    const colorObj =\n        PRIMARY_COLORS.find(colorObj => colorObj.primaryColor === colorCode) ||\n        PRIMARY_COLORS[0];\n\n    const { primaryColor, highContrastTextColor } = colorObj;\n\n    THEME.PRIMARY = primaryColor;\n    THEME.HIGH_CONTRAST_BACKGROUND = THEME.PRIMARY;\n    THEME.HIGH_CONTRAST_TEXT = highContrastTextColor;\n    THEME.TASK_BORDER = transparentize(0.5, THEME.PRIMARY);\n    THEME.TASK_BORDER_HOVER = transparentize(0.5, THEME.PRIMARY);\n    THEME.TASK_BORDER_ACTIVE = THEME.PRIMARY;\n\n    if (theme === 'DARK') {\n        THEME.BACKGROUND = '#000000';\n        THEME.SHADED = setLightness(0.1, THEME.PRIMARY);\n        THEME.SHADOW = transparentize(0.95, THEME.BACKGROUND);\n        THEME.TEXT = setLightness(0.95, THEME.PRIMARY);\n        THEME.TEXT_FADED = setLightness(0.75, THEME.PRIMARY);\n        THEME.BORDER = setLightness(0.15, THEME.PRIMARY);\n        THEME.BORDER_FADED = THEME.TEXT_FADED;\n        THEME.NEUTRAL_FOREGROUND = '#ffffff';\n        THEME.NEUTRAL_BACKGROUND = '#000000';\n    }\n\n    if (theme === 'LIGHT') {\n        THEME.PRIMARY = setLightness(0.3, primaryColor);\n        THEME.BACKGROUND = '#FFFFFF';\n        THEME.SHADED = setLightness(0.95, THEME.PRIMARY);\n        THEME.SHADOW = transparentize(0.8, setLightness(0.25, THEME.PRIMARY));\n        THEME.TEXT = setLightness(0.05, THEME.PRIMARY);\n        THEME.TEXT_FADED = setLightness(0.4, THEME.PRIMARY);\n        THEME.BORDER = setLightness(0.9, THEME.PRIMARY);\n        THEME.BORDER_FADED = transparentize(0.5, THEME.TEXT_FADED);\n        THEME.NEUTRAL_FOREGROUND = '#000000';\n        THEME.NEUTRAL_BACKGROUND = '#ffffff';\n    }\n\n    return THEME;\n};\n\nconst ICON_PACKS = {\n    EMOJI: {\n        COLOR_PICKER: '🎨',\n        DARK_MODE: '🌚',\n        END_ZONE: '🗑',\n        LEFT: '👈',\n        LIGHT_MODE: '🌞',\n        LIST_MANAGER: '📚',\n        RIGHT: '👉',\n        TASK_DETAILS: '📌',\n        TIP: '☝️',\n    },\n    FONT_AWESOME: {\n        COLOR_PICKER: 'palette',\n        DARK_MODE: 'moon-stars',\n        END_ZONE: 'trash-alt',\n        LEFT: 'long-arrow-left',\n        LIGHT_MODE: 'sun',\n        LIST_MANAGER: 'book',\n        RIGHT: 'long-arrow-right',\n        TASK_DETAILS: 'thumbtack',\n        TIP: 'gem',\n    },\n};\n\nObject.keys(ICON_PACKS.FONT_AWESOME).forEach(key => {\n    const ICON_NAME = ICON_PACKS.FONT_AWESOME[key];\n    ICON_PACKS.FONT_AWESOME[key] = (\n        <Icon iconName={ICON_NAME} styleName=\"solid\" />\n    );\n});\n\nconst ICONS = ICON_PACKS.FONT_AWESOME;\n\nICONS.TASK_DEFAULT = '📌';\n\nexport { ICONS };\n","export default [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\n","export default str => {\n    return typeof str === 'string'\n        ? str.trim().replace(/\\s([^ ]*)$/m, `${String.fromCharCode(160)}$1`)\n        : str;\n};\n","import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { BORDER_RADIUS, GRID_UNIT } from './tokens';\nimport preventWidowsFunction from '../../utils/preventWidows';\n\nconst buildStyles = (propName = '', propValue = null, edges = []) => {\n    if (propValue !== null) {\n        return edges\n            .map(\n                edge =>\n                    `${propName}-${edge}: calc(${propValue} * ${GRID_UNIT});`\n            )\n            .join('');\n    }\n\n    return '';\n};\n\nconst Container = styled.div(\n    ({\n        border = false,\n        margin = null,\n        marginBottom = null,\n        marginLeft = null,\n        marginRight = null,\n        marginTop = null,\n        marginX = null,\n        marginY = null,\n        padding = null,\n        paddingBottom = null,\n        paddingLeft = null,\n        paddingRight = null,\n        paddingTop = null,\n        paddingX = null,\n        paddingY = null,\n        theme,\n        isFlexible = false,\n        isRounded = false,\n        isScrollable = false,\n        onClick = null,\n    }) => `\n        align-self: stretch;\n        border-radius: ${isRounded ? BORDER_RADIUS : ''};\n        box-shadow: ${border ? `0 0 0 1px ${theme.BORDER}` : 'none'};\n        cursor: ${onClick ? 'pointer' : ''};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        overflow: ${isScrollable ? 'auto' : ''};\n        \n        ${[\n            buildStyles('margin', margin, ['top', 'right', 'bottom', 'left']),\n            buildStyles('margin', marginBottom, ['bottom']),\n            buildStyles('margin', marginLeft, ['left']),\n            buildStyles('margin', marginRight, ['right']),\n            buildStyles('margin', marginTop, ['top']),\n            buildStyles('margin', marginX, ['right', 'left']),\n            buildStyles('margin', marginY, ['top', 'bottom']),\n            buildStyles('padding', padding, ['top', 'right', 'bottom', 'left']),\n            buildStyles('padding', paddingBottom, ['bottom']),\n            buildStyles('padding', paddingLeft, ['left']),\n            buildStyles('padding', paddingRight, ['right']),\n            buildStyles('padding', paddingTop, ['top']),\n            buildStyles('padding', paddingX, ['right', 'left']),\n            buildStyles('padding', paddingY, ['top', 'bottom']),\n        ].join('')}\n    `\n);\n\nconst Box = forwardRef(\n    ({ children, preventWidows = false, ...otherProps }, ref) => (\n        <Container ref={ref} {...otherProps}>\n            {preventWidows ? preventWidowsFunction(children) : children}\n        </Container>\n    )\n);\n\nexport default Box;\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        justify = 'stretch',\n        spacing = 0,\n        wrapped = false,\n    }) => `\n        align-items: ${align};\n        align-content: ${wrapped ? align : ''};\n        display: flex;\n        flex-direction: ${direction};\n        flex-wrap: ${wrapped ? 'wrap' : 'nowrap'};\n        justify-content: ${justify};\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { BORDER_WIDTH, GRID_UNIT, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isDisabled, theme }) => `\n        position: relative;\n        \n        &:before {\n            background-color: ${theme.BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isDisabled ? 0.25 : 0};\n            pointer-events: ${isDisabled ? 'all' : 'none'};\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 200;\n        }\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})`\n    height: calc(100vh - ${GRID_UNIT});\n    overflow: auto;\n    position: relative;\n    ${UNIFIED_TRANSITION};\n\n    & > * {\n        align-self: stretch;\n    }\n`;\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${theme.BACKGROUND};\n        color: ${theme.TEXT_FADED};\n        border-bottom:\n            ${BORDER_WIDTH} solid ${theme.BORDER};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({\n    children,\n    disabledIf = [false],\n    label,\n    ...otherProps\n}) => {\n    const isDisabled =\n        disabledIf.length && disabledIf.some(condition => condition === true);\n\n    return (\n        <Container isDisabled={isDisabled}>\n            <ColumnHeader>{label}</ColumnHeader>\n            <ContentContainer {...otherProps}>{children}</ContentContainer>\n        </Container>\n    );\n};\n\nexport const PrimaryAppColumn = styled(AppColumn)(\n    ({ theme }) => `\n        box-shadow: 0 0 10px 10px ${theme.SHADOW};\n        border-left: ${BORDER_WIDTH} solid ${theme.BORDER};\n        border-right: \n            ${BORDER_WIDTH} solid ${theme.BORDER};\n        overflow: unset;\n        z-index: 11;\n    `\n);\n\nexport const SecondaryAppColumn = styled(AppColumn)(\n    ({ isTargetedForDrop, theme }) => `\n        background-color: ${theme.SHADED};\n        flex-grow: 1;\n        overflow: auto;\n        position: relative;\n        \n        &:before {\n            box-shadow: ${\n                isTargetedForDrop\n                    ? `0 0 0 5px ${theme.TASK_BORDER_HOVER} inset`\n                    : 'initial'\n            };\n            bottom: 0;\n            content: '';\n            left: 0;\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 1000;\n        }\n    `\n);\n\nexport default AppColumn;\n","export default str => parseInt(str, 10);\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport toInt from '../../utils/toInt';\nimport FlexBox from './FlexBox';\nimport { BORDER_RADIUS, BORDER_WIDTH, UNIFIED_TRANSITION } from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    forwardedAs: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ isInverted = false, theme }) => `\n        align-self: unset;\n        background-color: ${theme[isInverted ? 'BACKGROUND' : 'PRIMARY']};\n        border: 2px solid transparent;\n        border-radius: ${BORDER_RADIUS};\n        color: ${theme[isInverted ? 'PRIMARY' : 'BACKGROUND']};\n        cursor: pointer;\n        transform: translateY(0);\n        ${UNIFIED_TRANSITION};\n        transition-property: border, color;\n        \n        &:focus,\n        &:hover {\n            border-color: ${theme[isInverted ? 'PRIMARY' : 'BACKGROUND']};\n        }\n        &:active {\n            transform: translateY(2px);\n        }\n    `\n);\n\nconst StyledGhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        color: ${theme.TEXT_FADED};\n        position: relative;\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            color: ${theme.TEXT};\n            border-color: transparent;\n        }\n    `\n);\n\nconst animation = keyframes`\n    from {\n        stroke-dashoffset: 0;\n    }\n    to {\n        stroke-dashoffset: 12px;\n    }\n`;\n\nconst TracerSVGElement = styled.svg`\n    overflow: visible;\n    position: absolute;\n`;\n\nconst Tracer = styled.rect(\n    ({ isAnimated, isResizing, theme }) => css`\n        animation-name: ${animation};\n        animation-duration: 0.5s;\n        animation-direction: normal;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-play-state: ${isAnimated ? 'running' : 'paused'};\n        fill: none;\n        stroke: ${isResizing\n            ? 'transparent'\n            : theme[isAnimated ? 'PRIMARY' : 'TEXT_FADED']};\n        stroke-width: calc(${BORDER_WIDTH} * 2);\n        stroke-dasharray: 6px, 6px;\n        position: relative;\n        z-index: 1000;\n    `\n);\n\nconst AnimatedTracer = ({ isAnimated, targetElementRef, ...otherProps }) => {\n    const [isResizing, setIsResizing] = useState(true);\n    const [viewBoxDimensions, setViewBoxDimensions] = useState({\n        width: 0,\n        height: 0,\n    });\n\n    useEffect(() => {\n        const measureTracer = () => {\n            if (targetElementRef.current) {\n                const { offsetWidth, offsetHeight } = targetElementRef.current;\n                const { width, height } = viewBoxDimensions;\n\n                if (offsetWidth !== width || offsetHeight !== height) {\n                    setViewBoxDimensions({\n                        width: offsetWidth,\n                        height: offsetHeight,\n                    });\n                }\n            }\n        };\n\n        const timer = setInterval(measureTracer, 100);\n\n        return () => clearInterval(timer);\n    }, [targetElementRef, viewBoxDimensions]);\n\n    useEffect(() => {\n        setIsResizing(true);\n\n        const onComplete = () => setIsResizing(false);\n\n        const timer = setTimeout(onComplete, 100);\n\n        return () => clearTimeout(timer);\n    }, [viewBoxDimensions]);\n\n    return (\n        <TracerSVGElement\n            preserveAspectRatio=\"none\"\n            viewBox={`0 0 ${viewBoxDimensions.width} ${viewBoxDimensions.height}`}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            {...otherProps}\n        >\n            <Tracer\n                width={viewBoxDimensions.width}\n                height={viewBoxDimensions.height}\n                isAnimated={isAnimated}\n                isResizing={isResizing}\n                rx={toInt(BORDER_RADIUS) * 2}\n                x={0}\n                y={0}\n            />\n        </TracerSVGElement>\n    );\n};\n\nexport const GhostButton = ({ children, ...otherProps }) => {\n    const [isAnimated, setIsAnimated] = useState(false);\n\n    const buttonElementRef = useRef(null);\n\n    return (\n        <StyledGhostButton\n            ref={buttonElementRef}\n            onMouseEnter={setIsAnimated.bind(null, true)}\n            onMouseLeave={setIsAnimated.bind(null, false)}\n            {...otherProps}\n        >\n            <AnimatedTracer\n                isAnimated={isAnimated}\n                targetElementRef={buttonElementRef}\n            />\n            {children}\n        </StyledGhostButton>\n    );\n};\n\nexport const ToggleButton = styled(Button).attrs(({ isInverted }) => ({\n    isInverted: !isInverted,\n}))``;\n\nexport default Button;\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, FONTS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: ${FONTS.NORMAL.LINE_HEIGHT};\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${theme.BACKGROUND};\n            color: ${theme.TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: ${FONTS.NORMAL.SIZE};\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        ::placeholder {\n            color: ${theme.PRIMARY};\n            opacity: 1;\n        }\n        ::selection {\n            color: ${theme.HIGH_CONTRAST_TEXT};\n            background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${theme.TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${theme.TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n            }\n            \n            * + h1 {\n                margin-top: ${GRID_UNIT};\n            }\n        \n            blockquote {\n                border-left: 2px dotted ${theme.TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${theme.TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport {\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Transition = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isTransitioning }) => `\n        opacity: ${isTransitioning ? 0 : 1};\n        ${UNIFIED_TRANSITION};\n        transition-duration: ${ROUTE_TRANSITION_ANIMATION_DURATION / 2}ms;\n    `\n);\n\nexport default Transition;\n","import { useState } from 'react';\n\nconst useDrag = dataTypes => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        Object.keys(dataTypes).map(dataType => {\n            evt.dataTransfer.setData(dataType, dataTypes[dataType]);\n            return dataType;\n        });\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import { useRef, useState } from 'react';\n\nconst useDrop = dataTypeHandlers => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        Object.keys(dataTypeHandlers).map(dataType => {\n            const data = evt.dataTransfer.getData(dataType);\n            const payload =\n                data.length === 0\n                    ? null\n                    : isNaN(data)\n                    ? data\n                    : parseFloat(data);\n\n            if (payload !== null) {\n                const dataTypeHandler = dataTypeHandlers[dataType];\n                dataTypeHandler(payload, evt);\n            }\n\n            return dataType;\n        });\n\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import { useEffect } from 'react';\nimport mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nconst buildKeyboardShortcutHandler = (keyMap, scopedToElementRef) => evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    const currentKeySequence = uniq(keysDown)\n        .map(keyDown => keyDown.toLowerCase())\n        .sort()\n        .join('+');\n\n    mapKeys(keyMap, (handler, sequence) => {\n        const shortcutKeySequence = sequence\n            .split('+')\n            .map(key => key.trim().toLowerCase())\n            .sort()\n            .join('+');\n\n        if (currentKeySequence === shortcutKeySequence) {\n            const scopedToElement = scopedToElementRef !== null;\n            const scopedElement = scopedToElement && scopedToElementRef.current;\n            const scopedToAnInput = scopedElement && isInput(scopedElement);\n            const firedOnAnInput = isInput(evt.target);\n\n            if (\n                (scopedElement && evt.target === scopedElement) ||\n                (firedOnAnInput && !scopedToAnInput)\n            ) {\n                evt.stopPropagation();\n            }\n\n            if (\n                (firedOnAnInput && !scopedToAnInput) ||\n                (scopedToElement && !scopedElement)\n            ) {\n                return false;\n            }\n\n            return handler(evt);\n        }\n    });\n};\n\nconst useKeyboardShortcuts = (keyMap, targetElementRef = null) => {\n    useEffect(() => {\n        const onKeyDown = buildKeyboardShortcutHandler(\n            keyMap,\n            targetElementRef\n        );\n\n        document.addEventListener('keydown', onKeyDown);\n\n        return () => document.removeEventListener('keydown', onKeyDown);\n    }, [keyMap, targetElementRef]);\n};\n\nexport default useKeyboardShortcuts;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport Box from './atoms/Box';\nimport { ToggleButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLOR_PICKER_HEIGHT,\n    COLOR_PICKER_WIDTH,\n    GRID_UNIT,\n    ICONS,\n    PRIMARY_COLORS,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'flex-end',\n    paddingX: 0.25,\n    paddingY: 0.25,\n})``;\n\nconst StyledWindowShader = styled.div`\n    bottom: 0;\n    left: 0;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1099;\n`;\n\nconst WindowShader = ({ children, ...otherProps }) => {\n    return ReactDOM.createPortal(\n        <StyledWindowShader {...otherProps}>{children}</StyledWindowShader>,\n        document.body\n    );\n};\n\nconst StyledColorPaletteContainer = styled(Box).attrs({\n    isRounded: true,\n    paddingX: 1,\n    paddingY: 1,\n})(\n    ({ theme }) => `\n        background-color: ${theme.BACKGROUND};\n        display: grid;\n        gap: calc(${GRID_UNIT} * 0.25);\n        grid-template-columns: 1fr 1fr 1fr 1fr;\n        grid-template-rows: 1fr 1fr 1fr;\n        position: fixed;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        z-index: 1100;\n        width: ${COLOR_PICKER_WIDTH};\n        height: ${COLOR_PICKER_HEIGHT};\n        \n        &:before {\n            background-color: ${theme.SHADOW};\n            position: fixed;\n            width: 100vw;\n            height: 100vh;\n        }\n    `\n);\n\nconst ColorPaletteContainer = ({ children, ...otherProps }) => {\n    return ReactDOM.createPortal(\n        <StyledColorPaletteContainer {...otherProps}>\n            {children}\n        </StyledColorPaletteContainer>,\n        document.body\n    );\n};\n\nconst ColorChip = styled(Box).attrs({})`\n    border-radius: 400px;\n    transform: scale(1);\n    ${UNIFIED_TRANSITION};\n\n    &:hover {\n        transform: scale(1.1);\n    }\n`;\n\nconst ColorPicker = ({ palette, onPickColor, ...otherProps }) => {\n    const [isPickingColor, setIsPickingColor] = useState(false);\n\n    const showPicker = () => {\n        setIsPickingColor(true);\n    };\n\n    const hidePicker = () => {\n        setIsPickingColor(false);\n    };\n\n    return (\n        <Container {...otherProps}>\n            <ToggleButton isInverted={!isPickingColor} onClick={showPicker}>\n                {ICONS.COLOR_PICKER}\n            </ToggleButton>\n            {isPickingColor && (\n                <>\n                    <ColorPaletteContainer>\n                        {PRIMARY_COLORS.map(colorObj => {\n                            return (\n                                <ColorChip\n                                    key={colorObj.primaryColor}\n                                    style={{\n                                        backgroundColor: colorObj.primaryColor,\n                                    }}\n                                    onClick={onPickColor.bind(\n                                        null,\n                                        colorObj.primaryColor\n                                    )}\n                                />\n                            );\n                        })}\n                    </ColorPaletteContainer>\n                    <WindowShader onClick={hidePicker} />\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default styled(ColorPicker)``;\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport { BORDER_RADIUS, GRID_UNIT, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditable, isEditing, theme, tracingElementStyles = () => {} }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border:\n                ${isEditing ? 'none' : `2px dashed ${theme.BORDER}`};\n            box-shadow:\n                ${\n                    isEditing\n                        ? `0 0 0 2px ${theme.PRIMARY}`\n                        : `0 0 0 0 ${theme.PRIMARY}`\n                };\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.25 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.25 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n            ${tracingElementStyles(theme)}\n        }\n        \n        &:focus,\n        &:hover {\n            &:before {\n                opacity: ${isEditable ? 1 : 0};\n            }\n        }\n    `\n);\n\nconst StyledTextarea = styled.textarea`\n    display: block;\n    height: 100%;\n    width: 100%;\n`;\n\nconst Canvas = styled(Box)(\n    ({ isEmpty }) => `\n        opacity: ${isEmpty ? 0.6 : 1};\n    `\n);\n\nconst EditInPlace = ({\n    canvasStyles = {},\n    doubleClickToEdit = false,\n    isEditable = true,\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    tracingElementStyles = () => {},\n    value = '',\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const containerElementRef = useRef(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = useCallback(() => {\n        if (isEditable && !isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    }, [isEditable, isEditing, setBufferedValue, setIsEditing, value]);\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [handleClick, isRemotelyActivated]);\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const textareaKeyMap = useMemo(() => {\n        const saveAndClose = () => {\n            onSave(bufferedValue);\n            setIsEditing(false);\n        };\n\n        const close = () => {\n            setBufferedValue(value);\n            setIsEditing(false);\n        };\n\n        return {\n            'cmd + escape': close,\n            'shift + escape': close,\n            'cmd + enter': saveAndClose,\n            'shift + enter': saveAndClose,\n            'escape': saveAndClose,\n            'enter': evt => {\n                if (\n                    evt.target.tagName.toLowerCase() === 'textarea' &&\n                    isSingleLine\n                ) {\n                    saveAndClose();\n                    evt.preventDefault();\n                    return false;\n                }\n            },\n        };\n    }, [bufferedValue, onSave, isSingleLine, value]);\n\n    useKeyboardShortcuts(textareaKeyMap, inputRef);\n\n    const keyMap = useMemo(() => {\n        const enterEditMode = evt => {\n            if (evt.target === containerElementRef.current) {\n                evt.preventDefault();\n                handleClick();\n            }\n        };\n\n        return {\n            enter: enterEditMode,\n        };\n    }, [handleClick, containerElementRef]);\n\n    useKeyboardShortcuts(keyMap, containerElementRef);\n\n    return (\n        <Container\n            isEditable={isEditable}\n            isEditing={isEditing}\n            ref={containerElementRef}\n            tabIndex={0}\n            tracingElementStyles={tracingElementStyles}\n            onClick={!doubleClickToEdit ? handleClick : null}\n            onDoubleClick={doubleClickToEdit ? handleClick : null}\n            {...otherProps}\n        >\n            <Canvas isEmpty={isEmpty} style={{ ...canvasStyles }}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <StyledTextarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                height: `${measuringElementHeight}px`,\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Canvas>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React, { useCallback, useMemo, useRef } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    buildPalette,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport ColorPicker from './ColorPicker';\nimport EditInPlace from './EditInPlace';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    direction: 'column',\n    justify: 'flex-start',\n    spacing: 0.5,\n})(\n    ({ isActive, isTargetedForDrop, theme }) => `\n        background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 2px ${isActive ? theme.SHADED : 'transparent'},\n            0 0 0 4px ${\n                isActive\n                    ? theme[\n                          isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                      ]\n                    : 'transparent'\n            };\n        color: ${theme.HIGH_CONTRAST_TEXT};\n        cursor: pointer;\n        overflow: hidden;\n        position: relative;\n        transform: scale(${isTargetedForDrop ? 1.1 : 1});\n        width: 100%;\n        height: 100%;\n        ${UNIFIED_TRANSITION};\n        \n        &:active,\n        &:focus,\n        &:hover {\n            box-shadow:\n                0 0 0 2px ${theme.SHADED},\n                0 0 0 4px ${\n                    theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER']\n                };\n        }\n    `\n);\n\nexport const GhostListCard = styled(GhostButton).attrs({\n    align: 'center',\n    justify: 'center',\n})`\n    height: ${LIST_CARD_HEIGHT};\n    margin-bottom: ${LIST_CARD_SPACING};\n    width: ${LIST_CARD_WIDTH};\n`;\n\nexport const ListCardContainer = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n    justify: 'flex-start',\n    padding: 1,\n    spacing: LIST_CARD_SPACING,\n    wrapped: true,\n})(\n    ({ theme }) => `\n        align-content: flex-start;\n        background-color: ${theme.SHADED};\n        height: 100%;\n        overflow: auto;\n        padding-bottom: calc(${GRID_UNIT} * 1.5);\n        \n        & > * {\n            height: ${LIST_CARD_HEIGHT};\n            margin-bottom: ${LIST_CARD_SPACING};\n            margin-left: ${LIST_CARD_SPACING};\n            width: ${LIST_CARD_WIDTH};\n            \n            :nth-child(3n + 1) {\n                margin-left: 0;\n            }\n        }\n    `\n);\n\nconst ListCard = ({\n    appActions,\n    appData,\n    listId,\n    isEditable = true,\n    ...otherProps\n}) => {\n    const { onUpdateList, onUpdateTask } = appActions;\n\n    const { isCreatingList, lists, selectedListId, tasks, theme } = appData;\n\n    const list = lists.find(list => list.id === listId);\n\n    const listPalette = buildPalette(theme, list.color_code);\n\n    const tasksInList = tasks.filter(\n        task => task.list_id === listId && !task.isComplete\n    );\n\n    const isActive = listId === selectedListId;\n\n    const listCardElementRef = useRef(null);\n\n    const [dragProps] = useDrag({ 'list-id': listId });\n\n    const [dropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const targetListId = toInt(evt.currentTarget.dataset.listId);\n            if (targetListId) {\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    list_id: targetListId,\n                });\n            }\n        },\n    });\n\n    const triggerClick = useCallback(evt => {\n        evt.preventDefault();\n        evt.target.click();\n    }, []);\n\n    const setListColor = colorCode =>\n        onUpdateList(listId, { color_code: colorCode });\n\n    const keyMap = useMemo(\n        () => ({\n            enter: triggerClick,\n            space: triggerClick,\n        }),\n        [triggerClick]\n    );\n\n    useKeyboardShortcuts(keyMap, listCardElementRef);\n\n    const tracingElementStyles = theme => `\n        border-color: ${theme.HIGH_CONTRAST_TEXT}\n    `;\n\n    return (\n        <ThemeProvider theme={listPalette}>\n            <Container\n                data-list-id={listId}\n                isActive={isActive}\n                ref={listCardElementRef}\n                tabIndex={0}\n                title={COPY.TIPS.MOVE_BETWEEN_LISTS}\n                {...dragProps}\n                {...dropProps}\n                {...otherProps}\n            >\n                <EditInPlace\n                    isEditable={isEditable}\n                    isRemotelyActivated={\n                        isCreatingList && selectedListId === listId\n                    }\n                    marginX={0.75}\n                    marginTop={0.5}\n                    style={{\n                        alignSelf: 'stretch',\n                        flexGrow: 0,\n                        flexShrink: 0,\n                    }}\n                    tracingElementStyles={tracingElementStyles}\n                    value={list.label}\n                    onSave={newLabel => {\n                        onUpdateList(listId, { label: newLabel });\n                    }}\n                />\n                <FlexBox\n                    direction=\"column\"\n                    isFlexible\n                    isScrollable\n                    spacing={0.25}\n                >\n                    {tasksInList.map(task => (\n                        <FlexBox\n                            key={task.id}\n                            align=\"flex-start\"\n                            paddingX={0.25}\n                            spacing={0.25}\n                            style={{\n                                fontSize: `calc(${FONTS.NORMAL.SIZE} / 2)`,\n                            }}\n                        >\n                            <span>{task.icon}</span>\n                            <span>{task.label}</span>\n                        </FlexBox>\n                    ))}\n                </FlexBox>\n                <ColorPicker listId={listId} onPickColor={setListColor} />\n            </Container>\n        </ThemeProvider>\n    );\n};\n\nexport default ListCard;\n","import sortBy from 'lodash/sortBy';\nimport React from 'react';\nimport { COPY } from './atoms/tokens';\nimport ListCard, { GhostListCard, ListCardContainer } from './ListCard';\n\nconst ListManager = ({ appActions, appData }) => {\n    const { onCreateList, onSelectList } = appActions;\n    const { lists } = appData;\n    const unarchivedLists = lists.filter(list => !list.isArchived);\n    const sortedLists = sortBy(unarchivedLists, [list => list.label]);\n\n    return (\n        <ListCardContainer>\n            <GhostListCard onClick={() => onCreateList()}>\n                {COPY.CREATE_LIST_LABEL}\n            </GhostListCard>\n            {sortedLists.map(list => (\n                <ListCard\n                    key={list.id}\n                    appActions={appActions}\n                    appData={appData}\n                    listId={list.id}\n                    onClick={() => onSelectList(list.id)}\n                />\n            ))}\n        </ListCardContainer>\n    );\n};\n\nexport default ListManager;\n","import React from 'react';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\n\nconst TaskListToggleButton = ({ isSidebarOpen, onChangeIsSidebarOpen }) => (\n    <ToggleButton\n        isActive={isSidebarOpen}\n        title={COPY.TIPS.TOGGLE_TASK_LIST}\n        onClick={() => onChangeIsSidebarOpen(!isSidebarOpen)}\n    >\n        {isSidebarOpen ? ICONS.LEFT : ICONS.RIGHT}\n    </ToggleButton>\n);\n\nexport default TaskListToggleButton;\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs(({ isCollapsed = false }) => ({\n    align: 'center',\n    justify: isCollapsed ? 'center' : 'space-between',\n    paddingX: isCollapsed ? 0 : 0.5,\n    spacing: 0.5,\n}))(\n    ({ theme }) => `\n        background-color: ${theme.BACKGROUND};\n        color: ${theme.TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${theme.TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React, { useEffect, useState } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport { SecondaryAppColumn } from './AppColumn';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\nimport SidebarToggleButton from './TaskListToggleButton';\nimport ToolBar from './ToolBar';\n\nconst Sidebar = ({ appActions, appData, children, ...otherProps }) => {\n    const { onChangeIsSidebarOpen, onChangeTheme, onUpdateTask } = appActions;\n\n    const {\n        isShowingTrashContents,\n        isSidebarOpen,\n        lists,\n        selectedListId,\n        theme,\n    } = appData;\n\n    const [isTaskListForcedOpen, setIsTaskListForcedOpen] = useState(false);\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const [sidebarDropProps] = useDrop({\n        'task-id': taskId => {\n            onUpdateTask(taskId, {\n                list_id: selectedListId,\n                scheduled: false,\n            });\n        },\n    });\n\n    useEffect(() => {\n        if (!isSidebarOpen && sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(true);\n            onChangeIsSidebarOpen(true);\n            return;\n        }\n\n        if (isTaskListForcedOpen && !sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(false);\n            onChangeIsSidebarOpen(false);\n        }\n    }, [\n        sidebarDropProps.isTargetedForDrop,\n        isTaskListForcedOpen,\n        isSidebarOpen,\n        setIsTaskListForcedOpen,\n        onChangeIsSidebarOpen,\n    ]);\n\n    return (\n        <SecondaryAppColumn\n            label={\n                !isSidebarOpen\n                    ? ''\n                    : isShowingTrashContents\n                    ? COPY.LABEL_FOR_TRASHED_TASKS\n                    : selectedList.label\n            }\n            {...sidebarDropProps}\n            {...otherProps}\n        >\n            {!isSidebarOpen ? (\n                <ToolBar isCollapsed>\n                    <SidebarToggleButton\n                        isSidebarOpen={isSidebarOpen}\n                        onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                    />\n                </ToolBar>\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={COPY.TIPS.TOGGLE_DARK_MODE}\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT'\n                                ? ICONS.DARK_MODE\n                                : ICONS.LIGHT_MODE}\n                        </ToggleButton>\n                        <SidebarToggleButton\n                            isSidebarOpen={isSidebarOpen}\n                            onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                        />\n                    </ToolBar>\n\n                    {children}\n                </>\n            )}\n        </SecondaryAppColumn>\n    );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0.75};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map((option, optionIndex) => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(\n                              renderOption(option, optionIndex),\n                              optionIndex\n                          )\n                        : renderOption(option, optionIndex)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COPY,\n    ICONS,\n    DURATION_OPTIONS,\n    FONTS,\n    BORDER_WIDTH,\n} from './atoms/tokens';\n\nconst TaskHeader = styled(FlexBox).attrs({\n    forwardedAs: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${theme.SHADED};\n        font-size: ${FONTS.LARGE.SIZE};\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    align-self: center;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst DurationOptionBar = styled(OptionBar)(\n    ({ theme }) => `\n        background-color: ${theme.SHADED};\n        border-top: ${BORDER_WIDTH} solid ${theme.BACKGROUND};\n    `\n);\n\nconst TaskDetails = ({ appActions = {}, appData = {} }) => {\n    const { onUpdateTask } = appActions;\n    const { isCreatingTask, selectedTaskId, tasks } = appData;\n    const activeTask = tasks.find(task => task.id === selectedTaskId) || {};\n    const { icon, id, label, notes, scheduled_minutes } = activeTask;\n    const isEmpty = !activeTask.id;\n\n    const handleUpdateTask = useCallback(\n        (field, value) => onUpdateTask(id, { [field]: value }),\n        [id, onUpdateTask]\n    );\n\n    const handleSaveDuration = useCallback(\n        newDuration => handleUpdateTask('scheduled_minutes', newDuration),\n        [handleUpdateTask]\n    );\n\n    const handleSaveIcon = useCallback(\n        newNotes => handleUpdateTask('icon', newNotes),\n        [handleUpdateTask]\n    );\n\n    const handleSaveLabel = useCallback(\n        newLabel => handleUpdateTask('label', newLabel),\n        [handleUpdateTask]\n    );\n\n    const handleSaveNotes = useCallback(\n        newNotes => handleUpdateTask('notes', newNotes),\n        [handleUpdateTask]\n    );\n\n    return (\n        !isEmpty && (\n            <>\n                <TaskHeader>\n                    <TaskHeaderLabel>\n                        <EditInPlace\n                            isRemotelyActivated={isCreatingTask}\n                            placeholder={COPY.EMPTY_LABEL}\n                            value={label}\n                            onSave={handleSaveLabel}\n                        />\n                    </TaskHeaderLabel>\n                    <TaskHeaderIcon>\n                        <EditInPlace\n                            placeholder={ICONS.TASK_DEFAULT}\n                            value={icon}\n                            onSave={handleSaveIcon}\n                        />\n                    </TaskHeaderIcon>\n                </TaskHeader>\n\n                <DurationOptionBar\n                    options={DURATION_OPTIONS}\n                    renderSelectedOption={option => <span>{option} mins</span>}\n                    selectedOption={scheduled_minutes}\n                    title={COPY.TIPS.SETTING_DURATION}\n                    onChange={handleSaveDuration}\n                />\n\n                <EditInPlace\n                    isFlexible\n                    isMultiLine\n                    margin={1}\n                    placeholder={COPY.EMPTY_NOTES}\n                    render={rawNotes => (\n                        <div\n                            className=\"markdown\"\n                            dangerouslySetInnerHTML={{\n                                __html: marked(rawNotes),\n                            }}\n                        />\n                    )}\n                    canvasStyles={{\n                        bottom: 0,\n                        fontSize: FONTS.LARGE.SIZE,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                    value={notes}\n                    onSave={handleSaveNotes}\n                />\n            </>\n        )\n    );\n};\n\nexport default TaskDetails;\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","import React, { memo, useState } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    buildPalette,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, theme }) => `\n        background-color: ${theme.BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 ${isActive ? 2 : 1}px\n            ${theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER']};\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        width: 100%;\n        z-index: ${isActive ? 100 : 10};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n            \n        & ::selection {\n            color: ${theme.HIGH_CONTRAST_BACKGROUND};\n            background-color: ${theme.HIGH_CONTRAST_TEXT};\n        }\n\n        &:before {\n            background-color: ${theme.PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${\n                theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER']\n            };\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${theme.TASK_BORDER_ACTIVE};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${theme.TASK_BORDER_ACTIVE} inset;\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n})(\n    ({ duration, isActive, isMouseOver, theme }) => `\n        color: ${theme[isActive || isMouseOver ? 'TEXT' : 'TEXT_FADED']};\n        min-height: ${minutesToHeight(Math.min(30, duration))};\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ duration }) => `\n        font-size: ${duration <= 15 ? FONTS.NORMAL.SIZE : FONTS.LARGE.SIZE};\n        height: ${minutesToHeight(Math.min(30, duration))};\n        width: auto;\n    `\n);\n\nexport const TaskCardContainer = styled(FlexBox).attrs({\n    isFlexible: true,\n    justify: 'flex-start',\n    direction: 'column',\n    spacing: 0.5,\n    padding: 1,\n})`\n    height: 100%;\n`;\n\nconst TaskCard = ({ appActions, appData, task, ...otherProps }) => {\n    const [isMouseOver, setIsMouseOver] = useState(false);\n\n    const { onImmediatelySelectTask, onTransitionToTask } = appActions;\n\n    const { isShowingListManager, lists, selectedTaskId, theme } = appData;\n\n    const { icon, id, label, list_id, scheduled_minutes } = task;\n\n    const listColorCode = lists.find(list => list.id === list_id).color_code;\n\n    const cardPalette = buildPalette(theme, listColorCode);\n\n    const isActive = task.id === selectedTaskId;\n\n    const [dragProps] = useDrag({ 'task-id': id });\n\n    const handleClick = () => {\n        if (isShowingListManager) {\n            onImmediatelySelectTask(id);\n            return;\n        }\n\n        onTransitionToTask(id);\n    };\n\n    const toggleIsMouseOver = () => setIsMouseOver(!isMouseOver);\n\n    return (\n        <ThemeProvider theme={cardPalette}>\n            <Container\n                data-task-id={id}\n                duration={scheduled_minutes}\n                isActive={isActive}\n                tabIndex={0}\n                title={COPY.TIPS.MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE}\n                onClick={handleClick}\n                onMouseEnter={toggleIsMouseOver}\n                onMouseLeave={toggleIsMouseOver}\n                {...dragProps}\n                {...otherProps}\n            >\n                <CardLabel\n                    duration={scheduled_minutes}\n                    isActive={isActive}\n                    isMouseOver={isMouseOver}\n                >\n                    {label}\n                </CardLabel>\n                <CardIcon duration={scheduled_minutes}>{icon}</CardIcon>\n            </Container>\n        </ThemeProvider>\n    );\n};\n\nexport default memo(TaskCard);\n","import React, { memo } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\n\nconst TaskList = ({ appActions, appData, ...otherProps }) => {\n    const { onChangeTaskPosition, onCreateTask } = appActions;\n\n    const { incompleteTasks, lists, selectedListId } = appData;\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const unscheduledTasks = incompleteTasks.filter(\n        task =>\n            !task.scheduled &&\n            task.list_id === selectedListId &&\n            !selectedList.isArchived\n    );\n\n    const [taskCardDropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n            const droppedOnTaskIndex = appData.tasks.findIndex(\n                task => task.id === droppedOnTaskId\n            );\n            onChangeTaskPosition(taskId, droppedOnTaskIndex);\n        },\n    });\n\n    return (\n        <TaskCardContainer {...otherProps}>\n            <GhostButton\n                style={{\n                    height: minutesToHeight(30),\n                }}\n                title={COPY.TIPS.CREATE_NEW_TASK}\n                onClick={() => onCreateTask()}\n            >\n                {COPY.CREATE_TASK_LABEL}\n            </GhostButton>\n            {unscheduledTasks.map(task => (\n                <TaskCard\n                    key={task.id}\n                    appActions={appActions}\n                    appData={appData}\n                    task={task}\n                    {...taskCardDropProps}\n                />\n            ))}\n        </TaskCardContainer>\n    );\n};\n\nexport default memo(TaskList);\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${isTargetedForDrop ? `4px dotted ${theme.PRIMARY}` : ''};\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop({\n            'task-id': taskId =>\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    scheduled: true,\n                    scheduled_time: newTime,\n                }),\n        });\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COPY, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: COPY.LABEL_FOR_TIMELINE,\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${theme.TASK_BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, theme.TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${theme.BORDER};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            opacity: ${isFaded ? 0.5 : 1};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop({ 'task-id': () => {} });\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY, GRID_UNIT, ICONS, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst DROP_ZONE_SIZE = `calc(${GRID_UNIT} * 4)`;\n\nconst pulsingAnimation = ({ from, to }) => keyframes`\n    0% {\n        transform: scale(${from});\n    }\n    100% {\n        transform: scale(${to});\n    }\n`;\n\nconst AnimatedContainer = styled(FlexBox)(\n    ({ isDraggingTask, isTargetedForDrop }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop\n            ? pulsingAnimation({ from: 1.6, to: 2.4 })\n            : isDraggingTask\n            ? pulsingAnimation({ from: 1, to: 1.6 })\n            : 'unset'};\n        animation-timing-function: ease-in-out;\n        bottom: 0;\n        height: ${DROP_ZONE_SIZE};\n        position: fixed;\n        right: 0;\n        transform-origin: bottom right;\n        transform: scale(${isDraggingTask ? 1.5 : 1});\n        width: ${DROP_ZONE_SIZE};\n        z-index: 1000;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst TrashDropZone = styled(AnimatedContainer)(\n    ({ isDraggingTask }) => `\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n    `\n);\n\nconst TrashIconContainer = styled(AnimatedContainer).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 1,\n})(\n    ({ isDraggingTask, isShowingTrashContents, isTargetedForDrop, theme }) => `\n        color: ${\n            isTargetedForDrop\n                ? '#FF0000'\n                : theme[\n                      isDraggingTask || isShowingTrashContents\n                          ? 'PRIMARY'\n                          : 'TEXT_FADED'\n                  ]\n        };\n        cursor: pointer;\n        font-size: 3rem;\n        opacity: ${!isTargetedForDrop && !isDraggingTask ? 0.6 : 1};\n        \n        &:hover {\n            color: ${theme.PRIMARY};\n        }\n    `\n);\n\nconst Trash = ({ appActions, appData, ...otherProps }) => {\n    const {\n        onChangeIsShowingTrashContents,\n        deleteTask,\n        onSelectList,\n        onUpdateList,\n    } = appActions;\n\n    const {\n        isDraggingTask,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n    } = appData;\n\n    const [dropProps] = useDrop({\n        'list-id': listId => {\n            if (selectedListId === listId) {\n                const firstUnarchivedList = lists.find(\n                    list => list.id !== listId && !list.isArchived\n                );\n\n                if (firstUnarchivedList) {\n                    onSelectList(firstUnarchivedList.id);\n                }\n            }\n\n            onUpdateList(listId, {\n                isArchived: true,\n            });\n        },\n        'task-id': deleteTask,\n    });\n\n    const handleClick = () =>\n        onChangeIsShowingTrashContents(!isShowingTrashContents);\n\n    return (\n        <>\n            <TrashIconContainer\n                isDraggingTask={isDraggingTask}\n                isShowingTrashContents={isShowingTrashContents}\n                isTargetedForDrop={dropProps.isTargetedForDrop}\n                title={COPY.TIPS.DELETE_TASK}\n                onClick={handleClick}\n            >\n                {ICONS.END_ZONE}\n            </TrashIconContainer>\n            <TrashDropZone\n                isDraggingTask={isDraggingTask}\n                {...dropProps}\n                {...otherProps}\n            />\n        </>\n    );\n};\n\nexport default Trash;\n","import random from 'lodash/random';\nimport React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport Icon from './atoms/Icon';\nimport { GRID_UNIT } from './atoms/tokens';\n\nconst animation = ({ minOpacity, translationDistance }) => keyframes`\n    0% {\n        transform: translateY(-${translationDistance}px);\n        opacity: ${minOpacity};\n    }\n    100% {\n        transform: translateY(${translationDistance}px);\n        opacity: 1;\n    }\n`;\n\nconst Container = styled.div(\n    () => css`\n        animation-direction: alternate;\n        animation-duration: ${random(300, 400)}ms;\n        animation-iteration-count: infinite;\n        animation-name: ${animation({\n            translationDistance: random(0.5, 2),\n            minOpacity: random(0.75, 0.9),\n        })};\n        animation-timing-function: ease-in-out;\n        position: relative;\n\n        & > * {\n            width: 100%;\n        }\n    `\n);\n\nconst RestoreButton = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 0.25,\n})(\n    ({ theme }) => `\n        background-color: ${theme.NEUTRAL_BACKGROUND};\n        border: 2px solid ${theme.NEUTRAL_FOREGROUND};\n        border-radius: 100px;\n        color: ${theme.NEUTRAL_FOREGROUND};\n        cursor: pointer;\n        height: calc(${GRID_UNIT});\n        position: absolute;\n        right: 0;\n        top: 0;\n        transform: translate(50%, -50%);\n        width: calc(${GRID_UNIT});\n        z-index: 1000;\n        \n        &:hover {\n            background-color: ${theme.NEUTRAL_FOREGROUND};\n            border-color: ${theme.NEUTRAL_BACKGROUND};\n            color: ${theme.NEUTRAL_BACKGROUND};\n        }\n    `\n);\n\nconst TrashedCard = ({\n    children,\n    restoreButtonTitle,\n    onRestore,\n    ...otherProps\n}) => (\n    <Container {...otherProps}>\n        <RestoreButton title={restoreButtonTitle} onClick={onRestore}>\n            <Icon iconName=\"reply\" />\n        </RestoreButton>\n        {children}\n    </Container>\n);\n\nexport default TrashedCard;\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY, LIST_CARD_WIDTH } from './atoms/tokens';\nimport ListCard, { ListCardContainer } from './ListCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedLists = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateList } = appActions;\n\n    const { lists } = appData;\n\n    const deletedLists = lists.filter(list => list.isArchived);\n\n    const hasDeletedLists = deletedLists.length;\n\n    const handleRestoreList = listId =>\n        onUpdateList(listId, { isArchived: false });\n\n    return (\n        <>\n            {!hasDeletedLists && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_LISTS}\n                </FlexBox>\n            )}\n            {!!hasDeletedLists && (\n                <ListCardContainer {...otherProps}>\n                    {deletedLists.map(list => (\n                        <TrashedCard\n                            key={list.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_LIST}\n                            style={{ width: LIST_CARD_WIDTH }}\n                            onRestore={handleRestoreList.bind(this, list.id)}\n                        >\n                            <ListCard\n                                appActions={appActions}\n                                appData={appData}\n                                isEditable={false}\n                                listId={list.id}\n                                style={{ marginLeft: 0 }}\n                            />\n                        </TrashedCard>\n                    ))}\n                </ListCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedLists);\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedTasks = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateTask } = appData;\n\n    const { tasks } = appData;\n\n    const deletedTasks = tasks.filter(task => task.isComplete);\n\n    const hasDeletedTasks = deletedTasks.length;\n\n    const handleRestoreTask = taskId =>\n        onUpdateTask(taskId, { isComplete: false });\n\n    return (\n        <>\n            {!hasDeletedTasks && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_TASKS}\n                </FlexBox>\n            )}\n            {!!hasDeletedTasks && (\n                <TaskCardContainer {...otherProps}>\n                    {deletedTasks.map(task => (\n                        <TrashedCard\n                            key={task.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_TASK}\n                            style={{ width: '100%' }}\n                            onRestore={handleRestoreTask.bind(this, task.id)}\n                        >\n                            <TaskCard\n                                appActions={appActions}\n                                appData={appData}\n                                isActive\n                                task={task}\n                            />\n                        </TrashedCard>\n                    ))}\n                </TaskCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedTasks);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                ![null, 'undefined'].includes(savedState)\n                    ? JSON.parse(savedState)\n                    : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import random from 'lodash/random';\nimport sample from 'lodash/sample';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { StyleSheetManager, ThemeProvider } from 'styled-components';\nimport { PrimaryAppColumn } from './components/AppColumn';\nimport { ToggleButton } from './components/atoms/Button';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport {\n    buildPalette,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    PRIMARY_COLORS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    SIDEBAR_DEFAULT_WIDTH,\n    SIDEBAR_EXTENDED_WIDTH,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\nimport Transition from './components/atoms/Transition';\nimport ListManager from './components/ListManager';\nimport Sidebar from './components/Sidebar';\nimport TaskDetails from './components/TaskDetails';\nimport TaskList from './components/TaskList';\nimport Timeline from './components/Timeline';\nimport ToolBar from './components/ToolBar';\nimport Trash from './components/Trash';\nimport TrashedLists from './components/TrashedLists';\nimport TrashedTasks from './components/TrashedTasks';\nimport useKeyboardShortcuts from './hooks/useKeyboardShortcuts';\nimport usePersistentState from './hooks/usePersistentState';\n\nfunction App() {\n    const [isShowingSidebar, setIsShowingSidebar] = usePersistentState(\n        'is-showing-sidebar',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        INITIAL_SELECTED_LIST_ID\n    );\n    const [isShowingListManager, setIsShowingListManager] = usePersistentState(\n        'is-showing-list-manager',\n        true\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        INITIAL_SELECTED_TASK_ID\n    );\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingList, setIsCreatingList] = useState(false);\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const [isShowingTrashContents, setIsShowingTrashContents] = useState(false);\n    const [isTransitioning, setIsTransitioning] = useState(false);\n    const unarchivedLists = useMemo(\n        () => lists.filter(list => !list.isArchived),\n        [lists]\n    );\n    const currentListIndex = unarchivedLists.findIndex(\n        list => list.id === selectedListId\n    );\n    const selectedTask = tasks.find(task => task.id === selectedTaskId);\n    const listContainingSelectedTask = selectedTask\n        ? lists.find(list => list.id === selectedTask.list_id)\n        : null;\n    const selectedList = lists.find(list => list.id === selectedListId);\n    const primarycolorCode = listContainingSelectedTask\n        ? listContainingSelectedTask.color_code\n        : selectedList\n        ? selectedList.color_code\n        : PRIMARY_COLORS[0].primaryColor;\n    const palette = buildPalette(themeName, primarycolorCode);\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n    const hasUnarchivedList = lists.filter(list => !list.isArchived).length;\n    const isSidebarOpen = hasUnarchivedList && isShowingSidebar;\n\n    useEffect(() => {\n        const handleDragOver = () => setIsDraggingTask(true);\n        const handleDragEnd = () => setIsDraggingTask(false);\n        document.addEventListener('dragover', handleDragOver);\n        document.addEventListener('dragend', handleDragEnd);\n        document.addEventListener('drop', handleDragEnd);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n            document.removeEventListener('dragend', handleDragEnd);\n            document.removeEventListener('drop', handleDragEnd);\n        };\n    }, []);\n\n    const onCreateList = useCallback(\n        (overrides = {}) => {\n            const newListId = Date.now();\n            const randomcolorCode = random(0, PRIMARY_COLORS.length);\n\n            setLists(currentLists =>\n                currentLists.concat([\n                    {\n                        id: newListId,\n                        color_code: randomcolorCode,\n                        isArchived: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_LIST_LABEL\n                        }`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedListId(newListId);\n\n            setIsCreatingList(true);\n\n            setTimeout(() => setIsCreatingList(false), 1000);\n        },\n        [setSelectedListId, setLists]\n    );\n\n    const onUpdateList = useCallback(\n        (listId, updates) => {\n            setLists(prevLists =>\n                prevLists.map(list => {\n                    if (list.id === listId) {\n                        return {\n                            ...list,\n                            ...updates,\n                        };\n                    }\n                    return list;\n                })\n            );\n        },\n        [setLists]\n    );\n\n    const onSelectList = useCallback(\n        listId => {\n            const firstTaskIdInList = incompleteTasks.find(\n                task => task.list_id === listId\n            );\n            setSelectedListId(listId);\n            setSelectedTaskId(firstTaskIdInList ? firstTaskIdInList.id : '');\n            setIsShowingSidebar(true);\n            setIsShowingTrashContents(false);\n            setIsShowingListManager(true);\n        },\n        [\n            incompleteTasks,\n            setSelectedListId,\n            setSelectedTaskId,\n            setIsShowingSidebar,\n            setIsShowingTrashContents,\n            setIsShowingListManager,\n        ]\n    );\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                [\n                    {\n                        icon: ICONS.TASK_DEFAULT,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_TASK_LABEL\n                        }`,\n                        notes: COPY.NEW_TASK_NOTES,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ].concat(currentTasks)\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingTask(true);\n\n            setIsShowingListManager(false);\n        },\n        [selectedListId, setIsShowingListManager, setSelectedTaskId, setTasks]\n    );\n\n    useEffect(() => {\n        if (isCreatingTask) {\n            setIsShowingListManager(false);\n            const timer = setTimeout(() => setIsCreatingTask(false), 100);\n            return () => clearTimeout(timer);\n        }\n    }, [isCreatingTask, setIsCreatingTask, setIsShowingListManager]);\n\n    const onSelectTask = useCallback(\n        taskId => {\n            const task = tasks.find(task => task.id === taskId);\n\n            setSelectedListId(task.list_id);\n\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            setSelectedTaskId(taskId);\n        },\n        [\n            isShowingListManager,\n            tasks,\n            setIsShowingListManager,\n            setSelectedTaskId,\n            setSelectedListId,\n        ]\n    );\n\n    const selectTaskByRelativeIndex = useCallback(\n        relativeIndex => {\n            const tasksInList = tasks.filter(\n                task =>\n                    task.list_id === selectedListId &&\n                    !task.isComplete &&\n                    !task.scheduled\n            );\n\n            const numTasksInList = tasksInList.length;\n\n            const indexOfCurrentTask = tasksInList.findIndex(\n                task => task.id === selectedTaskId\n            );\n\n            const totalSteps =\n                relativeIndex >= 0\n                    ? relativeIndex\n                    : Math.abs(relativeIndex) * (numTasksInList - 1);\n\n            const targetIndex =\n                (indexOfCurrentTask + totalSteps) % numTasksInList;\n\n            const taskAtRelativeIndex = tasksInList[targetIndex];\n\n            if (taskAtRelativeIndex) {\n                onSelectTask(taskAtRelativeIndex.id);\n            }\n        },\n        [onSelectTask, selectedListId, selectedTaskId, tasks]\n    );\n\n    const transition = useCallback(\n        callback => {\n            setIsTransitioning(true);\n            setTimeout(() => {\n                callback();\n                setIsTransitioning(false);\n            }, ROUTE_TRANSITION_ANIMATION_DURATION / 2);\n        },\n        [setIsTransitioning]\n    );\n\n    const onImmediatelySelectTask = useCallback(\n        taskId => {\n            onSelectTask(taskId);\n        },\n        [onSelectTask]\n    );\n\n    const onTransitionToTask = useCallback(\n        taskId => {\n            transition(() => onSelectTask(taskId));\n        },\n        [onSelectTask, transition]\n    );\n\n    const onChangeIsSidebarOpen = setIsShowingSidebar;\n\n    const onChangeIsShowingListManager = useCallback(\n        newIsShowingListManager => {\n            transition(() => {\n                setIsShowingListManager(newIsShowingListManager);\n\n                if (newIsShowingListManager) {\n                    setIsShowingSidebar(true);\n                }\n\n                setIsShowingTrashContents(false);\n            });\n        },\n        [\n            setIsShowingSidebar,\n            setIsShowingListManager,\n            setIsShowingTrashContents,\n            transition,\n        ]\n    );\n\n    const onChangeIsShowingTrashContents = useCallback(() => {\n        if (!isShowingSidebar) {\n            setIsShowingSidebar(true);\n        }\n        if (!isShowingListManager) {\n            setIsShowingListManager(true);\n        }\n        setIsShowingTrashContents(!isShowingTrashContents);\n    }, [\n        isShowingListManager,\n        isShowingSidebar,\n        isShowingTrashContents,\n        setIsShowingListManager,\n        setIsShowingSidebar,\n        setIsShowingTrashContents,\n    ]);\n\n    const deleteTask = useCallback(\n        taskId => {\n            if (selectedTaskId === taskId) {\n                const firstUnarchivedTask = tasks.find(\n                    task =>\n                        task.id !== taskId &&\n                        task.list_id === selectedListId &&\n                        !task.isComplete\n                );\n\n                if (firstUnarchivedTask) {\n                    onImmediatelySelectTask(firstUnarchivedTask.id);\n                } else {\n                    onChangeIsShowingListManager(true);\n                }\n            }\n\n            onUpdateTask(taskId, {\n                isComplete: true,\n            });\n        },\n        [\n            onChangeIsShowingListManager,\n            onImmediatelySelectTask,\n            onUpdateTask,\n            selectedListId,\n            tasks,\n            selectedTaskId,\n        ]\n    );\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const moveTaskToTimeline = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: true,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const moveTaskToTaskList = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: false,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const selectNextList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const nextListIndex = currentListIndex + 1;\n            const nextIndex =\n                nextListIndex > unarchivedLists.length - 1 ? 0 : nextListIndex;\n            onSelectList(unarchivedLists[nextIndex].id);\n        },\n        [currentListIndex, onSelectList, unarchivedLists]\n    );\n\n    const selectPreviousList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const prevListIndex = currentListIndex - 1;\n            const prevIndex =\n                prevListIndex < 0 ? unarchivedLists.length - 1 : prevListIndex;\n            onSelectList(unarchivedLists[prevIndex].id);\n        },\n        [currentListIndex, onSelectList, unarchivedLists]\n    );\n\n    const setTaskDuration = useCallback(\n        duration => {\n            onUpdateTask(selectedTaskId, {\n                scheduled_minutes: duration,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const toggleTaskListVisibility = useCallback(\n        evt => {\n            evt.preventDefault();\n\n            if (isShowingSidebar) {\n                setIsShowingTrashContents(false);\n            }\n\n            onChangeIsSidebarOpen(!isShowingSidebar);\n        },\n        [isShowingSidebar, onChangeIsSidebarOpen]\n    );\n\n    const toggleDarkMode = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n        },\n        [onChangeTheme, themeName]\n    );\n\n    const toggleIsEditingCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            setIsCreatingTask(true);\n        },\n        [setIsCreatingTask]\n    );\n\n    const toggleIsShowingListManager = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeIsShowingListManager(!isShowingListManager);\n        },\n        [isShowingListManager, onChangeIsShowingListManager]\n    );\n\n    const createNewTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onCreateTask();\n        },\n        [onCreateTask]\n    );\n\n    const deleteCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            deleteTask(selectedTaskId);\n        },\n        [deleteTask, selectedTaskId]\n    );\n\n    const goBack = useCallback(() => {\n        setIsShowingTrashContents(current => {\n            if (current) {\n                return false;\n            }\n        });\n\n        setIsShowingListManager(current => !current);\n    }, [setIsShowingListManager, setIsShowingTrashContents]);\n\n    const keyMap = useMemo(() => {\n        return {\n            ...[15, 30, 45, 60, 90, 120].reduce((acc, duration, index) => {\n                return {\n                    ...acc,\n                    [index + 1]: setTaskDuration.bind(null, duration),\n                };\n            }, {}),\n            'cmd + arrowRight': moveTaskToTimeline,\n            'cmd + arrowLeft': moveTaskToTaskList,\n            'cmd + shift + arrowRight': selectNextList,\n            'cmd + shift + arrowLeft': selectPreviousList,\n            'cmd + shift + ]': selectNextList,\n            'cmd + shift + [': selectPreviousList,\n            'b': toggleTaskListVisibility,\n            'd': toggleDarkMode,\n            'e': toggleIsEditingCurrentTask,\n            'escape': goBack,\n            'l': toggleIsShowingListManager,\n            'n': createNewTask,\n            't': deleteCurrentTask,\n            'arrowUp': selectTaskByRelativeIndex.bind(null, -1),\n            'arrowDown': selectTaskByRelativeIndex.bind(null, 1),\n        };\n    }, [\n        createNewTask,\n        deleteCurrentTask,\n        goBack,\n        moveTaskToTaskList,\n        moveTaskToTimeline,\n        selectNextList,\n        selectPreviousList,\n        selectTaskByRelativeIndex,\n        setTaskDuration,\n        toggleTaskListVisibility,\n        toggleDarkMode,\n        toggleIsEditingCurrentTask,\n        toggleIsShowingListManager,\n    ]);\n\n    useKeyboardShortcuts(keyMap);\n\n    const appActions = {\n        onChangeIsSidebarOpen,\n        onChangeTaskPosition,\n        onChangeIsShowingListManager,\n        onChangeIsShowingTrashContents,\n        onChangeTheme,\n        onCreateList,\n        onCreateTask,\n        deleteTask,\n        onSelectList,\n        onImmediatelySelectTask,\n        onTransitionToTask,\n        onUpdateList,\n        onUpdateTask,\n    };\n\n    const appData = {\n        incompleteTasks,\n        isSidebarOpen,\n        isCreatingList,\n        isCreatingTask,\n        isDraggingTask,\n        isShowingListManager,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    const columnWidths = isSidebarOpen\n        ? {\n              sidebar: SIDEBAR_DEFAULT_WIDTH,\n              listManager: '40vw',\n              taskDetails: '40vw',\n              timeline: SIDEBAR_DEFAULT_WIDTH,\n          }\n        : {\n              sidebar: `calc(${GRID_UNIT} * 2)`,\n              listManager: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              taskDetails: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              timeline: SIDEBAR_EXTENDED_WIDTH,\n          };\n\n    return (\n        <StyleSheetManager disableVendorPrefixes>\n            <ThemeProvider theme={palette}>\n                <GlobalStyle />\n                <Trash appActions={appActions} appData={appData} />\n                <FlexBox align=\"stretch\" poop=\"poop\">\n                    <Sidebar\n                        appActions={appActions}\n                        appData={appData}\n                        style={{\n                            width: columnWidths.sidebar,\n                        }}\n                    >\n                        {isShowingTrashContents ? (\n                            <TrashedTasks\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : (\n                            <TaskList\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        )}\n                    </Sidebar>\n\n                    <PrimaryAppColumn\n                        label={\n                            isShowingTrashContents\n                                ? COPY.LABEL_FOR_TRASHED_LISTS\n                                : isShowingListManager\n                                ? COPY.LABEL_FOR_LIST_MANAGER\n                                : COPY.LABEL_FOR_TASK_DETAILS\n                        }\n                        style={{\n                            width: isShowingListManager\n                                ? columnWidths.listManager\n                                : columnWidths.taskDetails,\n                        }}\n                    >\n                        <ToolBar>\n                            <ToggleButton\n                                isActive={isShowingListManager}\n                                title={COPY.TIPS.TOGGLE_LIST_MANAGER}\n                                onClick={() =>\n                                    onChangeIsShowingListManager(\n                                        !isShowingListManager\n                                    )\n                                }\n                            >\n                                {isShowingListManager ? (\n                                    <FlexBox spacing={0.25}>\n                                        {ICONS.TASK_DETAILS}\n                                        <span>\n                                            {COPY.LABEL_FOR_TASK_DETAILS}\n                                        </span>\n                                    </FlexBox>\n                                ) : (\n                                    <FlexBox spacing={0.25}>\n                                        {ICONS.LIST_MANAGER}\n                                        <span>\n                                            {COPY.LABEL_FOR_LIST_MANAGER}\n                                        </span>\n                                    </FlexBox>\n                                )}\n                            </ToggleButton>\n                        </ToolBar>\n                        <Transition\n                            isTransitioning={isTransitioning}\n                            style={{ height: '100%' }}\n                        >\n                            {isShowingTrashContents ? (\n                                <TrashedLists\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            ) : isShowingListManager ? (\n                                <ListManager\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            ) : (\n                                <TaskDetails\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            )}\n                        </Transition>\n                    </PrimaryAppColumn>\n\n                    <Timeline\n                        appActions={appActions}\n                        appData={appData}\n                        selectedTaskId={selectedTaskId}\n                        from={TIMELINE_FROM}\n                        style={{\n                            width: columnWidths.timeline,\n                        }}\n                        tasks={incompleteTasks}\n                        to={TIMELINE_TO}\n                    />\n                </FlexBox>\n            </ThemeProvider>\n        </StyleSheetManager>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}