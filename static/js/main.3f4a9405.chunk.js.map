{"version":3,"sources":["tokens.js","components/atoms/Box.js","components/atoms/FlexBox.js","hooks/useDrop.js","components/CompletedTasksDropZone.js","components/atoms/Button.js","components/OptionBar.js","components/EditInPlace.js","components/TaskDetails.js","utils/minutesToHeight.js","utils/strToHoursAndMinutes.js","utils/toInt.js","hooks/useDrag.js","components/TaskCard.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/WaitingArea.js","hooks/usePersistentState.js","index.js"],"names":["DARK","BORDER_HOVER","setLightness","BORDER_IDLE","SHADED","lighten","BACKGROUND","TEXT","TEXT_FADED","transparentize","BORDER_NEUTRAL","LIGHT","rgba","PRIMARY","COLORS","DURATION_OPTIONS","INITIAL_TASKS","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","Box","styled","div","_ref","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","concat","name","FlexBox","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","useDrop","type","callback","_useState","useState","_useState2","Object","slicedToArray","isTargetedForDrop","setIsTargetedForDrop","droppable","onDragEnter","evt","preventDefault","onDragOver","onDragLeave","onDrop","payload","dataTransfer","getData","isNaN","parseFloat","pulsingAnimation","keyframes","_templateObject","Container","_ref2","isDragging","css","_templateObject2","CompletedTasksDropZone","_ref3","appActions","otherProps","objectWithoutProperties","onSelectTask","onUpdateTask","_useDrop","taskId","isComplete","currentSelectedTaskId","console","log","dropProps","react_default","a","createElement","assign","Button","attrs","as","GhostButton","OptionButton","isSelected","OptionBar","options","_ref3$renderOption","renderOption","option","_ref3$renderSelectedO","renderSelectedOption","selectedOption","onChange","OptionBar_Container","map","key","onClick","isEditing","isEmpty","EditInPlace","_ref2$isMultiLine","isMultiLine","_ref2$placeholder","placeholder","_ref2$render","render","value","_ref2$value","_ref2$onSave","onSave","setIsEditing","_useState3","_useState4","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","inputRef","useRef","measuringElementRef","trim","useEffect","current","select","focus","el","offsetHeight","EditInPlace_Container","onDoubleClick","Fragment","ref","style","position","pointerEvents","opacity","outline","whiteSpace","width","disabled","rows","display","height","onBlur","target","onKeyDown","metaKey","shiftKey","isLoading","ANIMATION_DURATION","TaskHeader","TaskHeaderLabel","role","TaskDetails_templateObject","TaskHeaderIcon","TaskDetails_templateObject2","TaskDetails","_ref3$task","task","setIsLoading","icon","id","label","notes","scheduled_minutes","handleUpdateTask","field","[object Object]","useLayoutEffect","newTimer","setTimeout","clearTimeout","TaskDetails_Container","components_OptionBar","newDuration","components_EditInPlace","newLabel","newNotes","rawNotes","className","dangerouslySetInnerHTML","__html","marked","minutesToHeight","minutes","strToHoursAndMinutes","str","split","val","parseInt","useDrag","setIsDragging","isDraggingOver","setIsDraggingOver","draggable","onDragEnd","onDragStart","setData","duration","isActive","Label","TaskCard","_useDrag","dragProps","TaskCard_Container","maxHeight","overflow","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","Math","floor","scheduled","scheduled_time","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","TimelineDropZone_TimelineDropTarget","Timeline_templateObject","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","offsetMinutes","CurrentTimeMarker","Timeline","_ref4","selectedTaskId","from","tasks","to","onClickTask","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isLoaded","setIsLoaded","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","CreateFirstTaskTip","WaitingArea_templateObject","WaitingArea","onUpdateTasks","WaitingArea_Container","length","aria-label","newTaskId","components_TaskCard","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","GlobalStyle","createGlobalStyle","src_templateObject","App","_usePersistentState","_usePersistentState2","setTasks","_usePersistentState3","_usePersistentState4","setTheme","_usePersistentState5","_usePersistentState6","setSelectedTaskId","activeTask","tasksArray","values","filter","hasTasks","scheduledTasks","unScheduledTasks","handleDragEnd","onChangeTheme","newTheme","arguments","undefined","updates","prevState","objectSpread2","styled_components_browser_esm","components_CompletedTasksDropZone","src_Container","components_Timeline","components_TaskDetails","atoms_FlexBox","toLowerCase","components_WaitingArea","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.3f4a9405.chunk.js","sourcesContent":["import { lighten, rgba, setLightness, transparentize } from 'polished';\n\nexport const BULLET_SIZE = '10px';\nexport const BORDER_RADIUS = '3px';\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = PRIMARY;\nDARK.BACKGROUND = '#000209';\nDARK.BORDER_HOVER = setLightness(0.5, PRIMARY);\nDARK.BORDER_IDLE = setLightness(0.3, PRIMARY);\nDARK.SHADED = lighten(0.08, DARK.BACKGROUND);\nDARK.TEXT = setLightness(0.85, PRIMARY);\nDARK.TEXT_FADED = transparentize(0.5, DARK.TEXT);\nDARK.BORDER_NEUTRAL = setLightness(0.15, DARK.TEXT);\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.BACKGROUND = 'white';\nLIGHT.BORDER_HOVER = rgba('#0094FF', 0.5);\nLIGHT.BORDER_IDLE = rgba('#0094FF', 0.5);\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.TEXT = setLightness(0.15, PRIMARY);\nLIGHT.TEXT_FADED = transparentize(0.4, LIGHT.TEXT);\nLIGHT.BORDER_NEUTRAL = setLightness(0.75, LIGHT.BACKGROUND);\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '30px';\nexport const HOURS_PER_SCREEN = 8;\nexport const INITIAL_TASKS = {};\nexport const MIN_SLOT_HEIGHT = `20px`;\nexport const TIMELINE_FROM = '7:00';\nexport const TIMELINE_TO = '24:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n","import styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from '../../tokens';\n\nconst Box = styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = 0,\n        marginX = 0,\n        marginY = 0,\n        padding = 0,\n        paddingX = 0,\n        paddingY = 0,\n        theme,\n    }) => `\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER_NEUTRAL}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n\nexport default Box;\n","import styled from 'styled-components';\nimport { GRID_UNIT } from '../../tokens';\nimport Box from './Box';\n\nconst FlexBox = styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        justify = 'stretch',\n        spacing = 0,\n    }) => `\n        align-items: ${align};\n        display: flex;\n        flex-direction: ${direction};\n        justify-content: ${justify};\n        width: 100%;\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n\nexport default FlexBox;\n","import { useState } from 'react';\n\nconst useDrop = (type, callback) => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        setIsTargetedForDrop(true);\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = () => {\n        setIsTargetedForDrop(false);\n    };\n\n    const onDrop = evt => {\n        const payload = evt.dataTransfer.getData(type);\n        if (payload) {\n            callback(isNaN(payload) ? payload : parseFloat(payload));\n        }\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import { transparentize } from 'polished';\nimport React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport { COLORS, UNIFIED_TRANSITION } from '../tokens';\n\nconst DROP_ZONE_RADIUS = '20vw';\n\nconst pulsingAnimation = ({ theme }) => keyframes`\n    0% {\n        box-shadow: 0 0 0 0 ${COLORS[theme.name].PRIMARY};\n        transform: scale(1);\n    }\n    100% {\n        box-shadow: 0 0 50px 0 ${COLORS[theme.name].PRIMARY};\n        transform: scale(1.2);\n    }\n`;\n\nconst Container = styled.div(\n    ({ isDragging, isTargetedForDrop, theme }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop ? pulsingAnimation : 'unset'};\n        animation-timing-function: ease-in-out;\n        background: ${transparentize(\n            isTargetedForDrop ? 0 : isDragging ? 0.75 : 1,\n            COLORS[theme.name].PRIMARY\n        )};\n        bottom: calc(${DROP_ZONE_RADIUS} * -${isDragging ? 1 : 2});\n        border-radius: calc(${DROP_ZONE_RADIUS} * 2);\n        height: calc(${DROP_ZONE_RADIUS} * 2);\n        pointer-events: ${isDragging ? 'all' : 'none'};\n        position: fixed;\n        right: calc(${DROP_ZONE_RADIUS} * -${isDragging ? 1 : 2});\n        transform: scale(0.5);\n        width: calc(${DROP_ZONE_RADIUS} * 2);\n        z-index: 100;\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            align-items: center;\n            content: '🏁';\n            display: flex;\n            font-size: 8rem;\n            justify-content: center;\n            height: calc(${DROP_ZONE_RADIUS} * 1.25);\n            left: 0;\n            position: absolute;\n            top: 0;\n            width: calc(${DROP_ZONE_RADIUS} * 1.25);\n        }\n    `\n);\n\nconst CompletedTasksDropZone = ({ appActions, isDragging, ...otherProps }) => {\n    const { onSelectTask, onUpdateTask } = appActions;\n    const [dropProps] = useDrop('task-id', taskId => {\n        onUpdateTask(taskId, {\n            isComplete: true,\n        });\n        onSelectTask(currentSelectedTaskId => {\n            console.log(currentSelectedTaskId, 'v', taskId);\n            return currentSelectedTaskId === taskId\n                ? null\n                : currentSelectedTaskId;\n        });\n    });\n\n    return <Container isDragging={isDragging} {...dropProps} {...otherProps} />;\n};\n\nexport default CompletedTasksDropZone;\n","import styled from 'styled-components';\nimport { BORDER_RADIUS, COLORS, UNIFIED_TRANSITION } from '../../tokens';\nimport Box from './Box';\n\nconst Button = styled(Box).attrs({\n    as: 'button',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].PRIMARY};\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].TEXT};\n        cursor: pointer;\n        transform: scale(1);\n        ${UNIFIED_TRANSITION};\n        \n        &:focus,\n        &:hover {\n            transform: scale(1.1);\n        }\n        &:active {\n            transform: scale(0.9);\n            filter: hue-rotate(20deg);\n        }\n    `\n);\n\nconst GhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        border-radius: ${BORDER_RADIUS};\n        border: 2px dashed ${COLORS[theme.name].BORDER_IDLE};\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            border-color: ${COLORS[theme.name].BORDER_HOVER};\n        }\n    `\n);\n\nexport { GhostButton };\n\nexport default Button;\n","import React from 'react';\nimport { transparentize } from 'polished';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, UNIFIED_TRANSITION } from '../tokens';\n\nconst Container = styled(FlexBox).attrs({\n    justify: 'space-between',\n    paddingX: 1,\n    paddingY: 0.25,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background: ${transparentize(0.5, COLORS[theme.name].SHADED)};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        \n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst OptionButton = styled(Button)(\n    ({ isSelected, theme }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0};\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <Container {...otherProps}>\n        {options.map(option => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(renderOption(option))\n                        : renderOption(option)}\n                </OptionButton>\n            );\n        })}\n    </Container>\n);\n\nexport default OptionBar;\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from '../tokens';\nimport Box from './atoms/Box';\n\nconst Container = styled(Box)(\n    ({ isEditing, isEmpty, theme }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        opacity: ${isEmpty ? 0.5 : 1};\n        user-select: ${isEditing ? 'text' : 'none'};\n    \n        // Tracing element\n        &:before {\n            border: 2px dashed ${COLORS[theme.name].BORDER_HOVER};\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.5 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.5 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            &:before {\n                opacity: 1;\n            }\n        }\n    `\n);\n\nconst EditInPlace = ({\n    isMultiLine = false,\n    placeholder = 'Empty',\n    render = value => value,\n    value = '',\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = value.trim() === '';\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleDoubleClick = () => {\n        setBufferedValue(value);\n        setIsEditing(true);\n    };\n\n    const handleBlur = () => {\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const handleKeyDown = evt => {\n        if (evt.key === 'Escape') {\n            setBufferedValue(value);\n            setIsEditing(false);\n            return;\n        }\n        if (evt.key === 'Enter') {\n            if (evt.metaKey || evt.shiftKey || !isMultiLine) {\n                onSave(bufferedValue);\n                setIsEditing(false);\n            }\n            if (!isMultiLine) {\n                evt.preventDefault();\n                return false;\n            }\n        }\n    };\n\n    return (\n        <Container\n            isEditing={isEditing}\n            isEmpty={isEmpty}\n            onDoubleClick={handleDoubleClick}\n            {...otherProps}\n        >\n            {isEditing ? (\n                <>\n                    <div\n                        ref={measuringElementRef}\n                        style={{\n                            position: 'absolute',\n                            pointerEvents: 'none',\n                            opacity: 0,\n                            outline: '2px dotted red',\n                            whiteSpace: 'pre-wrap',\n                            width: '100%',\n                        }}\n                    >\n                        {bufferedValue}.\n                    </div>\n                    <textarea\n                        disabled={!isEditing}\n                        ref={inputRef}\n                        rows={1}\n                        style={{\n                            display: 'block',\n                            height: `${measuringElementHeight}px`,\n                            width: '100%',\n                        }}\n                        value={bufferedValue}\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        onKeyDown={handleKeyDown}\n                    />\n                </>\n            ) : (\n                render(isEmpty ? placeholder : value)\n            )}\n        </Container>\n    );\n};\n\nexport default EditInPlace;\n","import React, { useLayoutEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport Box from './atoms/Box';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, DURATION_OPTIONS } from '../tokens';\n\nconst ANIMATION_DURATION = 200;\n\nconst Container = styled.div(\n    ({ isLoading, theme }) => `\n        display: flex;\n        flex-direction: column;\n        position: relative;\n        box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1);\n        border-left: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        border-right: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        z-index: 1;\n        \n        &:before {\n            background-color: ${COLORS[theme.name].BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isLoading ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            transition: opacity ${ANIMATION_DURATION / 2 / 1000}s ease-in-out;\n            z-index: 10;\n        }\n    `\n);\n\nconst TaskHeader = styled(FlexBox).attrs({\n    as: 'h1',\n    align: 'flex-start',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: 1.4rem;\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box).attrs({\n    role: 'image',\n})`\n    flex-grow: 1;\n    justify-self: stretch;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst TaskDetails = ({ appActions, task = {}, ...otherProps }) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const { onUpdateTask } = appActions;\n    const { icon, id, label, notes, scheduled_minutes } = task;\n    const isEmpty = !task.id;\n    const handleUpdateTask = (field, value) =>\n        onUpdateTask(id, { [field]: value });\n    const handleSaveDuration = newDuration =>\n        handleUpdateTask('scheduled_minutes', newDuration);\n    const handleSaveIcon = newNotes => handleUpdateTask('icon', newNotes);\n    const handleSaveLabel = newLabel => handleUpdateTask('label', newLabel);\n    const handleSaveNotes = newNotes => handleUpdateTask('notes', newNotes);\n\n    useLayoutEffect(() => {\n        setIsLoading(true);\n        const newTimer = setTimeout(\n            () => setIsLoading(false),\n            ANIMATION_DURATION / 2\n        );\n        return () => clearTimeout(newTimer);\n    }, [task.id]);\n\n    return (\n        <Container isLoading={isLoading} {...otherProps}>\n            {!isEmpty && !isLoading && (\n                <>\n                    <OptionBar\n                        renderSelectedOption={option => `${option} mins`}\n                        selectedOption={scheduled_minutes}\n                        options={DURATION_OPTIONS}\n                        onChange={handleSaveDuration}\n                    />\n\n                    <TaskHeader>\n                        <TaskHeaderLabel>\n                            <EditInPlace\n                                placeholder=\"Untitled\"\n                                value={label}\n                                onSave={handleSaveLabel}\n                            />\n                        </TaskHeaderLabel>\n                        <TaskHeaderIcon>\n                            <EditInPlace\n                                placeholder=\"📌\"\n                                value={icon}\n                                onSave={handleSaveIcon}\n                            />\n                        </TaskHeaderIcon>\n                    </TaskHeader>\n\n                    <EditInPlace\n                        isMultiLine\n                        margin={1}\n                        placeholder=\"Double-click to add notes\"\n                        render={rawNotes => (\n                            <div\n                                className=\"markdown\"\n                                dangerouslySetInnerHTML={{\n                                    __html: marked(rawNotes),\n                                }}\n                            />\n                        )}\n                        value={notes}\n                        onSave={handleSaveNotes}\n                    />\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default TaskDetails;\n","import { HOURS_PER_SCREEN, MIN_SLOT_HEIGHT } from '../tokens';\n\nconst minutesToHeight = minutes => `\n    max(\n        100vh / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n\nexport default minutesToHeight;\n","import { toInt } from './toInt';\n\nexport const strToHoursAndMinutes = str =>\n    str ? str.split(':').map(val => toInt(val)) : [0, 0];\n","export const toInt = str => parseInt(str, 10);\n","import { useState } from 'react';\n\nconst useDrag = (type, payload) => {\n    const [isDragging, setIsDragging] = useState(false);\n    const [isDraggingOver, setIsDraggingOver] = useState(false);\n\n    const onDragStart = evt => {\n        evt.dataTransfer.setData(type, payload);\n        setIsDragging(true);\n    };\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n        setIsDraggingOver(false);\n    };\n\n    const onDragEnter = () => setIsDraggingOver(true);\n\n    const onDragLeave = () => setIsDraggingOver(false);\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        isDraggingOver,\n        onDragEnd,\n        onDragEnter,\n        onDragLeave,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import React from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n    UNIFIED_TRANSITION,\n} from '../tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled.div(\n    ({ duration, isActive, isDragging, isDraggingOver, theme }) => `\n        align-items: center;\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow: ${`0 0 0 2px ${\n            COLORS[theme.name][isActive ? 'PRIMARY' : 'BORDER_IDLE']\n        }`};\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0.5 : 1};\n        padding: 0 calc(${GRID_UNIT} / 2) 0\n            calc(${GRID_UNIT} / 2 + ${LABEL_STRIP_WIDTH});\n        pointer-events: ${isDraggingOver ? 'none' : 'auto'};\n        position: relative;\n        transition-property: opacity, top;\n        width: auto;\n        z-index: ${isActive ? 10 : 'initial'};\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].BORDER_HOVER};\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY} inset;\n        }\n    `\n);\n\nconst Label = styled.div(\n    ({ isActive, theme }) => `\n        align-items: center;\n        color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n        display: flex;\n        height: 100%;\n        justify-content: space-between;\n        max-height: calc((100vh / (${HOURS_PER_SCREEN} * 60)) * 30);\n        min-height: ${MIN_SLOT_HEIGHT};\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst TaskCard = ({ appActions, isActive, task, ...otherProps }) => {\n    const { onSelectTask } = appActions;\n    const { icon, id, label, scheduled_minutes } = task;\n    const [dragProps] = useDrag('task-id', id);\n\n    const handleClick = () => onSelectTask(id);\n\n    return (\n        <Container\n            duration={scheduled_minutes}\n            isActive={isActive}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <Label isActive={isActive}>\n                <div\n                    style={{\n                        maxHeight: '100%',\n                        overflow: 'auto',\n                    }}\n                >\n                    {label}\n                </div>\n                <span>{icon}</span>\n            </Label>\n        </Container>\n    );\n};\n\nexport default TaskCard;\n","import React from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from '../tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { minutesToTime } from '../utils/minutesToTime';\nimport { strToHoursAndMinutes } from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = ({\n    appActions,\n    quarterInMinutes,\n    ...otherProps\n}) => {\n    const { onUpdateTask } = appActions;\n    const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n    const newOffsetMinutes =\n        fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n    const newTime = minutesToTime(newOffsetMinutes);\n    const [dropProps] = useDrop('task-id', taskId =>\n        onUpdateTask(taskId, {\n            scheduled: true,\n            scheduled_time: newTime,\n        })\n    );\n\n    return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n};\n\nconst TimelineDropZone = ({ appActions, totalMinutes, ...otherProps }) => {\n    return (\n        <Container {...otherProps}>\n            {range(totalMinutes / 15).map(quarterInMinutes => (\n                <TimelineDropTarget\n                    key={quarterInMinutes}\n                    appActions={appActions}\n                    quarterInMinutes={quarterInMinutes}\n                />\n            ))}\n        </Container>\n    );\n};\n\nexport default TimelineDropZone;\n","export const minutesToTime = minutes =>\n    `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import range from 'lodash/range';\nimport { transparentize } from 'polished';\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from '../tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { strToHoursAndMinutes } from '../utils/strToHoursAndMinutes';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\n\nconst HALF_HOUR_LABEL_WIDTH = '80px';\n\nconst Container = styled.div`\n    height: 100vh;\n    overflow: auto;\n    position: relative;\n    user-select: none;\n`;\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${HALF_HOUR_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n    \n        &:before {\n            background-color: ${transparentize(\n                isFaded ? 0.8 : 0.5,\n                COLORS[theme.name].BORDER_NEUTRAL\n            )};\n            content: '';\n            height: 1px;\n            left: ${HALF_HOUR_LABEL_WIDTH};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ offsetMinutes }) => `\n        position: absolute;\n        left: calc(${GRID_UNIT} * 3);\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 2;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 500);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container ref={timelineContainerRef} {...otherProps}>\n            {tasks.map(task => {\n                const [hours, mins] = strToHoursAndMinutes(task.scheduled_time);\n                const offsetMinutes =\n                    hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                return (\n                    <ScheduledTaskCard\n                        key={task.id}\n                        appActions={appActions}\n                        isActive={selectedTaskId === task.id}\n                        offsetMinutes={offsetMinutes}\n                        task={task}\n                    />\n                );\n            })}\n            <CurrentTimeMarker\n                ref={currentTimeMarkerRef}\n                offsetMinutes={\n                    currentHour * 60 +\n                    currentMinute -\n                    (fromHour * 60 + fromMinutes)\n                }\n            />\n            <TimelineDropZone\n                appActions={appActions}\n                totalMinutes={totalMinutes}\n            />\n            {range(totalHours).map(hour => (\n                <Fragment key={hour}>\n                    <HalfHourRow>\n                        <HalfHourLabel hideLabel={hour === 0}>\n                            {(fromHour + hour) % 12 || 12}:00\n                        </HalfHourLabel>\n                    </HalfHourRow>\n                    <HalfHourRow>\n                        <HalfHourLabel isFaded>\n                            {(fromHour + hour) % 12 || 12}:30\n                        </HalfHourLabel>\n                    </HalfHourRow>\n                </Fragment>\n            ))}\n        </Container>\n    );\n};\n\nexport default Timeline;\n","import React from 'react';\nimport styled from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport Box from './atoms/Box';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport TaskCard from './TaskCard';\nimport { COLORS, GRID_UNIT } from '../tokens';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    justify: 'flex-start',\n    padding: 1,\n    spacing: 1,\n})(\n    ({ isTargetedForDrop, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].BORDER_HOVER} inset`\n                : 'initial'\n        };\n        flex-grow: 1;\n    `\n);\n\nconst CreateFirstTaskTip = styled(Box)`\n    position: absolute;\n    right: calc(100% + ${GRID_UNIT} * 2);\n    top: 50%;\n    transform: translateY(-50%);\n    white-space: nowrap;\n`;\n\nconst WaitingArea = ({\n    appActions,\n    selectedTaskId,\n    tasks,\n    onClickTask,\n    ...otherProps\n}) => {\n    const { onSelectTask, onUpdateTask, onUpdateTasks } = appActions;\n    const [dropProps] = useDrop('task-id', taskId =>\n        onUpdateTask(taskId, {\n            scheduled: false,\n        })\n    );\n\n    const handleClickNewTask = () => {\n        const newTaskId = Date.now();\n        const now = new Date();\n        const currentHour = now.getHours();\n        const currentMinute = now.getMinutes();\n\n        onUpdateTasks({\n            [newTaskId]: {\n                icon: '📌',\n                id: newTaskId,\n                isComplete: false,\n                label: 'New Task',\n                notes: '',\n                scheduled: false,\n                scheduled_minutes: 30,\n                scheduled_time: `${currentHour}:${currentMinute}`,\n            },\n        });\n        onSelectTask(newTaskId);\n    };\n\n    return (\n        <Container {...dropProps} {...otherProps}>\n            <div style={{ position: 'relative', width: '100%' }}>\n                {tasks.length === 0 && (\n                    <CreateFirstTaskTip>\n                        Create your first task{' '}\n                        <span role=\"img\" aria-label=\"right-pointing hand\">\n                            👉\n                        </span>\n                    </CreateFirstTaskTip>\n                )}\n                <GhostButton\n                    style={{\n                        height: minutesToHeight(30),\n                    }}\n                    onClick={handleClickNewTask}\n                >\n                    New Task\n                </GhostButton>\n            </div>\n            {tasks.map(task => (\n                <TaskCard\n                    key={task.id}\n                    appActions={appActions}\n                    isActive={selectedTaskId === task.id}\n                    task={task}\n                />\n            ))}\n        </Container>\n    );\n};\n\nexport default WaitingArea;\n","import { useEffect, useState } from 'react';\n\nconst usePersistentState = (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(JSON.parse(savedState) || initialState);\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n\nexport default usePersistentState;\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport styled, { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport values from 'lodash/values';\nimport FlexBox from './components/atoms/FlexBox';\nimport CompletedTasksDropZone from './components/CompletedTasksDropZone';\nimport OptionBar from './components/OptionBar';\nimport TaskDetails from './components/TaskDetails';\nimport Timeline from './components/Timeline';\nimport WaitingArea from './components/WaitingArea';\nimport usePersistentState from './hooks/usePersistentState';\nimport {\n    BULLET_SIZE,\n    COLORS,\n    GRID_UNIT,\n    INITIAL_TASKS,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './tokens';\n\nconst GlobalStyle = createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            line-height: 1.25em;\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                margin-top: calc(${GRID_UNIT} / 4);\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n\nconst Container = styled.div`\n    display: flex;\n`;\n\n/*\n    tasks: {\n        1: {\n            id: 1,\n            icon: '🧺',\n            isComplete: false,\n            label: 'Take out the laundry',\n            notes:\n                'This is a note. **This is bold, I think?**\\n\\nWith two lines!\\n\\n- And a list\\n\\n- Of things\\n\\n- Like this!\\n\\n> Look, a blockquote! Oooh',\n            scheduled: false,\n            scheduled_minutes: 30,\n            scheduled_time: '14:00',\n        },\n    },\n*/\n\nfunction App() {\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [theme, setTheme] = usePersistentState('theme', { name: 'DARK' });\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        null\n    );\n    const [isDragging, setIsDragging] = useState(false);\n    const activeTask = tasks[selectedTaskId];\n    const tasksArray = values(tasks).filter(task => !task.isComplete);\n    const hasTasks = tasksArray.length;\n    const scheduledTasks = tasksArray.filter(task => task.scheduled);\n    const unScheduledTasks = tasksArray.filter(task => !task.scheduled);\n\n    const handleDragOver = () => setIsDragging(true);\n\n    const handleDragEnd = () => setIsDragging(false);\n\n    useEffect(() => {\n        handleDragEnd();\n    }, [tasks]);\n\n    const onChangeTheme = newTheme => {\n        console.log('Setting theme:', newTheme);\n        setTheme({ name: newTheme });\n    };\n\n    const onUpdateTask = (taskId = Date.now(), updates) => {\n        setTasks(prevState => ({\n            ...prevState,\n            [taskId]: {\n                ...prevState[taskId],\n                ...updates,\n            },\n        }));\n    };\n\n    const onUpdateTasks = updates => {\n        setTasks(prevState => ({\n            ...prevState,\n            ...updates,\n        }));\n    };\n\n    const appActions = {\n        onChangeTheme,\n        onSelectTask: setSelectedTaskId,\n        onUpdateTask,\n        onUpdateTasks,\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyle />\n            <CompletedTasksDropZone\n                appActions={appActions}\n                isDragging={isDragging}\n            />\n            <Container onDragOver={handleDragOver} onDragEnd={handleDragEnd}>\n                <Timeline\n                    appActions={appActions}\n                    selectedTaskId={selectedTaskId}\n                    from={TIMELINE_FROM}\n                    style={{\n                        opacity: hasTasks ? 1 : 0.25,\n                        width: '30vw',\n                        pointerEvents: hasTasks ? 'all' : 'none',\n                    }}\n                    tasks={scheduledTasks}\n                    to={TIMELINE_TO}\n                />\n                <TaskDetails\n                    appActions={appActions}\n                    task={activeTask}\n                    style={{\n                        width: '40vw',\n                        height: '100vh',\n                        opacity: hasTasks ? 1 : 0.25,\n                        overflow: 'auto',\n                    }}\n                />\n                <FlexBox\n                    direction=\"column\"\n                    style={{\n                        width: '30vw',\n                    }}\n                >\n                    <OptionBar\n                        options={['DARK', 'LIGHT']}\n                        renderOption={option => option.toLowerCase()}\n                        renderSelectedOption={option => `${option} mode`}\n                        selectedOption={theme.name}\n                        onChange={onChangeTheme}\n                    />\n                    <WaitingArea\n                        appActions={appActions}\n                        selectedTaskId={selectedTaskId}\n                        tasks={unScheduledTasks}\n                    />\n                </FlexBox>\n            </Container>\n        </ThemeProvider>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}