{"version":3,"sources":["components/atoms/Icon.js","components/atoms/tokens.js","components/atoms/copy/motivational-descriptors.js","utils/preventWidows.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","utils/toInt.js","components/atoms/Button.js","components/atoms/GlobalStyles.js","components/atoms/Transition.js","hooks/useDrag.js","hooks/useDrop.js","hooks/useKeyboardShortcuts.js","components/ColorPicker.js","components/EditInPlace.js","components/ListCard.js","components/ListManager.js","components/TaskListToggleButton.js","components/ToolBar.js","components/Sidebar.js","components/OptionBar.js","components/TaskDetails.js","utils/minutesToHeight.js","components/TaskCard.js","components/TaskList.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/Trash.js","components/TrashedCard.js","components/TrashedLists.js","components/TrashedTasks.js","hooks/usePersistentState.js","index.js"],"names":["STYLE_PREFIX_MAP","solid","regular","light","duotone","brands","Icon","_ref","iconName","_ref$styleName","styleName","otherProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","SIDEBAR_DEFAULT_WIDTH","SIDEBAR_EXTENDED_WIDTH","DURATION_OPTIONS","GRID_UNIT","FONTS","NORMAL","LINE_HEIGHT","SIZE","LARGE","LIST_CARD_HEIGHT","LIST_CARD_SPACING","LIST_CARD_WIDTH","MIN_SLOT_HEIGHT","ROUTE_TRANSITION_ANIMATION_DURATION","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","BASICALLY","CREATE_NEW_TASK","DELETE_TASK","MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE","MOVE_BETWEEN_LISTS","SETTING_DURATION","TOGGLE_TASK_LIST","TOGGLE_DARK_MODE","TOGGLE_LIST_MANAGER","INITIAL_LISTS","id","color_code","isArchived","label","INITIAL_SELECTED_LIST_ID","INITIAL_TASKS","keys","TIPS","map","tipId","icon","list_id","isComplete","notes","scheduled","scheduled_minutes","scheduled_time","INITIAL_SELECTED_TASK_ID","PRIMARY_COLORS","primaryColor","highContrastTextColor","buildPalette","theme","arguments","length","undefined","colorCode","THEME","colorObj","find","PRIMARY","HIGH_CONTRAST_BACKGROUND","HIGH_CONTRAST_TEXT","TASK_BORDER","transparentize","TASK_BORDER_HOVER","TASK_BORDER_ACTIVE","PRIMARY_FADED","darken","BACKGROUND","SHADED","setLightness","SHADOW","TEXT","TEXT_FADED","BORDER","BORDER_FADED","lighten","ICON_PACKS","EMOJI","COLOR_PICKER","DARK_MODE","END_ZONE","LEFT","LIGHT_MODE","LIST_MANAGER","RIGHT","TASK_DETAILS","TIP","FONT_AWESOME","forEach","key","ICON_NAME","atoms_Icon","ICONS","TASK_DEFAULT","buildStyles","propName","propValue","edges","edge","join","Container","styled","div","_ref$border","border","_ref$margin","margin","_ref$marginBottom","marginBottom","_ref$marginLeft","marginLeft","_ref$marginRight","marginRight","_ref$marginTop","marginTop","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingBottom","paddingBottom","_ref$paddingLeft","paddingLeft","_ref$paddingRight","paddingRight","_ref$paddingTop","paddingTop","_ref$paddingX","paddingX","_ref$paddingY","paddingY","_ref$isFlexible","isFlexible","_ref$isRounded","isRounded","_ref$isScrollable","isScrollable","_ref$onClick","onClick","Box","forwardRef","_ref2","ref","str","children","_ref2$preventWidows","preventWidows","trim","replace","String","fromCharCode","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","_ref$wrapped","wrapped","FlexBox","attrs","isDisabled","ContentContainer","_templateObject","ColumnHeader","AppColumn","_ref3","_ref3$disabledIf","disabledIf","some","condition","AppColumn_Container","PrimaryAppColumn","_ref4","SecondaryAppColumn","_ref5","isTargetedForDrop","toInt","parseInt","Button","forwardedAs","_ref$isInverted","isInverted","StyledGhostButton","animation","keyframes","Button_templateObject","TracerSVGElement","svg","_templateObject2","Tracer","rect","isAnimated","isResizing","css","_templateObject3","AnimatedTracer","targetElementRef","_useState","useState","_useState2","slicedToArray","setIsResizing","_useState3","width","height","_useState4","viewBoxDimensions","setViewBoxDimensions","useEffect","timer","setInterval","current","_targetElementRef$cur","offsetWidth","offsetHeight","clearInterval","setTimeout","clearTimeout","preserveAspectRatio","viewBox","xmlns","rx","x","y","GhostButton","_useState5","_useState6","setIsAnimated","buttonElementRef","useRef","onMouseEnter","bind","onMouseLeave","Button_AnimatedTracer","ToggleButton","_ref6","_templateObject4","createGlobalStyle","Transition","isTransitioning","useDrag","dataTypes","isDragging","setIsDragging","draggable","onDragEnd","onDragStart","evt","dataType","dataTransfer","setData","useDrop","dataTypeHandlers","setIsTargetedForDrop","targetedElement","droppable","onDragEnter","preventDefault","target","onDragOver","onDragLeave","onDrop","data","getData","payload","isNaN","parseFloat","dataTypeHandler","INPUT_TAG_NAMES","isInput","node","tagName","toLowerCase","includes","useKeyboardShortcuts","keyMap","onKeyDown","scopedToElementRef","keysDown","ctrlKey","push","shiftKey","metaKey","currentKeySequence","uniq","keyDown","sort","mapKeys","handler","sequence","shortcutKeySequence","split","scopedToElement","scopedElement","scopedToAnInput","firedOnAnInput","stopPropagation","buildKeyboardShortcutHandler","document","addEventListener","removeEventListener","ColorPicker_templateObject","StyledWindowShader","ColorPicker_templateObject2","WindowShader","ReactDOM","createPortal","body","StyledColorPaletteContainer","ColorPaletteContainer","ColorChip","ColorPicker_templateObject3","palette","onPickColor","isPickingColor","setIsPickingColor","ColorPicker_Container","Fragment","ColorPicker_ColorPaletteContainer","style","backgroundColor","ColorPicker_WindowShader","ColorPicker_templateObject4","isEditable","isEditing","_ref$tracingElementSt","tracingElementStyles","StyledTextarea","textarea","EditInPlace_templateObject","Canvas","isEmpty","memo","_ref3$canvasStyles","canvasStyles","_ref3$doubleClickToEd","doubleClickToEdit","_ref3$isEditable","_ref3$isMultiLine","isMultiLine","_ref3$isRemotelyActiv","isRemotelyActivated","_ref3$placeholder","placeholder","_ref3$render","render","value","_ref3$tracingElementS","_ref3$value","_ref3$onSave","onSave","setIsEditing","bufferedValue","setBufferedValue","measuringElementHeight","setMeasuringElementHeight","containerElementRef","inputRef","measuringElementRef","isSingleLine","select","focus","el","handleClick","useCallback","useMemo","saveAndClose","close","cmd + escape","shift + escape","cmd + enter","shift + enter","escape","enter","EditInPlace_Container","tabIndex","onDoubleClick","objectSpread2","position","pointerEvents","opacity","whiteSpace","disabled","rows","onBlur","onChange","isActive","GhostListCard","ListCard_templateObject","ListCardContainer","ListCard","appActions","appData","listId","onUpdateList","onUpdateTask","isCreatingList","lists","selectedListId","tasks","list","listPalette","tasksInList","filter","task","listCardElementRef","_useDrag","list-id","dragProps","_useDrop","task-id","taskId","targetListId","currentTarget","dataset","dropProps","triggerClick","click","space","styled_components_browser_esm","ListCard_Container","data-list-id","title","components_EditInPlace","alignSelf","flexGrow","flexShrink","newLabel","fontSize","components_ColorPicker","ListManager","onCreateList","onSelectList","unarchivedLists","sortedLists","sortBy","CREATE_LIST_LABEL","components_ListCard","TaskListToggleButton","isSidebarOpen","onChangeIsSidebarOpen","ToolBar","Sidebar","onChangeTheme","isShowingTrashContents","isTaskListForcedOpen","setIsTaskListForcedOpen","selectedList","sidebarDropProps","LABEL_FOR_TRASHED_TASKS","components_ToolBar","components_TaskListToggleButton","OptionButton","isSelected","OptionBar","options","_ref2$renderOption","renderOption","option","_ref2$renderSelectedO","renderSelectedOption","selectedOption","optionIndex","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","role","TaskDetails_templateObject2","DurationOptionBar","TaskDetails","_ref3$appActions","_ref3$appData","isCreatingTask","selectedTaskId","activeTask","handleUpdateTask","field","[object Object]","handleSaveDuration","newDuration","handleSaveIcon","newNotes","handleSaveLabel","handleSaveNotes","EMPTY_LABEL","EMPTY_NOTES","rawNotes","dangerouslySetInnerHTML","__html","marked","bottom","left","overflow","right","top","minutesToHeight","minutes","duration","CardLabel","isMouseOver","Math","min","CardIcon","TaskCardContainer","TaskCard_templateObject","setIsMouseOver","onImmediatelySelectTask","onTransitionToTask","isShowingListManager","listcolorCode","cardPalette","toggleIsMouseOver","TaskCard_Container","data-task-id","onChangeTaskPosition","onCreateTask","incompleteTasks","unscheduledTasks","droppedOnTaskId","droppedOnTaskIndex","findIndex","taskCardDropProps","Button_GhostButton","CREATE_TASK_LABEL","components_TaskCard","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","floor","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","LABEL_FOR_TIMELINE","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","from","to","onClickTask","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isDraggingTask","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","DROP_ZONE_SIZE","pulsingAnimation","Trash_templateObject","AnimatedContainer","Trash_templateObject2","TrashDropZone","TrashIconContainer","Trash","onChangeIsShowingTrashContents","onDeleteTask","firstUnarchivedList","TrashedCard_templateObject2","random","minOpacity","translationDistance","TrashedCard_templateObject","RestoreButton","TrashedCard","restoreButtonTitle","onRestore","TrashedCard_Container","deletedLists","hasDeletedLists","handleRestoreList","EMPTY_TRASHED_LISTS","components_TrashedCard","LABEL_FOR_RESTORING_LIST","deletedTasks","hasDeletedTasks","handleRestoreTask","EMPTY_TRASHED_TASKS","LABEL_FOR_RESTORING_TASK","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","isShowingSidebar","setIsShowingSidebar","_usePersistentState3","_usePersistentState4","setLists","_usePersistentState5","_usePersistentState6","setSelectedListId","_usePersistentState7","_usePersistentState8","setIsShowingListManager","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","setSelectedTaskId","_usePersistentState13","_usePersistentState14","themeName","setThemeName","setIsCreatingList","setIsCreatingTask","setIsDraggingTask","_useState7","_useState8","setIsShowingTrashContents","_useState9","_useState10","setIsTransitioning","currentListIndex","selectedTask","listContainingSelectedTask","primarycolorCode","handleDragOver","handleDragEnd","overrides","newListId","randomcolorCode","currentLists","sample","MOTIVATIONAL_DESCRIPTORS","NEW_LIST_LABEL","updates","prevLists","firstTaskIdInList","prevTasks","newTaskId","currentTasks","NEW_TASK_LABEL","NEW_TASK_NOTES","onSelectTask","transition","callback","onChangeIsShowingListManager","newIsShowingListManager","firstUnarchivedTask","newIndex","tasksMinusTarget","slice","moveTaskToTimeline","moveTaskToTaskList","selectNextList","nextListIndex","nextIndex","selectPreviousList","prevListIndex","prevIndex","setTaskDuration","toggleTaskListVisibility","toggleDarkMode","toggleIsEditingCurrentTask","toggleIsShowingListManager","createNewTask","deleteCurrentTask","goBack","reduce","acc","index","cmd + arrowRight","cmd + arrowLeft","cmd + shift + arrowRight","cmd + shift + arrowLeft","cmd + shift + ]","cmd + shift + [","b","d","e","l","n","t","columnWidths","sidebar","listManager","taskDetails","timeline","disableVendorPrefixes","GlobalStyles","components_Trash","components_Sidebar","components_TrashedTasks","components_TaskList","LABEL_FOR_TRASHED_LISTS","LABEL_FOR_LIST_MANAGER","LABEL_FOR_TASK_DETAILS","atoms_Transition","components_TrashedLists","components_ListManager","components_TaskDetails","components_Timeline","rootElement","getElementById"],"mappings":"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","file":"static/js/main.f07475b6.chunk.js","sourcesContent":["import React from 'react';\n\nconst STYLE_PREFIX_MAP = {\n    solid: 'fas',\n    regular: 'far',\n    light: 'fal',\n    duotone: 'fad',\n    brands: 'fab',\n};\n\nconst Icon = ({ iconName, styleName = 'regular', ...otherProps }) => (\n    <i\n        className={`${STYLE_PREFIX_MAP[styleName]} fa-${iconName}`}\n        {...otherProps}\n    />\n);\n\nexport default Icon;\n","import { darken, lighten, setLightness, transparentize } from 'polished';\nimport React from 'react';\nimport MOTIVATIONAL_DESCRIPTORS from './copy/motivational-descriptors';\nimport Icon from './Icon';\n\nexport const SIDEBAR_DEFAULT_WIDTH = '30vw';\nexport const SIDEBAR_EXTENDED_WIDTH = '40vw';\nexport const BORDER_RADIUS = '3px';\nexport const BORDER_WIDTH = '1px';\nexport const BULLET_SIZE = '10px';\nexport const COLOR_PICKER_HEIGHT = '150px';\nexport const COLOR_PICKER_WIDTH = '200px';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '25px';\nexport const FONTS = {\n    NORMAL: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.5)` },\n    LARGE: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.75)` },\n};\nexport const HOURS_PER_SCREEN = 10;\nexport const LIST_CARD_HEIGHT = `calc(${GRID_UNIT} * 8)`;\nexport const LIST_CARD_SPACING = `calc(${GRID_UNIT} * 0.5)`;\nexport const LIST_CARD_WIDTH = `calc((100% - (${LIST_CARD_SPACING} * 2)) / 3)`;\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const ROUTE_TRANSITION_ANIMATION_DURATION = 250;\nexport const TIMELINE_FROM = '6:00';\nexport const TIMELINE_TO = '30:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.MOTIVATIONAL_DESCRIPTORS = MOTIVATIONAL_DESCRIPTORS;\nCOPY.EMPTY_LABEL = '...label?';\nCOPY.EMPTY_NOTES = '...notes?';\nCOPY.EMPTY_TRASHED_LISTS = 'No Trashed Lists';\nCOPY.EMPTY_TRASHED_TASKS = 'No Trashed Tasks';\nCOPY.LABEL_FOR_LIST_MANAGER = 'Switch Lists';\nCOPY.LABEL_FOR_RESTORING_LIST = 'Restore this List';\nCOPY.LABEL_FOR_RESTORING_TASK = 'Restore this Task';\nCOPY.LABEL_FOR_TASK_DETAILS = 'Back to Task';\nCOPY.LABEL_FOR_TIMELINE = \"Today's Schedule\";\nCOPY.LABEL_FOR_TRASHED_LISTS = 'Trashed Lists';\nCOPY.LABEL_FOR_TRASHED_TASKS = 'Trashed Tasks';\nCOPY.CREATE_LIST_LABEL = 'Create List';\nCOPY.CREATE_TASK_LABEL = 'Create Task';\nCOPY.NEW_LIST_LABEL = 'New List';\nCOPY.NEW_TASK_LABEL = `New Task`;\nCOPY.NEW_TASK_NOTES = '';\nCOPY.TIPS = {\n    BASICALLY:\n        'Make lists of tasks. Every day, schedule your most important ones',\n    CREATE_NEW_TASK: 'Press [N] to create a [N]ew task in the current list',\n    DELETE_TASK: 'Press [T] to move the selected task to the [T]rash',\n    MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE:\n        'Press [⌘]+[LEFT or RIGHT] to move the selected task to the TaskList or Timeline, respectively',\n    MOVE_BETWEEN_LISTS:\n        'Press [⌘]+[SHIFT]+[LEFT or RIGHT] to move between your lists',\n    SETTING_DURATION:\n        'Press keys [1] to [6] to quickly adjust your time estimate for the selected task',\n    TOGGLE_TASK_LIST:\n        'Press [B] to show / hide the side[B]ar of unscheduled tasks',\n    TOGGLE_DARK_MODE: 'Press [D] to toggle [D]ark Mode',\n    TOGGLE_LIST_MANAGER: 'Press [L] to see your [L]ists',\n};\n\nexport { COPY };\n\nexport const INITIAL_LISTS = [\n    {\n        id: 1,\n        color_code: 0,\n        isArchived: false,\n        label: 'User Manual',\n    },\n];\nexport const INITIAL_SELECTED_LIST_ID = (INITIAL_LISTS[0] || {}).id;\n\nexport const INITIAL_TASKS = Object.keys(COPY.TIPS).map(tipId => {\n    const label = COPY.TIPS[tipId];\n\n    return {\n        icon: '☝️',\n        id: tipId,\n        list_id: INITIAL_SELECTED_LIST_ID,\n        label: label,\n        isComplete: false,\n        notes: '',\n        scheduled: false,\n        scheduled_minutes: 30,\n        scheduled_time: '9:00',\n    };\n});\n\nexport const INITIAL_SELECTED_TASK_ID = (INITIAL_TASKS[0] || {}).id;\n\nexport const PRIMARY_COLORS = [\n    {\n        primaryColor: '#FFB83D',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#E5FF3D',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#84FF3D',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#3DFF57',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#3DFFB8',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#3DE5FF',\n        highContrastTextColor: '#000000',\n    },\n    {\n        primaryColor: '#3D84FF',\n        highContrastTextColor: '#ffffff',\n    },\n    {\n        primaryColor: '#573DFF',\n        highContrastTextColor: '#ffffff',\n    },\n    {\n        primaryColor: '#B83DFF',\n        highContrastTextColor: '#ffffff',\n    },\n    {\n        primaryColor: '#FF3DE5',\n        highContrastTextColor: '#ffffff',\n    },\n    {\n        primaryColor: '#FF3D84',\n        highContrastTextColor: '#ffffff',\n    },\n    {\n        primaryColor: '#FF573D',\n        highContrastTextColor: '#ffffff',\n    },\n];\n\nexport const buildPalette = (theme = 'LIGHT', colorCode = '#0000FF') => {\n    const THEME = {};\n\n    const colorObj =\n        PRIMARY_COLORS.find(colorObj => colorObj.primaryColor === colorCode) ||\n        PRIMARY_COLORS[0];\n\n    const { primaryColor, highContrastTextColor } = colorObj;\n\n    THEME.PRIMARY = primaryColor;\n    THEME.HIGH_CONTRAST_BACKGROUND = THEME.PRIMARY;\n    THEME.HIGH_CONTRAST_TEXT = highContrastTextColor;\n    THEME.TASK_BORDER = transparentize(0.5, THEME.PRIMARY);\n    THEME.TASK_BORDER_HOVER = transparentize(0.5, THEME.PRIMARY);\n    THEME.TASK_BORDER_ACTIVE = THEME.PRIMARY;\n\n    if (theme === 'DARK') {\n        THEME.PRIMARY_FADED = darken(0.2, THEME.PRIMARY);\n        THEME.BACKGROUND = '#000000';\n        THEME.SHADED = setLightness(0.1, THEME.PRIMARY);\n        THEME.SHADOW = transparentize(0.95, THEME.BACKGROUND);\n        THEME.TEXT = setLightness(0.95, THEME.PRIMARY);\n        THEME.TEXT_FADED = setLightness(0.75, THEME.PRIMARY);\n        THEME.BORDER = setLightness(0.15, THEME.PRIMARY);\n        THEME.BORDER_FADED = THEME.TEXT_FADED;\n    }\n\n    if (theme === 'LIGHT') {\n        THEME.PRIMARY_FADED = lighten(0.2, THEME.PRIMARY);\n        THEME.BACKGROUND = '#FFFFFF';\n        THEME.SHADED = setLightness(0.95, THEME.PRIMARY);\n        THEME.SHADOW = transparentize(0.8, setLightness(0.25, THEME.PRIMARY));\n        THEME.TEXT = setLightness(0.05, THEME.PRIMARY);\n        THEME.TEXT_FADED = setLightness(0.75, THEME.PRIMARY);\n        THEME.BORDER = transparentize(0.75, THEME.TEXT);\n        THEME.BORDER_FADED = transparentize(0.25, THEME.TEXT_FADED);\n    }\n\n    return THEME;\n};\n\nconst ICON_PACKS = {\n    EMOJI: {\n        COLOR_PICKER: '🎨',\n        DARK_MODE: '🌚',\n        END_ZONE: '🗑',\n        LEFT: '👈',\n        LIGHT_MODE: '🌞',\n        LIST_MANAGER: '📚',\n        RIGHT: '👉',\n        TASK_DETAILS: '📌',\n        TIP: '☝️',\n    },\n    FONT_AWESOME: {\n        COLOR_PICKER: 'palette',\n        DARK_MODE: 'moon-stars',\n        END_ZONE: 'trash-alt',\n        LEFT: 'long-arrow-left',\n        LIGHT_MODE: 'sun',\n        LIST_MANAGER: 'book',\n        RIGHT: 'long-arrow-right',\n        TASK_DETAILS: 'thumbtack',\n        TIP: 'gem',\n    },\n};\n\nObject.keys(ICON_PACKS.FONT_AWESOME).forEach(key => {\n    const ICON_NAME = ICON_PACKS.FONT_AWESOME[key];\n    ICON_PACKS.FONT_AWESOME[key] = (\n        <Icon iconName={ICON_NAME} styleName=\"solid\" />\n    );\n});\n\nconst ICONS = ICON_PACKS.FONT_AWESOME;\n\nICONS.TASK_DEFAULT = '📌';\n\nexport { ICONS };\n","export default [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\n","export default str => {\n    return typeof str === 'string'\n        ? str.trim().replace(/\\s([^ ]*)$/m, `${String.fromCharCode(160)}$1`)\n        : str;\n};\n","import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { BORDER_RADIUS, GRID_UNIT } from './tokens';\nimport preventWidowsFunction from '../../utils/preventWidows';\n\nconst buildStyles = (propName = '', propValue = null, edges = []) => {\n    if (propValue !== null) {\n        return edges\n            .map(\n                edge =>\n                    `${propName}-${edge}: calc(${propValue} * ${GRID_UNIT});`\n            )\n            .join('');\n    }\n\n    return '';\n};\n\nconst Container = styled.div(\n    ({\n        border = false,\n        margin = null,\n        marginBottom = null,\n        marginLeft = null,\n        marginRight = null,\n        marginTop = null,\n        marginX = null,\n        marginY = null,\n        padding = null,\n        paddingBottom = null,\n        paddingLeft = null,\n        paddingRight = null,\n        paddingTop = null,\n        paddingX = null,\n        paddingY = null,\n        theme,\n        isFlexible = false,\n        isRounded = false,\n        isScrollable = false,\n        onClick = null,\n    }) => `\n        align-self: stretch;\n        border-radius: ${isRounded ? BORDER_RADIUS : ''};\n        box-shadow: ${border ? `0 0 0 1px ${theme.BORDER}` : 'none'};\n        cursor: ${onClick ? 'pointer' : ''};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        overflow: ${isScrollable ? 'auto' : ''};\n        \n        ${[\n            buildStyles('margin', margin, ['top', 'right', 'bottom', 'left']),\n            buildStyles('margin', marginBottom, ['bottom']),\n            buildStyles('margin', marginLeft, ['left']),\n            buildStyles('margin', marginRight, ['right']),\n            buildStyles('margin', marginTop, ['top']),\n            buildStyles('margin', marginX, ['right', 'left']),\n            buildStyles('margin', marginY, ['top', 'bottom']),\n            buildStyles('padding', padding, ['top', 'right', 'bottom', 'left']),\n            buildStyles('padding', paddingBottom, ['bottom']),\n            buildStyles('padding', paddingLeft, ['left']),\n            buildStyles('padding', paddingRight, ['right']),\n            buildStyles('padding', paddingTop, ['top']),\n            buildStyles('padding', paddingX, ['right', 'left']),\n            buildStyles('padding', paddingY, ['top', 'bottom']),\n        ].join('')}\n    `\n);\n\nconst Box = forwardRef(\n    ({ children, preventWidows = false, ...otherProps }, ref) => (\n        <Container ref={ref} {...otherProps}>\n            {preventWidows ? preventWidowsFunction(children) : children}\n        </Container>\n    )\n);\n\nexport default Box;\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        justify = 'stretch',\n        spacing = 0,\n        wrapped = false,\n    }) => `\n        align-items: ${align};\n        align-content: ${wrapped ? align : ''};\n        display: flex;\n        flex-direction: ${direction};\n        flex-wrap: ${wrapped ? 'wrap' : 'nowrap'};\n        justify-content: ${justify};\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { BORDER_WIDTH, GRID_UNIT, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isDisabled, theme }) => `\n        position: relative;\n        \n        &:before {\n            background-color: ${theme.BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isDisabled ? 0.25 : 0};\n            pointer-events: ${isDisabled ? 'all' : 'none'};\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 200;\n        }\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})`\n    height: calc(100vh - ${GRID_UNIT});\n    overflow: auto;\n    position: relative;\n    ${UNIFIED_TRANSITION};\n\n    & > * {\n        align-self: stretch;\n    }\n`;\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${theme.BACKGROUND};\n        color: ${theme.TEXT_FADED};\n        border-bottom:\n            ${BORDER_WIDTH} solid ${theme.BORDER};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({\n    children,\n    disabledIf = [false],\n    label,\n    ...otherProps\n}) => {\n    const isDisabled =\n        disabledIf.length && disabledIf.some(condition => condition === true);\n\n    return (\n        <Container isDisabled={isDisabled}>\n            <ColumnHeader>{label}</ColumnHeader>\n            <ContentContainer {...otherProps}>{children}</ContentContainer>\n        </Container>\n    );\n};\n\nexport const PrimaryAppColumn = styled(AppColumn)(\n    ({ theme }) => `\n        box-shadow: 0 0 10px 10px ${theme.SHADOW};\n        border-left: ${BORDER_WIDTH} solid ${theme.BORDER};\n        border-right: \n            ${BORDER_WIDTH} solid ${theme.BORDER};\n        overflow: unset;\n        z-index: 11;\n    `\n);\n\nexport const SecondaryAppColumn = styled(AppColumn)(\n    ({ isTargetedForDrop, theme }) => `\n        background-color: ${theme.SHADED};\n        flex-grow: 1;\n        overflow: auto;\n        position: relative;\n        \n        &:before {\n            box-shadow: ${\n                isTargetedForDrop\n                    ? `0 0 0 5px ${theme.TASK_BORDER_HOVER} inset`\n                    : 'initial'\n            };\n            bottom: 0;\n            content: '';\n            left: 0;\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 1000;\n        }\n    `\n);\n\nexport default AppColumn;\n","export default str => parseInt(str, 10);\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport toInt from '../../utils/toInt';\nimport FlexBox from './FlexBox';\nimport { BORDER_RADIUS, BORDER_WIDTH, UNIFIED_TRANSITION } from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    forwardedAs: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ isInverted = false, theme }) => `\n        align-self: unset;\n        background-color: ${theme[isInverted ? 'BACKGROUND' : 'PRIMARY']};\n        border: 2px solid transparent;\n        border-radius: ${BORDER_RADIUS};\n        color: ${theme[isInverted ? 'PRIMARY' : 'BACKGROUND']};\n        cursor: pointer;\n        transform: translateY(0);\n        ${UNIFIED_TRANSITION};\n        transition-property: border, color;\n        \n        &:focus,\n        &:hover {\n            border-color: ${theme[isInverted ? 'PRIMARY' : 'BACKGROUND']};\n        }\n        &:active {\n            transform: translateY(2px);\n        }\n    `\n);\n\nconst StyledGhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        color: ${theme.TEXT_FADED};\n        position: relative;\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            color: ${theme.TEXT};\n            border-color: transparent;\n        }\n    `\n);\n\nconst animation = keyframes`\n    from {\n        stroke-dashoffset: 0;\n    }\n    to {\n        stroke-dashoffset: 12px;\n    }\n`;\n\nconst TracerSVGElement = styled.svg`\n    overflow: visible;\n    position: absolute;\n`;\n\nconst Tracer = styled.rect(\n    ({ isAnimated, isResizing, theme }) => css`\n        animation-name: ${animation};\n        animation-duration: 0.5s;\n        animation-direction: normal;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-play-state: ${isAnimated ? 'running' : 'paused'};\n        fill: none;\n        stroke: ${isResizing\n            ? 'transparent'\n            : theme[isAnimated ? 'PRIMARY' : 'TEXT_FADED']};\n        stroke-width: calc(${BORDER_WIDTH} * 2);\n        stroke-dasharray: 6px, 6px;\n        position: relative;\n        z-index: 1000;\n    `\n);\n\nconst AnimatedTracer = ({ isAnimated, targetElementRef, ...otherProps }) => {\n    const [isResizing, setIsResizing] = useState(true);\n    const [viewBoxDimensions, setViewBoxDimensions] = useState({\n        width: 0,\n        height: 0,\n    });\n\n    useEffect(() => {\n        const measureTracer = () => {\n            if (targetElementRef.current) {\n                const { offsetWidth, offsetHeight } = targetElementRef.current;\n                const { width, height } = viewBoxDimensions;\n\n                if (offsetWidth !== width || offsetHeight !== height) {\n                    setViewBoxDimensions({\n                        width: offsetWidth,\n                        height: offsetHeight,\n                    });\n                }\n            }\n        };\n\n        const timer = setInterval(measureTracer, 100);\n\n        return () => clearInterval(timer);\n    }, [targetElementRef, viewBoxDimensions]);\n\n    useEffect(() => {\n        setIsResizing(true);\n\n        const onComplete = () => setIsResizing(false);\n\n        const timer = setTimeout(onComplete, 100);\n\n        return () => clearTimeout(timer);\n    }, [viewBoxDimensions]);\n\n    return (\n        <TracerSVGElement\n            preserveAspectRatio=\"none\"\n            viewBox={`0 0 ${viewBoxDimensions.width} ${viewBoxDimensions.height}`}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            {...otherProps}\n        >\n            <Tracer\n                width={viewBoxDimensions.width}\n                height={viewBoxDimensions.height}\n                isAnimated={isAnimated}\n                isResizing={isResizing}\n                rx={toInt(BORDER_RADIUS) * 2}\n                x={0}\n                y={0}\n            />\n        </TracerSVGElement>\n    );\n};\n\nexport const GhostButton = ({ children, ...otherProps }) => {\n    const [isAnimated, setIsAnimated] = useState(false);\n\n    const buttonElementRef = useRef(null);\n\n    return (\n        <StyledGhostButton\n            ref={buttonElementRef}\n            onMouseEnter={setIsAnimated.bind(null, true)}\n            onMouseLeave={setIsAnimated.bind(null, false)}\n            {...otherProps}\n        >\n            <AnimatedTracer\n                isAnimated={isAnimated}\n                targetElementRef={buttonElementRef}\n            />\n            {children}\n        </StyledGhostButton>\n    );\n};\n\nexport const ToggleButton = styled(Button).attrs(({ isInverted }) => ({\n    isInverted: !isInverted,\n}))``;\n\nexport default Button;\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, FONTS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: ${FONTS.NORMAL.LINE_HEIGHT};\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${theme.BACKGROUND};\n            color: ${theme.TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: ${FONTS.NORMAL.SIZE};\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        ::placeholder {\n            color: ${theme.PRIMARY};\n            opacity: 1;\n        }\n        ::selection {\n            color: ${theme.HIGH_CONTRAST_TEXT};\n            background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${theme.TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${theme.TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${theme.TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${theme.TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport {\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Transition = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isTransitioning }) => `\n        opacity: ${isTransitioning ? 0 : 1};\n        ${UNIFIED_TRANSITION};\n        transition-duration: ${ROUTE_TRANSITION_ANIMATION_DURATION / 2}ms;\n    `\n);\n\nexport default Transition;\n","import { useState } from 'react';\n\nconst useDrag = dataTypes => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        Object.keys(dataTypes).map(dataType => {\n            evt.dataTransfer.setData(dataType, dataTypes[dataType]);\n            return dataType;\n        });\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import { useRef, useState } from 'react';\n\nconst useDrop = dataTypeHandlers => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        Object.keys(dataTypeHandlers).map(dataType => {\n            const data = evt.dataTransfer.getData(dataType);\n            const payload =\n                data.length === 0\n                    ? null\n                    : isNaN(data)\n                    ? data\n                    : parseFloat(data);\n\n            if (payload !== null) {\n                const dataTypeHandler = dataTypeHandlers[dataType];\n                dataTypeHandler(payload, evt);\n            }\n\n            return dataType;\n        });\n\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import { useEffect } from 'react';\nimport mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nconst buildKeyboardShortcutHandler = (keyMap, scopedToElementRef) => evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    const currentKeySequence = uniq(keysDown)\n        .map(keyDown => keyDown.toLowerCase())\n        .sort()\n        .join('+');\n\n    mapKeys(keyMap, (handler, sequence) => {\n        const shortcutKeySequence = sequence\n            .split('+')\n            .map(key => key.trim().toLowerCase())\n            .sort()\n            .join('+');\n\n        if (currentKeySequence === shortcutKeySequence) {\n            const scopedToElement = scopedToElementRef !== null;\n            const scopedElement = scopedToElement && scopedToElementRef.current;\n            const scopedToAnInput = scopedElement && isInput(scopedElement);\n            const firedOnAnInput = isInput(evt.target);\n\n            if (\n                (scopedElement && evt.target === scopedElement) ||\n                (firedOnAnInput && !scopedToAnInput)\n            ) {\n                evt.stopPropagation();\n            }\n\n            if (\n                (firedOnAnInput && !scopedToAnInput) ||\n                (scopedToElement && !scopedElement)\n            ) {\n                return false;\n            }\n\n            return handler(evt);\n        }\n    });\n};\n\nconst useKeyboardShortcuts = (keyMap, targetElementRef = null) => {\n    useEffect(() => {\n        const onKeyDown = buildKeyboardShortcutHandler(\n            keyMap,\n            targetElementRef\n        );\n\n        document.addEventListener('keydown', onKeyDown);\n\n        return () => document.removeEventListener('keydown', onKeyDown);\n    }, [keyMap, targetElementRef]);\n};\n\nexport default useKeyboardShortcuts;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport Box from './atoms/Box';\nimport { ToggleButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLOR_PICKER_HEIGHT,\n    COLOR_PICKER_WIDTH,\n    GRID_UNIT,\n    ICONS,\n    PRIMARY_COLORS,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'flex-end',\n    paddingX: 0.25,\n    paddingY: 0.25,\n})``;\n\nconst StyledWindowShader = styled.div`\n    bottom: 0;\n    left: 0;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1099;\n`;\n\nconst WindowShader = ({ children, ...otherProps }) => {\n    return ReactDOM.createPortal(\n        <StyledWindowShader {...otherProps}>{children}</StyledWindowShader>,\n        document.body\n    );\n};\n\nconst StyledColorPaletteContainer = styled(Box).attrs({\n    isRounded: true,\n    paddingX: 1,\n    paddingY: 1,\n})(\n    ({ theme }) => `\n        background-color: ${theme.BACKGROUND};\n        display: grid;\n        gap: calc(${GRID_UNIT} * 0.25);\n        grid-template-columns: 1fr 1fr 1fr 1fr;\n        grid-template-rows: 1fr 1fr 1fr;\n        position: fixed;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        z-index: 1100;\n        width: ${COLOR_PICKER_WIDTH};\n        height: ${COLOR_PICKER_HEIGHT};\n        \n        &:before {\n            background-color: ${theme.SHADOW};\n            position: fixed;\n            width: 100vw;\n            height: 100vh;\n        }\n    `\n);\n\nconst ColorPaletteContainer = ({ children, ...otherProps }) => {\n    return ReactDOM.createPortal(\n        <StyledColorPaletteContainer {...otherProps}>\n            {children}\n        </StyledColorPaletteContainer>,\n        document.body\n    );\n};\n\nconst ColorChip = styled(Box).attrs({})`\n    border-radius: 400px;\n    transform: scale(1);\n    ${UNIFIED_TRANSITION};\n\n    &:hover {\n        transform: scale(1.1);\n    }\n`;\n\nconst ColorPicker = ({ palette, onPickColor, ...otherProps }) => {\n    const [isPickingColor, setIsPickingColor] = useState(false);\n\n    const showPicker = () => {\n        setIsPickingColor(true);\n    };\n\n    const hidePicker = () => {\n        setIsPickingColor(false);\n    };\n\n    return (\n        <Container {...otherProps}>\n            <ToggleButton isInverted={!isPickingColor} onClick={showPicker}>\n                {ICONS.COLOR_PICKER}\n            </ToggleButton>\n            {isPickingColor && (\n                <>\n                    <ColorPaletteContainer>\n                        {PRIMARY_COLORS.map(colorObj => {\n                            return (\n                                <ColorChip\n                                    key={colorObj.primaryColor}\n                                    style={{\n                                        backgroundColor: colorObj.primaryColor,\n                                    }}\n                                    onClick={onPickColor.bind(\n                                        null,\n                                        colorObj.primaryColor\n                                    )}\n                                />\n                            );\n                        })}\n                    </ColorPaletteContainer>\n                    <WindowShader onClick={hidePicker} />\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default styled(ColorPicker)``;\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport { BORDER_RADIUS, GRID_UNIT, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditable, isEditing, theme, tracingElementStyles = () => {} }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border:\n                ${isEditing ? 'none' : `2px dashed ${theme.BORDER}`};\n            box-shadow:\n                ${\n                    isEditing\n                        ? `0 0 0 2px ${theme.PRIMARY}`\n                        : `0 0 0 0 ${theme.PRIMARY}`\n                };\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.25 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.25 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n            ${tracingElementStyles(theme)}\n        }\n        \n        &:focus,\n        &:hover {\n            &:before {\n                opacity: ${isEditable ? 1 : 0};\n            }\n        }\n    `\n);\n\nconst StyledTextarea = styled.textarea`\n    display: block;\n    height: 100%;\n    width: 100%;\n`;\n\nconst Canvas = styled(Box)(\n    ({ isEmpty }) => `\n        opacity: ${isEmpty ? 0.6 : 1};\n    `\n);\n\nconst EditInPlace = ({\n    canvasStyles = {},\n    doubleClickToEdit = false,\n    isEditable = true,\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    tracingElementStyles = () => {},\n    value = '',\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const containerElementRef = useRef(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = useCallback(() => {\n        if (isEditable && !isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    }, [isEditable, isEditing, setBufferedValue, setIsEditing, value]);\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [handleClick, isRemotelyActivated]);\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const keyMap = useMemo(() => {\n        const saveAndClose = () => {\n            onSave(bufferedValue);\n            setIsEditing(false);\n        };\n\n        const close = () => {\n            setBufferedValue(value);\n            setIsEditing(false);\n        };\n\n        return {\n            'cmd + escape': close,\n            'shift + escape': close,\n            'cmd + enter': saveAndClose,\n            'shift + enter': saveAndClose,\n            'escape': saveAndClose,\n            'enter': evt => {\n                if (\n                    evt.target.tagName.toLowerCase() === 'textarea' &&\n                    isSingleLine\n                ) {\n                    saveAndClose();\n                    evt.preventDefault();\n                    return false;\n                }\n\n                if (evt.target === containerElementRef.current) {\n                    evt.preventDefault();\n                    handleClick();\n                }\n            },\n        };\n    }, [bufferedValue, handleClick, onSave, isSingleLine, value]);\n\n    useKeyboardShortcuts(keyMap, inputRef);\n\n    return (\n        <Container\n            isEditable={isEditable}\n            isEditing={isEditing}\n            ref={containerElementRef}\n            tabIndex={0}\n            tracingElementStyles={tracingElementStyles}\n            onClick={!doubleClickToEdit ? handleClick : null}\n            onDoubleClick={doubleClickToEdit ? handleClick : null}\n            {...otherProps}\n        >\n            <Canvas isEmpty={isEmpty} style={{ ...canvasStyles }}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <StyledTextarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                height: `${measuringElementHeight}px`,\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Canvas>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React, { useCallback, useMemo, useRef } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    buildPalette,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport ColorPicker from './ColorPicker';\nimport EditInPlace from './EditInPlace';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    direction: 'column',\n    justify: 'flex-start',\n    spacing: 0.5,\n})(\n    ({ isActive, isTargetedForDrop, theme }) => `\n        background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 2px ${isActive ? theme.SHADED : 'transparent'},\n            0 0 0 4px ${\n                isActive\n                    ? theme[\n                          isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                      ]\n                    : 'transparent'\n            };\n        color: ${theme.HIGH_CONTRAST_TEXT};\n        cursor: pointer;\n        height: ${LIST_CARD_HEIGHT};\n        margin-bottom: ${LIST_CARD_SPACING};\n        margin-left: ${LIST_CARD_SPACING};\n        overflow: hidden;\n        position: relative;\n        transform: scale(${isTargetedForDrop ? 1.1 : 1});\n        width: ${LIST_CARD_WIDTH};\n        ${UNIFIED_TRANSITION};\n        \n        &:nth-child(3n+4) {\n            margin-left: 0;\n        }\n        \n        &:active,\n        &:focus,\n        &:hover {\n            box-shadow:\n                0 0 0 2px ${theme.SHADED},\n                0 0 0 4px ${\n                    theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER']\n                };\n        }\n    `\n);\n\nexport const GhostListCard = styled(GhostButton).attrs({\n    align: 'center',\n    justify: 'center',\n})`\n    height: ${LIST_CARD_HEIGHT};\n    margin-bottom: ${LIST_CARD_SPACING};\n    width: ${LIST_CARD_WIDTH};\n`;\n\nexport const ListCardContainer = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n    justify: 'flex-start',\n    padding: 1,\n    wrapped: true,\n})(\n    ({ theme }) => `\n        align-content: flex-start;\n        background-color: ${theme.SHADED};\n        height: 100%;\n        overflow: auto;\n        padding-bottom: calc(${GRID_UNIT} * 1.5);\n    `\n);\n\nconst ListCard = ({\n    appActions,\n    appData,\n    listId,\n    isEditable = true,\n    ...otherProps\n}) => {\n    const { onUpdateList, onUpdateTask } = appActions;\n\n    const { isCreatingList, lists, selectedListId, tasks, theme } = appData;\n\n    const list = lists.find(list => list.id === listId);\n\n    const listPalette = buildPalette(theme, list.color_code);\n\n    const tasksInList = tasks.filter(\n        task => task.list_id === listId && !task.isComplete\n    );\n\n    const isActive = listId === selectedListId;\n\n    const listCardElementRef = useRef(null);\n\n    const [dragProps] = useDrag({ 'list-id': listId });\n\n    const [dropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const targetListId = toInt(evt.currentTarget.dataset.listId);\n            if (targetListId) {\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    list_id: targetListId,\n                });\n            }\n        },\n    });\n\n    const triggerClick = useCallback(evt => {\n        evt.preventDefault();\n        evt.target.click();\n    }, []);\n\n    const setListColor = colorCode =>\n        onUpdateList(listId, { color_code: colorCode });\n\n    const keyMap = useMemo(\n        () => ({\n            enter: triggerClick,\n            space: triggerClick,\n        }),\n        [triggerClick]\n    );\n\n    useKeyboardShortcuts(keyMap, listCardElementRef);\n\n    const tracingElementStyles = theme => `\n        border-color: ${theme.HIGH_CONTRAST_TEXT}\n    `;\n\n    return (\n        <ThemeProvider theme={listPalette}>\n            <Container\n                data-list-id={listId}\n                isActive={isActive}\n                ref={listCardElementRef}\n                tabIndex={0}\n                title={COPY.TIPS.MOVE_BETWEEN_LISTS}\n                {...dragProps}\n                {...dropProps}\n                {...otherProps}\n            >\n                <EditInPlace\n                    isEditable={isEditable}\n                    isRemotelyActivated={\n                        isCreatingList && selectedListId === listId\n                    }\n                    marginX={0.75}\n                    marginTop={0.5}\n                    style={{\n                        alignSelf: 'stretch',\n                        flexGrow: 0,\n                        flexShrink: 0,\n                    }}\n                    tracingElementStyles={tracingElementStyles}\n                    value={list.label}\n                    onSave={newLabel => {\n                        onUpdateList(listId, { label: newLabel });\n                    }}\n                />\n                <FlexBox\n                    direction=\"column\"\n                    isFlexible\n                    isScrollable\n                    spacing={0.25}\n                >\n                    {tasksInList.map(task => (\n                        <FlexBox\n                            key={task.id}\n                            align=\"flex-start\"\n                            paddingX={0.25}\n                            spacing={0.25}\n                            style={{\n                                fontSize: `calc(${FONTS.NORMAL.SIZE} / 2)`,\n                            }}\n                        >\n                            <span>{task.icon}</span>\n                            <span>{task.label}</span>\n                        </FlexBox>\n                    ))}\n                </FlexBox>\n                <ColorPicker listId={listId} onPickColor={setListColor} />\n            </Container>\n        </ThemeProvider>\n    );\n};\n\nexport default ListCard;\n","import sortBy from 'lodash/sortBy';\nimport React from 'react';\nimport { COPY } from './atoms/tokens';\nimport ListCard, { GhostListCard, ListCardContainer } from './ListCard';\n\nconst ListManager = ({ appActions, appData }) => {\n    const { onCreateList, onSelectList } = appActions;\n    const { lists } = appData;\n    const unarchivedLists = lists.filter(list => !list.isArchived);\n    const sortedLists = sortBy(unarchivedLists, [list => list.label]);\n\n    return (\n        <ListCardContainer>\n            <GhostListCard onClick={() => onCreateList()}>\n                {COPY.CREATE_LIST_LABEL}\n            </GhostListCard>\n            {sortedLists.map(list => (\n                <ListCard\n                    key={list.id}\n                    appActions={appActions}\n                    appData={appData}\n                    listId={list.id}\n                    onClick={() => onSelectList(list.id)}\n                />\n            ))}\n        </ListCardContainer>\n    );\n};\n\nexport default ListManager;\n","import React from 'react';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\n\nconst TaskListToggleButton = ({ isSidebarOpen, onChangeIsSidebarOpen }) => (\n    <ToggleButton\n        isActive={isSidebarOpen}\n        title={COPY.TIPS.TOGGLE_TASK_LIST}\n        onClick={() => onChangeIsSidebarOpen(!isSidebarOpen)}\n    >\n        {isSidebarOpen ? ICONS.LEFT : ICONS.RIGHT}\n    </ToggleButton>\n);\n\nexport default TaskListToggleButton;\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'space-between',\n    paddingX: 0.5,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${theme.BACKGROUND};\n        color: ${theme.TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${theme.TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React, { useEffect, useState } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport { SecondaryAppColumn } from './AppColumn';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\nimport SidebarToggleButton from './TaskListToggleButton';\nimport ToolBar from './ToolBar';\n\nconst Sidebar = ({ appActions, appData, children, ...otherProps }) => {\n    const { onChangeIsSidebarOpen, onChangeTheme, onUpdateTask } = appActions;\n\n    const {\n        isShowingTrashContents,\n        isSidebarOpen,\n        lists,\n        selectedListId,\n        theme,\n    } = appData;\n\n    const [isTaskListForcedOpen, setIsTaskListForcedOpen] = useState(false);\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const [sidebarDropProps] = useDrop({\n        'task-id': taskId => {\n            onUpdateTask(taskId, {\n                list_id: selectedListId,\n                scheduled: false,\n            });\n        },\n    });\n\n    useEffect(() => {\n        if (!isSidebarOpen && sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(true);\n            onChangeIsSidebarOpen(true);\n            return;\n        }\n\n        if (isTaskListForcedOpen && !sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(false);\n            onChangeIsSidebarOpen(false);\n        }\n    }, [\n        sidebarDropProps.isTargetedForDrop,\n        isTaskListForcedOpen,\n        isSidebarOpen,\n        setIsTaskListForcedOpen,\n        onChangeIsSidebarOpen,\n    ]);\n\n    return (\n        <SecondaryAppColumn\n            label={\n                !isSidebarOpen\n                    ? ''\n                    : isShowingTrashContents\n                    ? COPY.LABEL_FOR_TRASHED_TASKS\n                    : selectedList.label\n            }\n            {...sidebarDropProps}\n            {...otherProps}\n        >\n            {!isSidebarOpen ? (\n                <SidebarToggleButton\n                    isSidebarOpen={isSidebarOpen}\n                    onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                />\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={COPY.TIPS.TOGGLE_DARK_MODE}\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT'\n                                ? ICONS.DARK_MODE\n                                : ICONS.LIGHT_MODE}\n                        </ToggleButton>\n                        <SidebarToggleButton\n                            isSidebarOpen={isSidebarOpen}\n                            onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                        />\n                    </ToolBar>\n\n                    {children}\n                </>\n            )}\n        </SecondaryAppColumn>\n    );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0.75};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map((option, optionIndex) => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(\n                              renderOption(option, optionIndex),\n                              optionIndex\n                          )\n                        : renderOption(option, optionIndex)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COPY,\n    ICONS,\n    DURATION_OPTIONS,\n    FONTS,\n    BORDER_WIDTH,\n} from './atoms/tokens';\n\nconst TaskHeader = styled(FlexBox).attrs({\n    forwardedAs: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${theme.SHADED};\n        font-size: ${FONTS.LARGE.SIZE};\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    align-self: center;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst DurationOptionBar = styled(OptionBar)(\n    ({ theme }) => `\n        background-color: ${theme.SHADED};\n        border-top: ${BORDER_WIDTH} solid ${theme.BACKGROUND};\n    `\n);\n\nconst TaskDetails = ({ appActions = {}, appData = {} }) => {\n    const { onUpdateTask } = appActions;\n    const { isCreatingTask, selectedTaskId, tasks } = appData;\n    const activeTask = tasks.find(task => task.id === selectedTaskId) || {};\n    const { icon, id, label, notes, scheduled_minutes } = activeTask;\n    const isEmpty = !activeTask.id;\n\n    const handleUpdateTask = useCallback(\n        (field, value) => onUpdateTask(id, { [field]: value }),\n        [id, onUpdateTask]\n    );\n\n    const handleSaveDuration = useCallback(\n        newDuration => handleUpdateTask('scheduled_minutes', newDuration),\n        [handleUpdateTask]\n    );\n\n    const handleSaveIcon = useCallback(\n        newNotes => handleUpdateTask('icon', newNotes),\n        [handleUpdateTask]\n    );\n\n    const handleSaveLabel = useCallback(\n        newLabel => handleUpdateTask('label', newLabel),\n        [handleUpdateTask]\n    );\n\n    const handleSaveNotes = useCallback(\n        newNotes => handleUpdateTask('notes', newNotes),\n        [handleUpdateTask]\n    );\n\n    return (\n        !isEmpty && (\n            <>\n                <TaskHeader>\n                    <TaskHeaderLabel>\n                        <EditInPlace\n                            isRemotelyActivated={isCreatingTask}\n                            placeholder={COPY.EMPTY_LABEL}\n                            value={label}\n                            onSave={handleSaveLabel}\n                        />\n                    </TaskHeaderLabel>\n                    <TaskHeaderIcon>\n                        <EditInPlace\n                            placeholder={ICONS.TASK_DEFAULT}\n                            value={icon}\n                            onSave={handleSaveIcon}\n                        />\n                    </TaskHeaderIcon>\n                </TaskHeader>\n\n                <DurationOptionBar\n                    options={DURATION_OPTIONS}\n                    renderSelectedOption={option => <span>{option} mins</span>}\n                    selectedOption={scheduled_minutes}\n                    title={COPY.TIPS.SETTING_DURATION}\n                    onChange={handleSaveDuration}\n                />\n\n                <EditInPlace\n                    isFlexible\n                    isMultiLine\n                    margin={1}\n                    placeholder={COPY.EMPTY_NOTES}\n                    render={rawNotes => (\n                        <div\n                            className=\"markdown\"\n                            dangerouslySetInnerHTML={{\n                                __html: marked(rawNotes),\n                            }}\n                        />\n                    )}\n                    canvasStyles={{\n                        bottom: 0,\n                        fontSize: FONTS.LARGE.SIZE,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                    value={notes}\n                    onSave={handleSaveNotes}\n                />\n            </>\n        )\n    );\n};\n\nexport default TaskDetails;\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","import React, { memo, useState } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    buildPalette,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, theme }) => `\n        background-color: ${theme.BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 ${isActive ? 2 : 1}px\n            ${theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER']};\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        width: 100%;\n        z-index: ${isActive ? 100 : 10};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n            \n        & ::selection {\n            color: ${theme.HIGH_CONTRAST_BACKGROUND};\n            background-color: ${theme.HIGH_CONTRAST_TEXT};\n        }\n\n        &:before {\n            background-color: ${theme.PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${\n                theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER']\n            };\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${theme.TASK_BORDER_ACTIVE};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${theme.TASK_BORDER_ACTIVE} inset;\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n})(\n    ({ duration, isActive, isMouseOver, theme }) => `\n        color: ${theme[isActive || isMouseOver ? 'TEXT' : 'TEXT_FADED']};\n        min-height: ${minutesToHeight(Math.min(30, duration))};\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ duration }) => `\n        font-size: ${duration <= 15 ? FONTS.NORMAL.SIZE : FONTS.LARGE.SIZE};\n        height: ${minutesToHeight(Math.min(30, duration))};\n        width: auto;\n    `\n);\n\nexport const TaskCardContainer = styled(FlexBox).attrs({\n    isFlexible: true,\n    justify: 'flex-start',\n    direction: 'column',\n    spacing: 0.5,\n    padding: 1,\n})``;\n\nconst TaskCard = ({ appActions, appData, task, ...otherProps }) => {\n    const [isMouseOver, setIsMouseOver] = useState(false);\n\n    const { onImmediatelySelectTask, onTransitionToTask } = appActions;\n\n    const { isShowingListManager, lists, selectedTaskId, theme } = appData;\n\n    const { icon, id, label, list_id, scheduled_minutes } = task;\n\n    const listcolorCode = lists.find(list => list.id === list_id).color_code;\n\n    const cardPalette = buildPalette(theme, listcolorCode);\n\n    const isActive = task.id === selectedTaskId;\n\n    const [dragProps] = useDrag({ 'task-id': id });\n\n    const handleClick = () => {\n        if (isShowingListManager) {\n            onImmediatelySelectTask(id);\n            return;\n        }\n\n        onTransitionToTask(id);\n    };\n\n    const toggleIsMouseOver = () => setIsMouseOver(!isMouseOver);\n\n    return (\n        <ThemeProvider theme={cardPalette}>\n            <Container\n                data-task-id={id}\n                duration={scheduled_minutes}\n                isActive={isActive}\n                tabIndex={0}\n                title={COPY.TIPS.MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE}\n                onClick={handleClick}\n                onMouseEnter={toggleIsMouseOver}\n                onMouseLeave={toggleIsMouseOver}\n                {...dragProps}\n                {...otherProps}\n            >\n                <CardLabel\n                    duration={scheduled_minutes}\n                    isActive={isActive}\n                    isMouseOver={isMouseOver}\n                >\n                    {label}\n                </CardLabel>\n                <CardIcon duration={scheduled_minutes}>{icon}</CardIcon>\n            </Container>\n        </ThemeProvider>\n    );\n};\n\nexport default memo(TaskCard);\n","import React, { memo } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\n\nconst TaskList = ({ appActions, appData, ...otherProps }) => {\n    const { onChangeTaskPosition, onCreateTask } = appActions;\n\n    const { incompleteTasks, lists, selectedListId } = appData;\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const unscheduledTasks = incompleteTasks.filter(\n        task =>\n            !task.scheduled &&\n            task.list_id === selectedListId &&\n            !selectedList.isArchived\n    );\n\n    const [taskCardDropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n            const droppedOnTaskIndex = appData.tasks.findIndex(\n                task => task.id === droppedOnTaskId\n            );\n            onChangeTaskPosition(taskId, droppedOnTaskIndex);\n        },\n    });\n\n    return (\n        <TaskCardContainer {...otherProps}>\n            <GhostButton\n                style={{\n                    height: minutesToHeight(30),\n                }}\n                title={COPY.TIPS.CREATE_NEW_TASK}\n                onClick={() => onCreateTask()}\n            >\n                {COPY.CREATE_TASK_LABEL}\n            </GhostButton>\n            {unscheduledTasks.map(task => (\n                <TaskCard\n                    key={task.id}\n                    appActions={appActions}\n                    appData={appData}\n                    task={task}\n                    {...taskCardDropProps}\n                />\n            ))}\n        </TaskCardContainer>\n    );\n};\n\nexport default memo(TaskList);\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${isTargetedForDrop ? `4px dotted ${theme.PRIMARY}` : ''};\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop({\n            'task-id': taskId =>\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    scheduled: true,\n                    scheduled_time: newTime,\n                }),\n        });\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COPY, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: COPY.LABEL_FOR_TIMELINE,\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${theme.TASK_BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, theme.TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${theme.BORDER};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            opacity: ${isFaded ? 0.5 : 1};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop({ 'task-id': () => {} });\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY, GRID_UNIT, ICONS, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst DROP_ZONE_SIZE = `calc(${GRID_UNIT} * 4)`;\n\nconst pulsingAnimation = ({ from, to }) => keyframes`\n    0% {\n        transform: scale(${from});\n    }\n    100% {\n        transform: scale(${to});\n    }\n`;\n\nconst AnimatedContainer = styled(FlexBox)(\n    ({ isDraggingTask, isTargetedForDrop }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop\n            ? pulsingAnimation({ from: 1.6, to: 2.4 })\n            : isDraggingTask\n            ? pulsingAnimation({ from: 1, to: 1.6 })\n            : 'unset'};\n        animation-timing-function: ease-in-out;\n        bottom: 0;\n        height: ${DROP_ZONE_SIZE};\n        position: fixed;\n        right: 0;\n        transform-origin: bottom right;\n        transform: scale(${isDraggingTask ? 1.5 : 1});\n        width: ${DROP_ZONE_SIZE};\n        z-index: 1000;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst TrashDropZone = styled(AnimatedContainer)(\n    ({ isDraggingTask }) => `\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n    `\n);\n\nconst TrashIconContainer = styled(AnimatedContainer).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 1,\n})(\n    ({ isDraggingTask, isShowingTrashContents, isTargetedForDrop, theme }) => `\n        color: ${\n            isTargetedForDrop\n                ? '#FF0000'\n                : theme[\n                      isDraggingTask || isShowingTrashContents\n                          ? 'PRIMARY'\n                          : 'TEXT_FADED'\n                  ]\n        };\n        cursor: pointer;\n        font-size: 3rem;\n        opacity: ${!isTargetedForDrop && !isDraggingTask ? 0.6 : 1};\n        \n        &:hover {\n            color: ${theme.PRIMARY};\n        }\n    `\n);\n\nconst Trash = ({ appActions, appData, ...otherProps }) => {\n    const {\n        onChangeIsShowingTrashContents,\n        onDeleteTask,\n        onSelectList,\n        onUpdateList,\n    } = appActions;\n\n    const {\n        isDraggingTask,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n    } = appData;\n\n    const [dropProps] = useDrop({\n        'list-id': listId => {\n            if (selectedListId === listId) {\n                const firstUnarchivedList = lists.find(\n                    list => list.id !== listId && !list.isArchived\n                );\n\n                if (firstUnarchivedList) {\n                    onSelectList(firstUnarchivedList.id);\n                }\n            }\n\n            onUpdateList(listId, {\n                isArchived: true,\n            });\n        },\n        'task-id': onDeleteTask,\n    });\n\n    const handleClick = () =>\n        onChangeIsShowingTrashContents(!isShowingTrashContents);\n\n    return (\n        <>\n            <TrashIconContainer\n                isDraggingTask={isDraggingTask}\n                isShowingTrashContents={isShowingTrashContents}\n                isTargetedForDrop={dropProps.isTargetedForDrop}\n                title={COPY.TIPS.DELETE_TASK}\n                onClick={handleClick}\n            >\n                {ICONS.END_ZONE}\n            </TrashIconContainer>\n            <TrashDropZone\n                isDraggingTask={isDraggingTask}\n                {...dropProps}\n                {...otherProps}\n            />\n        </>\n    );\n};\n\nexport default Trash;\n","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport random from 'lodash/random';\nimport FlexBox from './atoms/FlexBox';\nimport Icon from './atoms/Icon';\nimport { GRID_UNIT } from './atoms/tokens';\n\nconst animation = ({ minOpacity, translationDistance }) => keyframes`\n    0% {\n        transform: translateY(-${translationDistance}px);\n        opacity: ${minOpacity};\n    }\n    100% {\n        transform: translateY(${translationDistance}px);\n        opacity: 1;\n    }\n`;\n\nconst Container = styled.div(\n    () => css`\n        animation-direction: alternate;\n        animation-duration: ${random(300, 400)}ms;\n        animation-iteration-count: infinite;\n        animation-name: ${animation({\n            translationDistance: random(0.5, 2),\n            minOpacity: random(0.75, 0.9),\n        })};\n        animation-timing-function: ease-in-out;\n        position: relative;\n\n        & > * {\n            width: auto;\n        }\n    `\n);\n\nconst RestoreButton = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 0.25,\n})(\n    ({ theme }) => `\n        background-color: ${theme.HIGH_CONTRAST_TEXT};\n        border: 2px solid ${theme.HIGH_CONTRAST_BACKGROUND};\n        border-radius: 100px;\n        color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        cursor: pointer;\n        height: calc(${GRID_UNIT});\n        position: absolute;\n        right: 0;\n        top: 0;\n        transform: translate(50%, -50%);\n        width: calc(${GRID_UNIT});\n        z-index: 1000;\n        \n        &:hover {\n            background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n            color: ${theme.HIGH_CONTRAST_TEXT};\n        }\n    `\n);\n\nconst TrashedCard = ({\n    children,\n    restoreButtonTitle,\n    onRestore,\n    ...otherProps\n}) => {\n    return (\n        <Container {...otherProps}>\n            <RestoreButton title={restoreButtonTitle} onClick={onRestore}>\n                <Icon iconName=\"reply\" />\n            </RestoreButton>\n            {children}\n        </Container>\n    );\n};\n\nexport default TrashedCard;\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport ListCard, { ListCardContainer } from './ListCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedLists = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateList } = appActions;\n\n    const { lists } = appData;\n\n    const deletedLists = lists.filter(list => list.isArchived);\n\n    const hasDeletedLists = deletedLists.length;\n\n    const handleRestoreList = listId =>\n        onUpdateList(listId, { isArchived: false });\n\n    return (\n        <>\n            {!hasDeletedLists && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_LISTS}\n                </FlexBox>\n            )}\n            {!!hasDeletedLists && (\n                <ListCardContainer {...otherProps}>\n                    {deletedLists.map(list => (\n                        <TrashedCard\n                            key={list.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_LIST}\n                            onRestore={handleRestoreList.bind(this, list.id)}\n                        >\n                            <ListCard\n                                appActions={appActions}\n                                appData={appData}\n                                isEditable={false}\n                                listId={list.id}\n                            />\n                        </TrashedCard>\n                    ))}\n                </ListCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedLists);\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedTasks = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateTask } = appData;\n\n    const { tasks } = appData;\n\n    const deletedTasks = tasks.filter(task => task.isComplete);\n\n    const hasDeletedTasks = deletedTasks.length;\n\n    const handleRestoreTask = taskId =>\n        onUpdateTask(taskId, { isComplete: false });\n\n    return (\n        <>\n            {!hasDeletedTasks && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_TASKS}\n                </FlexBox>\n            )}\n            {!!hasDeletedTasks && (\n                <TaskCardContainer {...otherProps}>\n                    {deletedTasks.map(task => (\n                        <TrashedCard\n                            key={task.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_TASK}\n                            style={{ width: '100%' }}\n                            onRestore={handleRestoreTask.bind(this, task.id)}\n                        >\n                            <TaskCard\n                                appActions={appActions}\n                                appData={appData}\n                                isActive\n                                task={task}\n                            />\n                        </TrashedCard>\n                    ))}\n                </TaskCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedTasks);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                ![null, 'undefined'].includes(savedState)\n                    ? JSON.parse(savedState)\n                    : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import random from 'lodash/random';\nimport sample from 'lodash/sample';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { StyleSheetManager, ThemeProvider } from 'styled-components';\nimport { PrimaryAppColumn } from './components/AppColumn';\nimport { ToggleButton } from './components/atoms/Button';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport {\n    buildPalette,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    PRIMARY_COLORS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    SIDEBAR_DEFAULT_WIDTH,\n    SIDEBAR_EXTENDED_WIDTH,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\nimport Transition from './components/atoms/Transition';\nimport ListManager from './components/ListManager';\nimport Sidebar from './components/Sidebar';\nimport TaskDetails from './components/TaskDetails';\nimport TaskList from './components/TaskList';\nimport Timeline from './components/Timeline';\nimport ToolBar from './components/ToolBar';\nimport Trash from './components/Trash';\nimport TrashedLists from './components/TrashedLists';\nimport TrashedTasks from './components/TrashedTasks';\nimport useKeyboardShortcuts from './hooks/useKeyboardShortcuts';\nimport usePersistentState from './hooks/usePersistentState';\n\nfunction App() {\n    const [isShowingSidebar, setIsShowingSidebar] = usePersistentState(\n        'is-showing-sidebar',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        INITIAL_SELECTED_LIST_ID\n    );\n    const [isShowingListManager, setIsShowingListManager] = usePersistentState(\n        'is-showing-list-manager',\n        true\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        INITIAL_SELECTED_TASK_ID\n    );\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingList, setIsCreatingList] = useState(false);\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const [isShowingTrashContents, setIsShowingTrashContents] = useState(false);\n    const [isTransitioning, setIsTransitioning] = useState(false);\n    const unarchivedLists = useMemo(\n        () => lists.filter(list => !list.isArchived),\n        [lists]\n    );\n    const currentListIndex = unarchivedLists.findIndex(\n        list => list.id === selectedListId\n    );\n    const selectedTask = tasks.find(task => task.id === selectedTaskId);\n    const listContainingSelectedTask = selectedTask\n        ? lists.find(list => list.id === selectedTask.list_id)\n        : null;\n    const selectedList = lists.find(list => list.id === selectedListId);\n    const primarycolorCode = listContainingSelectedTask\n        ? listContainingSelectedTask.color_code\n        : selectedList\n        ? selectedList.color_code\n        : PRIMARY_COLORS[0].primaryColor;\n    const palette = buildPalette(themeName, primarycolorCode);\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n    const hasUnarchivedList = lists.filter(list => !list.isArchived).length;\n    const isSidebarOpen = hasUnarchivedList && isShowingSidebar;\n\n    useEffect(() => {\n        const handleDragOver = () => setIsDraggingTask(true);\n        const handleDragEnd = () => setIsDraggingTask(false);\n        document.addEventListener('dragover', handleDragOver);\n        document.addEventListener('dragend', handleDragEnd);\n        document.addEventListener('drop', handleDragEnd);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n            document.removeEventListener('dragend', handleDragEnd);\n            document.removeEventListener('drop', handleDragEnd);\n        };\n    }, []);\n\n    const onCreateList = useCallback(\n        (overrides = {}) => {\n            const newListId = Date.now();\n            const randomcolorCode = random(0, PRIMARY_COLORS.length);\n\n            setLists(currentLists =>\n                currentLists.concat([\n                    {\n                        id: newListId,\n                        color_code: randomcolorCode,\n                        isArchived: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_LIST_LABEL\n                        }`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedListId(newListId);\n\n            setIsCreatingList(true);\n\n            setTimeout(() => setIsCreatingList(false), 1000);\n        },\n        [setSelectedListId, setLists]\n    );\n\n    const onUpdateList = useCallback(\n        (listId, updates) => {\n            setLists(prevLists =>\n                prevLists.map(list => {\n                    if (list.id === listId) {\n                        return {\n                            ...list,\n                            ...updates,\n                        };\n                    }\n                    return list;\n                })\n            );\n        },\n        [setLists]\n    );\n\n    const onSelectList = listId => {\n        const firstTaskIdInList = incompleteTasks.find(\n            task => task.list_id === listId\n        );\n        setSelectedListId(listId);\n        setSelectedTaskId(firstTaskIdInList ? firstTaskIdInList.id : '');\n        setIsShowingSidebar(true);\n        setIsShowingTrashContents(false);\n        setIsShowingListManager(true);\n    };\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                [\n                    {\n                        icon: ICONS.TASK_DEFAULT,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_TASK_LABEL\n                        }`,\n                        notes: COPY.NEW_TASK_NOTES,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ].concat(currentTasks)\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingTask(true);\n\n            setIsShowingListManager(false);\n        },\n        [selectedListId, setIsShowingListManager, setSelectedTaskId, setTasks]\n    );\n\n    useEffect(() => {\n        if (isCreatingTask) {\n            setIsShowingListManager(false);\n            const timer = setTimeout(() => setIsCreatingTask(false), 100);\n            return () => clearTimeout(timer);\n        }\n    }, [isCreatingTask, setIsCreatingTask, setIsShowingListManager]);\n\n    const onSelectTask = useCallback(\n        taskId => {\n            const task = tasks.find(task => task.id === taskId);\n\n            setSelectedListId(task.list_id);\n            setSelectedTaskId(taskId);\n        },\n        [tasks, setSelectedTaskId, setSelectedListId]\n    );\n\n    const transition = useCallback(\n        callback => {\n            setIsTransitioning(true);\n            setTimeout(() => {\n                callback();\n                setIsTransitioning(false);\n            }, ROUTE_TRANSITION_ANIMATION_DURATION / 2);\n        },\n        [setIsTransitioning]\n    );\n\n    const onImmediatelySelectTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            onSelectTask(taskId);\n        },\n        [isShowingListManager, setIsShowingListManager, onSelectTask]\n    );\n\n    const onTransitionToTask = useCallback(\n        taskId => {\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            transition(() => onSelectTask(taskId));\n        },\n        [\n            isShowingListManager,\n            setIsShowingListManager,\n            onSelectTask,\n            transition,\n        ]\n    );\n\n    const onChangeIsSidebarOpen = setIsShowingSidebar;\n\n    const onChangeIsShowingListManager = useCallback(\n        newIsShowingListManager => {\n            transition(() => {\n                setIsShowingListManager(newIsShowingListManager);\n\n                if (newIsShowingListManager) {\n                    setIsShowingSidebar(true);\n                }\n            });\n        },\n        [setIsShowingSidebar, setIsShowingListManager, transition]\n    );\n\n    const onChangeIsShowingTrashContents = useCallback(() => {\n        if (!isShowingSidebar) {\n            setIsShowingSidebar(true);\n        }\n        if (!isShowingListManager) {\n            setIsShowingListManager(true);\n        }\n        setIsShowingTrashContents(!isShowingTrashContents);\n    }, [\n        isShowingListManager,\n        isShowingSidebar,\n        isShowingTrashContents,\n        setIsShowingListManager,\n        setIsShowingSidebar,\n        setIsShowingTrashContents,\n    ]);\n\n    const onDeleteTask = useCallback(\n        taskId => {\n            if (selectedTaskId === taskId) {\n                const firstUnarchivedTask = tasks.find(\n                    task =>\n                        task.id !== taskId &&\n                        task.list_id === selectedListId &&\n                        !task.isComplete\n                );\n\n                if (firstUnarchivedTask) {\n                    onImmediatelySelectTask(firstUnarchivedTask.id);\n                } else {\n                    onChangeIsShowingListManager(true);\n                }\n            }\n\n            onUpdateTask(taskId, {\n                isComplete: true,\n            });\n        },\n        [\n            onChangeIsShowingListManager,\n            onImmediatelySelectTask,\n            onUpdateTask,\n            selectedListId,\n            tasks,\n            selectedTaskId,\n        ]\n    );\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const moveTaskToTimeline = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: true,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const moveTaskToTaskList = useCallback(\n        evt => {\n            evt.preventDefault();\n            onUpdateTask(selectedTaskId, {\n                scheduled: false,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const selectNextList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const nextListIndex = currentListIndex + 1;\n            const nextIndex =\n                nextListIndex > unarchivedLists.length - 1 ? 0 : nextListIndex;\n            onSelectList(unarchivedLists[nextIndex].id);\n        },\n        [currentListIndex, onSelectList, unarchivedLists]\n    );\n\n    const selectPreviousList = useCallback(\n        evt => {\n            evt.preventDefault();\n            const prevListIndex = currentListIndex - 1;\n            const prevIndex =\n                prevListIndex < 0 ? unarchivedLists.length - 1 : prevListIndex;\n            onSelectList(unarchivedLists[prevIndex].id);\n        },\n        [currentListIndex, onSelectList, unarchivedLists]\n    );\n\n    const setTaskDuration = useCallback(\n        duration => {\n            onUpdateTask(selectedTaskId, {\n                scheduled_minutes: duration,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const toggleTaskListVisibility = useCallback(\n        evt => {\n            evt.preventDefault();\n\n            if (isShowingSidebar) {\n                setIsShowingTrashContents(false);\n            }\n\n            onChangeIsSidebarOpen(!isShowingSidebar);\n        },\n        [isShowingSidebar, onChangeIsSidebarOpen]\n    );\n\n    const toggleDarkMode = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n        },\n        [onChangeTheme, themeName]\n    );\n\n    const toggleIsEditingCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            setIsCreatingTask(true);\n        },\n        [setIsCreatingTask]\n    );\n\n    const toggleIsShowingListManager = useCallback(\n        evt => {\n            evt.preventDefault();\n            onChangeIsShowingListManager(!isShowingListManager);\n        },\n        [isShowingListManager, onChangeIsShowingListManager]\n    );\n\n    const createNewTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onCreateTask();\n        },\n        [onCreateTask]\n    );\n\n    const deleteCurrentTask = useCallback(\n        evt => {\n            evt.preventDefault();\n            onDeleteTask(selectedTaskId);\n        },\n        [onDeleteTask, selectedTaskId]\n    );\n\n    const goBack = useCallback(() => {\n        setIsShowingTrashContents(current => {\n            if (current) {\n                return false;\n            }\n        });\n\n        setIsShowingListManager(current => !current);\n    }, [setIsShowingListManager, setIsShowingTrashContents]);\n\n    const keyMap = useMemo(() => {\n        return {\n            ...[15, 30, 45, 60, 90, 120].reduce((acc, duration, index) => {\n                return {\n                    ...acc,\n                    [index + 1]: setTaskDuration.bind(null, duration),\n                };\n            }, {}),\n            'cmd + arrowRight': moveTaskToTimeline,\n            'cmd + arrowLeft': moveTaskToTaskList,\n            'cmd + shift + arrowRight': selectNextList,\n            'cmd + shift + arrowLeft': selectPreviousList,\n            'cmd + shift + ]': selectNextList,\n            'cmd + shift + [': selectPreviousList,\n            'b': toggleTaskListVisibility,\n            'd': toggleDarkMode,\n            'e': toggleIsEditingCurrentTask,\n            'escape': goBack,\n            'l': toggleIsShowingListManager,\n            'n': createNewTask,\n            't': deleteCurrentTask,\n        };\n    }, [\n        createNewTask,\n        deleteCurrentTask,\n        goBack,\n        moveTaskToTaskList,\n        moveTaskToTimeline,\n        selectNextList,\n        selectPreviousList,\n        setTaskDuration,\n        toggleTaskListVisibility,\n        toggleDarkMode,\n        toggleIsEditingCurrentTask,\n        toggleIsShowingListManager,\n    ]);\n\n    useKeyboardShortcuts(keyMap);\n\n    const appActions = {\n        onChangeIsSidebarOpen,\n        onChangeTaskPosition,\n        onChangeIsShowingListManager,\n        onChangeIsShowingTrashContents,\n        onChangeTheme,\n        onCreateList,\n        onCreateTask,\n        onDeleteTask,\n        onSelectList,\n        onImmediatelySelectTask,\n        onTransitionToTask,\n        onUpdateList,\n        onUpdateTask,\n    };\n\n    const appData = {\n        incompleteTasks,\n        isSidebarOpen,\n        isCreatingList,\n        isCreatingTask,\n        isDraggingTask,\n        isShowingListManager,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    const columnWidths = isSidebarOpen\n        ? {\n              sidebar: SIDEBAR_DEFAULT_WIDTH,\n              listManager: '40vw',\n              taskDetails: '40vw',\n              timeline: SIDEBAR_DEFAULT_WIDTH,\n          }\n        : {\n              sidebar: `calc(${GRID_UNIT} * 2)`,\n              listManager: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              taskDetails: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              timeline: SIDEBAR_EXTENDED_WIDTH,\n          };\n\n    return (\n        <StyleSheetManager disableVendorPrefixes>\n            <ThemeProvider theme={palette}>\n                <GlobalStyle />\n                <Trash appActions={appActions} appData={appData} />\n                <FlexBox align=\"stretch\">\n                    <Sidebar\n                        appActions={appActions}\n                        appData={appData}\n                        style={{\n                            width: columnWidths.sidebar,\n                        }}\n                    >\n                        {isShowingTrashContents ? (\n                            <TrashedTasks\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : (\n                            <TaskList\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        )}\n                    </Sidebar>\n\n                    <PrimaryAppColumn\n                        label={\n                            isShowingTrashContents\n                                ? COPY.LABEL_FOR_TRASHED_LISTS\n                                : isShowingListManager\n                                ? COPY.LABEL_FOR_LIST_MANAGER\n                                : COPY.LABEL_FOR_TASK_DETAILS\n                        }\n                        style={{\n                            width: isShowingListManager\n                                ? columnWidths.listManager\n                                : columnWidths.taskDetails,\n                        }}\n                    >\n                        <ToolBar>\n                            <ToggleButton\n                                isActive={isShowingListManager}\n                                title={COPY.TIPS.TOGGLE_LIST_MANAGER}\n                                onClick={() =>\n                                    onChangeIsShowingListManager(\n                                        !isShowingListManager\n                                    )\n                                }\n                            >\n                                {isShowingListManager ? (\n                                    <FlexBox spacing={0.25}>\n                                        {ICONS.TASK_DETAILS}\n                                        <span>\n                                            {COPY.LABEL_FOR_TASK_DETAILS}\n                                        </span>\n                                    </FlexBox>\n                                ) : (\n                                    <FlexBox spacing={0.25}>\n                                        {ICONS.LIST_MANAGER}\n                                        <span>\n                                            {COPY.LABEL_FOR_LIST_MANAGER}\n                                        </span>\n                                    </FlexBox>\n                                )}\n                            </ToggleButton>\n                        </ToolBar>\n                        <Transition isTransitioning={isTransitioning}>\n                            {isShowingTrashContents ? (\n                                <TrashedLists\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            ) : isShowingListManager ? (\n                                <ListManager\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            ) : (\n                                <TaskDetails\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            )}\n                        </Transition>\n                    </PrimaryAppColumn>\n\n                    <Timeline\n                        appActions={appActions}\n                        appData={appData}\n                        selectedTaskId={selectedTaskId}\n                        from={TIMELINE_FROM}\n                        style={{\n                            width: columnWidths.timeline,\n                        }}\n                        tasks={incompleteTasks}\n                        to={TIMELINE_TO}\n                    />\n                </FlexBox>\n            </ThemeProvider>\n        </StyleSheetManager>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}