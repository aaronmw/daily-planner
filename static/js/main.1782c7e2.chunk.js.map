{"version":3,"sources":["components/atoms/Icon.js","components/atoms/tokens.js","components/atoms/copy/motivational-descriptors.js","components/atoms/Box.js","utils/preventWidows.js","components/atoms/FlexBox.js","components/AppColumn.js","utils/toInt.js","components/atoms/Button.js","components/atoms/GlobalStyles.js","components/atoms/Transition.js","hooks/useDrag.js","hooks/useDrop.js","utils/isInput.js","hooks/useKeyboardShortcut.js","components/ColorPicker.js","utils/getLineData.js","utils/extendBulletedLinesAtCursor.js","utils/triggerInputChange.js","hooks/useBulletedLists.js","utils/wrapSelectedText.js","hooks/useMarkdownShortcuts.js","utils/mapSelectedLines.js","utils/indentSelectedLines.js","hooks/useTabIndentation.js","components/EditInPlace.js","components/ListCard.js","components/ListManager.js","components/TaskListToggleButton.js","components/ToolBar.js","components/Sidebar.js","components/OptionBar.js","components/TaskDetails.js","utils/minutesToHeight.js","components/TaskCard.js","components/TaskList.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/Trash.js","components/TrashedCard.js","components/TrashedLists.js","components/TrashedTasks.js","hooks/usePersistentState.js","index.js"],"names":["STYLE_PREFIX_MAP","solid","regular","light","duotone","brands","Icon","_ref","iconName","_ref$styleName","styleName","otherProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","SIDEBAR_DEFAULT_WIDTH","SIDEBAR_EXTENDED_WIDTH","DURATION_OPTIONS","GRID_UNIT","FONTS","NORMAL","LINE_HEIGHT","SIZE","LARGE","LIST_CARD_HEIGHT","LIST_CARD_SPACING","LIST_CARD_WIDTH","MIN_SLOT_HEIGHT","ROUTE_TRANSITION_ANIMATION_DURATION","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","BASICALLY","CREATE_NEW_TASK","DELETE_TASK","EDIT_TASK","MOVE_BETWEEN_LISTS","SELECT_NEXT_PREV_TASK","MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE","SETTING_DURATION","TOGGLE_TASK_LIST","TOGGLE_DARK_MODE","TOGGLE_LIST_MANAGER","PRIMARY_COLORS","range","map","num","adjustHue","INITIAL_LISTS","id","color_code","sample","isArchived","label","INITIAL_SELECTED_LIST_ID","INITIAL_TASKS","keys","TIPS","tipId","icon","list_id","isComplete","notes","scheduled","scheduled_minutes","scheduled_time","INITIAL_SELECTED_TASK_ID","buildPalette","Date","now","theme","colorCode","THEME","PRIMARY","luminanceOfPrimaryColor","getLuminance","BACKGROUND","SHADED","setLightness","TEXT","TEXT_FADED","BORDER","DOTTED_LINE","TIME_LINE_PRIMARY","TIME_LINE_SECONDARY","NEUTRAL_FOREGROUND","NEUTRAL_BACKGROUND","transparentize","HIGH_CONTRAST_BACKGROUND","HIGH_CONTRAST_TEXT","readableColor","SHADOW","TASK_BORDER","TASK_BORDER_HOVER","TASK_BORDER_ACTIVE","ICON_PACKS","EMOJI","COLOR_PICKER","DARK_MODE","END_ZONE","LEFT","LIGHT_MODE","LIST_MANAGER","RIGHT","TASK_DETAILS","TIP","FONT_AWESOME","ICON_WEIGHT_OVERRIDES","palette","forEach","key","ICON_NAME","atoms_Icon","ICONS","TASK_DEFAULT","buildStyles","propName","propValue","edges","edge","join","Container","styled","div","border","margin","marginBottom","marginLeft","marginRight","marginTop","marginX","marginY","padding","paddingBottom","paddingLeft","paddingRight","paddingTop","paddingX","paddingY","isFlexible","isRounded","isScrollable","onClick","Box","forwardRef","ref","children","_ref$preventWidows","preventWidows","str","trim","replace","String","fromCharCode","preventWidowsFunction","align","direction","justify","spacing","wrapped","FlexBox","attrs","isDisabled","ContentContainer","_templateObject","ColumnHeader","AppColumn","_ref$disabledIf","disabledIf","length","some","condition","AppColumn_Container","PrimaryAppColumn","SecondaryAppColumn","isTargetedForDrop","parseInt","Button","forwardedAs","isInverted","StyledGhostButton","animation","keyframes","Button_templateObject","TracerSVGElement","svg","_templateObject2","Tracer","rect","isAnimated","isResizing","css","_templateObject3","AnimatedTracer","targetElementRef","_useState","useState","_useState2","slicedToArray","setIsResizing","_useState3","width","height","_useState4","viewBoxDimensions","setViewBoxDimensions","useEffect","timer","setInterval","current","_targetElementRef$cur","offsetWidth","offsetHeight","clearInterval","setTimeout","clearTimeout","preserveAspectRatio","viewBox","xmlns","rx","toInt","x","y","GhostButton","_ref2","_useState5","_useState6","setIsAnimated","buttonElementRef","useRef","onMouseEnter","bind","onMouseLeave","ToggleButton","_templateObject4","createGlobalStyle","Transition","isTransitioning","useDrag","dataTypes","isDragging","setIsDragging","draggable","onDragEnd","onDragStart","evt","includes","document","activeElement","tagName","toLowerCase","preventDefault","dataType","dataTransfer","setData","useDrop","dataTypeHandlers","setIsTargetedForDrop","targetedElement","droppable","onDragEnter","target","onDragOver","onDragLeave","onDrop","data","getData","payload","isNaN","parseFloat","dataTypeHandler","INPUT_TAG_NAMES","isInput","node","keyboardShortcutHandlers","standardizeSequence","sequence","replaceAll","split","sort","registerKeyboardShortcut","namespace","handler","tidiedSequence","undefined","handleAllKeyPresses","currentSequence","keysDown","ctrlKey","push","shiftKey","metaKey","uniq","buildKeySequenceFromEvent","handlers","console","log","useKeyboardShortcut","oneOrMoreSequences","scopingElementRef","Error","scopedHandler","Array","isArray","addEventListener","removeEventListener","ColorPicker_templateObject","StyledWindowShader","ColorPicker_templateObject2","WindowShader","ReactDOM","createPortal","body","StyledColorPaletteContainer","ColorPaletteContainer","ColorChip","ColorPicker_templateObject3","_ref3","onPickColor","isPickingColor","setIsPickingColor","ColorPicker_Container","Fragment","color","style","backgroundColor","ColorPicker_templateObject4","getLineData","text","selectionStart","selectionEnd","lines","allTextBeforeSelection","substring","allTextAfterSelection","linesBeforeSelection","indexOf","slice","linesAfterSelection","indexOfFirstSelectedLine","relativeCursorPosition","partialLineBeforeSelection","linesWithinSelection","allTextWithinSelection","lineData","line","lineIndex","indexOfFirstCharacter","selectionData","extendBulletedListAtCursor","bulletCharacters","returnObj","newText","newCursorPosition","bulletMatcher","RegExp","lineStartsWithBullet","test","whiteSpaceAndBullet","match","charactersToInsert","inputTypes","window","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","triggerInputChange","value","__proto__","constructor","setValue","getOwnPropertyDescriptor","set","event","Event","bubbles","call","dispatchEvent","useBulletedLists","elementRef","targetElement","_extendBulletedListAt","wrapSelectedText","insertAfter","insertBefore","mustHaveSelection","wrapAtAnyCursorLocation","newSelectionStart","newSelectionEnd","hasSelectedText","somethingRightOfCursor","somethingLeftOfCursor","KEY_MAP","(","otherKeys","[","`","~","'","\"",">","b","i","sequencesFromKeyMap","keyName","useMarkdownShortcuts","keyMap","_wrapSelectedText","mapSelectedLines","modifier","_getLineData","modifiedSelectedLines","index","indentSelectedLines","tabCharacter","outdent","firstTabCharacter","canOutdentLine","hasTabBeforeCursor","useTabIndentation","_indentSelectedLines","isEditable","isEditing","tracerColor","StyledTextarea","textarea","Canvas","isEmpty","memo","_ref$canvasStyles","canvasStyles","_ref$doubleClickToEdi","doubleClickToEdit","_ref$isEditable","_ref$isMultiLine","isMultiLine","_ref$isRemotelyActiva","isRemotelyActivated","_ref$placeholder","placeholder","_ref$render","render","_ref$tracerColor","_ref$value","_ref$onSave","onSave","setIsEditing","bufferedValue","setBufferedValue","measuringElementHeight","setMeasuringElementHeight","containerElementRef","inputRef","measuringElementRef","isSingleLine","select","focus","el","handleClick","useCallback","handleBlur","EditInPlace_Container","tabIndex","onDoubleClick","objectSpread2","position","pointerEvents","opacity","whiteSpace","disabled","rows","onBlur","onChange","isActive","GhostListCard","ListCard_templateObject","ListCardContainer","ListCard","appActions","appData","listId","onUpdateList","onUpdateTask","isCreatingList","lists","selectedListId","tasks","list","find","listPalette","tasksInList","filter","task","listCardElementRef","_useDrag","list-id","dragProps","_useDrop","task-id","taskId","targetListId","currentTarget","dataset","dropProps","triggerClick","click","styled_components_browser_esm","ListCard_Container","data-list-id","title","components_EditInPlace","alignSelf","flexGrow","flexShrink","newLabel","fontSize","components_ColorPicker","ListManager","onCreateList","onSelectList","CREATE_LIST_LABEL","components_ListCard","TaskListToggleButton","isSidebarOpen","onChangeIsSidebarOpen","ToolBar","isCollapsed","Sidebar","onChangeTheme","isShowingTrashContents","isTaskListForcedOpen","setIsTaskListForcedOpen","selectedList","sidebarDropProps","LABEL_FOR_TRASHED_TASKS","components_ToolBar","components_TaskListToggleButton","OptionButton","isSelected","OptionBar","options","_ref$renderOption","renderOption","option","_ref$renderSelectedOp","renderSelectedOption","selectedOption","optionIndex","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","role","TaskDetails_templateObject2","DurationOptionBar","TaskDetails","isCreatingTask","selectedTaskId","activeTask","handleUpdateTask","field","[object Object]","handleSaveDuration","newDuration","handleSaveIcon","newNotes","handleSaveLabel","handleSaveNotes","EMPTY_LABEL","EMPTY_NOTES","rawNotes","dangerouslySetInnerHTML","__html","marked","bottom","left","overflow","right","top","minutes","duration","minutesToHeight","CardLabel","isMouseOver","Math","min","CardIcon","TaskCardContainer","TaskCard_templateObject","setIsMouseOver","onImmediatelySelectTask","onTransitionToTask","isShowingListManager","listColorCode","cardPalette","toggleIsMouseOver","TaskCard_Container","data-task-id","onChangeTaskPosition","onCreateTask","incompleteTasks","unscheduledTasks","droppedOnTaskId","droppedOnTaskIndex","findIndex","taskCardDropProps","CREATE_TASK_LABEL","components_TaskCard","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","strToHoursAndMinutes","_strToHoursAndMinutes2","newTime","floor","minutesToTime","TimelineDropZone","totalMinutes","TimelineDropZone_Container","LABEL_FOR_TIMELINE","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","from","to","onClickTask","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","fromMinutes","isDraggingTask","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","getHours","getMinutes","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","DROP_ZONE_SIZE","pulsingAnimation","Trash_templateObject","AnimatedContainer","Trash_templateObject2","TrashDropZone","TrashIconContainer","Trash","onChangeIsShowingTrashContents","deleteTask","firstUnarchivedList","TrashedCard_templateObject2","random","minOpacity","translationDistance","TrashedCard_templateObject","RestoreButton","TrashedCard","restoreButtonTitle","onRestore","TrashedCard_Container","deletedLists","hasDeletedLists","handleRestoreList","EMPTY_TRASHED_LISTS","components_TrashedCard","LABEL_FOR_RESTORING_LIST","deletedTasks","hasDeletedTasks","handleRestoreTask","EMPTY_TRASHED_TASKS","LABEL_FOR_RESTORING_TASK","usePersistentState","initialState","state","setState","savedState","localStorage","getItem","JSON","parse","setItem","stringify","withPreventDefault","func","e","keyboardShortcutNamespace","App","_usePersistentState","_usePersistentState2","isShowingSidebar","setIsShowingSidebar","_usePersistentState3","_usePersistentState4","setLists","_usePersistentState5","_usePersistentState6","setSelectedListId","_usePersistentState7","_usePersistentState8","setIsShowingListManager","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","setSelectedTaskId","_usePersistentState13","_usePersistentState14","themeName","setThemeName","setIsCreatingList","setIsCreatingTask","setIsDraggingTask","_useState7","_useState8","setIsShowingTrashContents","_useState9","_useState10","setIsTransitioning","unarchivedLists","useMemo","sortBy","currentListIndex","primaryColorCode","handleDragOver","handleDragEnd","overrides","newListId","randomColorCode","currentLists","MOTIVATIONAL_DESCRIPTORS","NEW_LIST_LABEL","updates","prevLists","firstTaskIdInList","querySelector","prevTasks","newTaskId","currentTasks","NEW_TASK_LABEL","NEW_TASK_NOTES","onSelectTask","selectTaskByRelativeIndex","relativeIndex","numTasksInList","indexOfCurrentTask","taskAtRelativeIndex","abs","selectListByRelativeIndex","numLists","totalSteps","listAtRelativeIndex","selectByRelativeIndex","isVertical","isListCard","transition","callback","onChangeIsShowingListManager","newIsShowingListManager","firstUnarchivedTask","newIndex","tasksMinusTarget","moveTaskToTimeline","moveTaskToTaskList","setTaskDuration","toggleTaskListVisibility","toggleDarkMode","toggleIsEditingCurrentTask","toggleIsShowingListManager","createNewTask","deleteCurrentTask","goBack","desiredDurationIndex","Number","columnWidths","sidebar","listManager","taskDetails","timeline","disableVendorPrefixes","GlobalStyles","components_Trash","poop","components_Sidebar","components_TrashedTasks","components_TaskList","LABEL_FOR_TRASHED_LISTS","LABEL_FOR_LIST_MANAGER","LABEL_FOR_TASK_DETAILS","atoms_Transition","components_TrashedLists","components_ListManager","components_TaskDetails","components_Timeline","rootElement","getElementById"],"mappings":"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","file":"static/js/main.1782c7e2.chunk.js","sourcesContent":["import React from 'react';\n\nconst STYLE_PREFIX_MAP = {\n    solid: 'fas',\n    regular: 'far',\n    light: 'fal',\n    duotone: 'fad',\n    brands: 'fab',\n};\n\nconst Icon = ({ iconName, styleName = 'solid', ...otherProps }) => (\n    <i\n        className={`${STYLE_PREFIX_MAP[styleName]} fa-${iconName}`}\n        {...otherProps}\n    />\n);\n\nexport default Icon;\n","import range from 'lodash/range';\nimport sample from 'lodash/sample';\nimport {\n    adjustHue,\n    getLuminance,\n    readableColor,\n    setLightness,\n    transparentize,\n} from 'polished';\nimport React from 'react';\nimport MOTIVATIONAL_DESCRIPTORS from './copy/motivational-descriptors';\nimport Icon from './Icon';\n\nconst SIDEBAR_DEFAULT_WIDTH = '30vw';\nconst SIDEBAR_EXTENDED_WIDTH = '40vw';\nconst BORDER_RADIUS = '3px';\nconst BORDER_WIDTH = '1px';\nconst BULLET_SIZE = '10px';\nconst DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nconst GRID_UNIT = '25px';\nconst FONTS = {\n    NORMAL: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.5)` },\n    LARGE: { LINE_HEIGHT: '1.4em', SIZE: `calc(${GRID_UNIT} * 0.75)` },\n};\nconst HOURS_PER_SCREEN = 10;\nconst LIST_CARD_HEIGHT = `calc(${GRID_UNIT} * 8)`;\nconst LIST_CARD_SPACING = `calc(${GRID_UNIT} * 0.5)`;\nconst LIST_CARD_WIDTH = `calc((100% - (${LIST_CARD_SPACING} * 2)) / 3)`;\nconst MIN_SLOT_HEIGHT = GRID_UNIT;\nconst ROUTE_TRANSITION_ANIMATION_DURATION = 250;\nconst TIMELINE_FROM = '6:00';\nconst TIMELINE_TO = '30:00';\nconst UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.MOTIVATIONAL_DESCRIPTORS = MOTIVATIONAL_DESCRIPTORS;\nCOPY.EMPTY_LABEL = '...label?';\nCOPY.EMPTY_NOTES = '...notes?';\nCOPY.EMPTY_TRASHED_LISTS = 'No Trashed Lists';\nCOPY.EMPTY_TRASHED_TASKS = 'No Trashed Tasks';\nCOPY.LABEL_FOR_LIST_MANAGER = 'Switch Lists';\nCOPY.LABEL_FOR_RESTORING_LIST = 'Restore this List';\nCOPY.LABEL_FOR_RESTORING_TASK = 'Restore this Task';\nCOPY.LABEL_FOR_TASK_DETAILS = 'Back to Task';\nCOPY.LABEL_FOR_TIMELINE = \"Today's Schedule\";\nCOPY.LABEL_FOR_TRASHED_LISTS = 'Trashed Lists';\nCOPY.LABEL_FOR_TRASHED_TASKS = 'Trashed Tasks';\nCOPY.CREATE_LIST_LABEL = 'Create List';\nCOPY.CREATE_TASK_LABEL = 'Create Task';\nCOPY.NEW_LIST_LABEL = 'New List';\nCOPY.NEW_TASK_LABEL = `New Task`;\nCOPY.NEW_TASK_NOTES = '';\nCOPY.TIPS = {\n    BASICALLY:\n        'Make lists of tasks. Every day, schedule your most important ones',\n    CREATE_NEW_TASK: 'Press [N] to create a [N]ew task in the current list',\n    DELETE_TASK: 'Press [T] to move the selected task to the [T]rash',\n    EDIT_TASK: 'Press [E] to edit the selected task',\n    MOVE_BETWEEN_LISTS:\n        'Press [⌘]+[SHIFT]+[LEFT or RIGHT] to move between your lists',\n    SELECT_NEXT_PREV_TASK:\n        'Press [UP] or [DOWN] to select the previous and next unscheduled tasks in the active list',\n    MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE:\n        'Press [⌘]+[LEFT or RIGHT] to move the selected task to the TaskList or Timeline, respectively',\n    SETTING_DURATION:\n        'Press keys [1] to [6] to quickly adjust your time estimate for the selected task',\n    TOGGLE_TASK_LIST:\n        'Press [B] to show / hide the side[B]ar of unscheduled tasks',\n    TOGGLE_DARK_MODE: 'Press [D] to toggle [D]ark Mode',\n    TOGGLE_LIST_MANAGER: 'Press [L] to see your [L]ists',\n};\n\nexport { COPY };\n\nconst PRIMARY_COLORS = [];\n\nconst NUM_COLORS = 10;\nrange(NUM_COLORS).map(\n    num =>\n        (PRIMARY_COLORS[num] = adjustHue((360 / NUM_COLORS) * num, '#D72127'))\n);\n\nconst INITIAL_LISTS = [\n    {\n        id: 1,\n        color_code: sample(PRIMARY_COLORS),\n        isArchived: false,\n        label: 'User Manual',\n    },\n    // ...PRIMARY_COLORS.map((primaryColor, index) => ({\n    //     id: index + 2,\n    //     color_code: primaryColor,\n    //     isArchived: false,\n    //     label: primaryColor,\n    // })),\n];\nconst INITIAL_SELECTED_LIST_ID = (INITIAL_LISTS[0] || {}).id;\n\nconst INITIAL_TASKS = Object.keys(COPY.TIPS).map(tipId => {\n    const label = COPY.TIPS[tipId];\n\n    return {\n        icon: '☝️',\n        id: tipId,\n        list_id: INITIAL_SELECTED_LIST_ID,\n        label: label,\n        isComplete: false,\n        notes: '',\n        scheduled: false,\n        scheduled_minutes: 30,\n        scheduled_time: '9:00',\n    };\n});\n\nconst INITIAL_SELECTED_TASK_ID = (INITIAL_TASKS[0] || {}).id;\n\nconst DEFAULT_LIST_PROPS = {\n    id: Date.now(),\n    color_code: '#FF0000',\n    isArchived: false,\n    label: 'New List',\n};\n\nconst buildPalette = (theme = 'LIGHT', colorCode = '#FF0000') => {\n    const THEME = {};\n\n    THEME.PRIMARY = colorCode;\n\n    const luminanceOfPrimaryColor = getLuminance(THEME.PRIMARY);\n\n    if (theme === 'DARK') {\n        THEME.BACKGROUND = '#000000';\n        THEME.SHADED = setLightness(0.1, THEME.PRIMARY);\n        THEME.TEXT = setLightness(0.95, THEME.PRIMARY);\n        THEME.TEXT_FADED = setLightness(0.75, THEME.PRIMARY);\n        THEME.BORDER = setLightness(0.2, THEME.PRIMARY);\n        THEME.DOTTED_LINE = setLightness(0.8, THEME.PRIMARY);\n        THEME.TIME_LINE_PRIMARY = THEME.TEXT_FADED;\n        THEME.TIME_LINE_SECONDARY = THEME.TEXT_FADED;\n        THEME.NEUTRAL_FOREGROUND = '#ffffff';\n        THEME.NEUTRAL_BACKGROUND = '#000000';\n    }\n\n    if (theme === 'LIGHT') {\n        THEME.PRIMARY = setLightness(\n            luminanceOfPrimaryColor < 0.5 ? 0.6 : 0.4,\n            THEME.PRIMARY\n        );\n\n        THEME.BACKGROUND = '#ffffff';\n        THEME.SHADED = setLightness(0.975, THEME.PRIMARY);\n        THEME.TEXT = setLightness(0.05, THEME.PRIMARY);\n        THEME.TEXT_FADED = setLightness(0.4, THEME.PRIMARY);\n        THEME.BORDER = setLightness(\n            luminanceOfPrimaryColor < 0.5 ? 0.85 : 0.6,\n            THEME.PRIMARY\n        );\n        THEME.DOTTED_LINE = setLightness(\n            luminanceOfPrimaryColor < 0.5 ? 0.8 : 0.45,\n            THEME.PRIMARY\n        );\n        THEME.TIME_LINE_PRIMARY = transparentize(0.5, THEME.TEXT_FADED);\n        THEME.TIME_LINE_SECONDARY = transparentize(0.5, THEME.TEXT_FADED);\n        THEME.NEUTRAL_FOREGROUND = '#000000';\n        THEME.NEUTRAL_BACKGROUND = '#ffffff';\n    }\n\n    THEME.HIGH_CONTRAST_BACKGROUND = setLightness(\n        // luminanceOfPrimaryColor < 0.5 ? 0.75 : 0.65,\n        0.7,\n        THEME.PRIMARY\n    );\n    THEME.HIGH_CONTRAST_TEXT = readableColor(THEME.HIGH_CONTRAST_BACKGROUND);\n    THEME.SHADOW = transparentize(0.9, '#000000');\n    THEME.TASK_BORDER = transparentize(0.5, THEME.PRIMARY);\n    THEME.TASK_BORDER_HOVER = transparentize(0.5, THEME.PRIMARY);\n    THEME.TASK_BORDER_ACTIVE = THEME.PRIMARY;\n\n    return THEME;\n};\n\nconst ICON_PACKS = {\n    EMOJI: {\n        COLOR_PICKER: '🎨',\n        DARK_MODE: '🌚',\n        END_ZONE: '🗑',\n        LEFT: '👈',\n        LIGHT_MODE: '🌞',\n        LIST_MANAGER: '📚',\n        RIGHT: '👉',\n        TASK_DETAILS: '📌',\n        TIP: '☝️',\n    },\n    FONT_AWESOME: {\n        COLOR_PICKER: 'palette',\n        DARK_MODE: 'moon-stars',\n        END_ZONE: 'trash-alt',\n        LEFT: 'long-arrow-left',\n        LIGHT_MODE: 'sun',\n        LIST_MANAGER: 'book',\n        RIGHT: 'long-arrow-right',\n        TASK_DETAILS: 'thumbtack',\n        TIP: 'gem',\n    },\n};\n\nconst ICON_WEIGHT_OVERRIDES = {\n    palette: 'light',\n};\n\nObject.keys(ICON_PACKS.FONT_AWESOME).forEach(key => {\n    const ICON_NAME = ICON_PACKS.FONT_AWESOME[key];\n    ICON_PACKS.FONT_AWESOME[key] = (\n        <Icon\n            iconName={ICON_NAME}\n            styleName={ICON_WEIGHT_OVERRIDES[ICON_NAME] || 'solid'}\n        />\n    );\n});\n\nconst ICONS = ICON_PACKS.FONT_AWESOME;\n\nICONS.TASK_DEFAULT = '📌';\n\nexport {\n    BORDER_RADIUS,\n    BORDER_WIDTH,\n    buildPalette,\n    BULLET_SIZE,\n    DEFAULT_LIST_PROPS,\n    DURATION_OPTIONS,\n    FONTS,\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    MIN_SLOT_HEIGHT,\n    PRIMARY_COLORS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    SIDEBAR_DEFAULT_WIDTH,\n    SIDEBAR_EXTENDED_WIDTH,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n    UNIFIED_TRANSITION,\n};\n","export default [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\n","import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { BORDER_RADIUS, GRID_UNIT } from './tokens';\nimport preventWidowsFunction from '../../utils/preventWidows';\n\nconst buildStyles = (propName = '', propValue = null, edges = []) => {\n    if (propValue !== null) {\n        return edges\n            .map(\n                edge =>\n                    `${propName}-${edge}: calc(${propValue} * ${GRID_UNIT});`\n            )\n            .join('');\n    }\n\n    return '';\n};\n\nconst Container = styled.div(\n    ({\n        border = false,\n        margin = null,\n        marginBottom = null,\n        marginLeft = null,\n        marginRight = null,\n        marginTop = null,\n        marginX = null,\n        marginY = null,\n        padding = null,\n        paddingBottom = null,\n        paddingLeft = null,\n        paddingRight = null,\n        paddingTop = null,\n        paddingX = null,\n        paddingY = null,\n        theme,\n        isFlexible = false,\n        isRounded = false,\n        isScrollable = false,\n        onClick = null,\n    }) => `\n        align-self: stretch;\n        border-radius: ${isRounded ? BORDER_RADIUS : ''};\n        box-shadow: ${border ? `0 0 0 1px ${theme.BORDER}` : 'none'};\n        cursor: ${onClick ? 'pointer' : ''};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        overflow: ${isScrollable ? 'auto' : ''};\n\n        ${[\n            buildStyles('margin', margin, ['top', 'right', 'bottom', 'left']),\n            buildStyles('margin', marginBottom, ['bottom']),\n            buildStyles('margin', marginLeft, ['left']),\n            buildStyles('margin', marginRight, ['right']),\n            buildStyles('margin', marginTop, ['top']),\n            buildStyles('margin', marginX, ['right', 'left']),\n            buildStyles('margin', marginY, ['top', 'bottom']),\n            buildStyles('padding', padding, ['top', 'right', 'bottom', 'left']),\n            buildStyles('padding', paddingBottom, ['bottom']),\n            buildStyles('padding', paddingLeft, ['left']),\n            buildStyles('padding', paddingRight, ['right']),\n            buildStyles('padding', paddingTop, ['top']),\n            buildStyles('padding', paddingX, ['right', 'left']),\n            buildStyles('padding', paddingY, ['top', 'bottom']),\n        ].join('')}\n    `\n);\n\nconst Box = forwardRef(\n    ({ children, preventWidows = false, ...otherProps }, ref) => (\n        <Container ref={ref} {...otherProps}>\n            {preventWidows ? preventWidowsFunction(children) : children}\n        </Container>\n    )\n);\n\nexport default Box;\n","export default str => {\n    return typeof str === 'string'\n        ? str.trim().replace(/\\s([^ ]*)$/m, `${String.fromCharCode(160)}$1`)\n        : str;\n};\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        justify = 'stretch',\n        spacing = 0,\n        wrapped = false,\n    }) => `\n        align-items: ${align};\n        align-content: ${wrapped ? align : ''};\n        display: flex;\n        flex-direction: ${direction};\n        flex-wrap: ${wrapped ? 'wrap' : 'nowrap'};\n        justify-content: ${justify};\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { BORDER_WIDTH, GRID_UNIT, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isDisabled, theme }) => `\n        position: relative;\n        \n        &:before {\n            background-color: ${theme.BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isDisabled ? 0.25 : 0};\n            pointer-events: ${isDisabled ? 'all' : 'none'};\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 200;\n        }\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})`\n    height: calc(100vh - ${GRID_UNIT});\n    overflow: auto;\n    position: relative;\n    ${UNIFIED_TRANSITION};\n\n    & > * {\n        align-self: stretch;\n    }\n`;\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${theme.BACKGROUND};\n        color: ${theme.TEXT_FADED};\n        border-bottom:\n            ${BORDER_WIDTH} solid ${theme.BORDER};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({\n    children,\n    disabledIf = [false],\n    label,\n    ...otherProps\n}) => {\n    const isDisabled =\n        disabledIf.length && disabledIf.some(condition => condition === true);\n\n    return (\n        <Container isDisabled={isDisabled}>\n            <ColumnHeader>{label}</ColumnHeader>\n            <ContentContainer {...otherProps}>{children}</ContentContainer>\n        </Container>\n    );\n};\n\nexport const PrimaryAppColumn = styled(AppColumn)(\n    ({ theme }) => `\n        box-shadow: 0 0 10px 10px ${theme.SHADOW};\n        border-left: ${BORDER_WIDTH} solid ${theme.BORDER};\n        border-right: \n            ${BORDER_WIDTH} solid ${theme.BORDER};\n        overflow: unset;\n        z-index: 11;\n    `\n);\n\nexport const SecondaryAppColumn = styled(AppColumn)(\n    ({ isTargetedForDrop, theme }) => `\n        background-color: ${theme.SHADED};\n        flex-grow: 1;\n        overflow: auto;\n        position: relative;\n        \n        &:before {\n            box-shadow: ${\n                isTargetedForDrop\n                    ? `0 0 0 5px ${theme.TASK_BORDER_HOVER} inset`\n                    : 'initial'\n            };\n            bottom: 0;\n            content: '';\n            left: 0;\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            z-index: 1000;\n        }\n    `\n);\n\nexport default AppColumn;\n","export default str => parseInt(str, 10);\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport toInt from '../../utils/toInt';\nimport FlexBox from './FlexBox';\nimport { BORDER_RADIUS, BORDER_WIDTH, UNIFIED_TRANSITION } from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    forwardedAs: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ isInverted = false, theme }) => `\n        align-self: unset;\n        background-color: ${\n            theme[isInverted ? 'BACKGROUND' : 'HIGH_CONTRAST_BACKGROUND']\n        };\n        border: 2px solid transparent;\n        border-radius: ${BORDER_RADIUS};\n        color: ${theme[isInverted ? 'TEXT_FADED' : 'HIGH_CONTRAST_TEXT']};\n        cursor: pointer;\n        transform: translateY(0);\n        ${UNIFIED_TRANSITION};\n        transition-property: border, color;\n        \n        &:focus,\n        &:hover {\n            border-color: ${theme[isInverted ? 'PRIMARY' : 'BACKGROUND']};\n        }\n        &:active {\n            transform: translateY(2px);\n        }\n    `\n);\n\nconst StyledGhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        color: ${theme.TEXT_FADED};\n        position: relative;\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            color: ${theme.TEXT};\n            border-color: transparent;\n        }\n    `\n);\n\nconst animation = keyframes`\n    from {\n        stroke-dashoffset: 0;\n    }\n    to {\n        stroke-dashoffset: 12px;\n    }\n`;\n\nconst TracerSVGElement = styled.svg`\n    overflow: visible;\n    position: absolute;\n`;\n\nconst Tracer = styled.rect(\n    ({ isAnimated, isResizing, theme }) => css`\n        animation-name: ${animation};\n        animation-duration: 0.5s;\n        animation-direction: normal;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-play-state: ${isAnimated ? 'running' : 'paused'};\n        fill: none;\n        stroke: ${isResizing\n            ? 'transparent'\n            : theme[isAnimated ? 'BORDER' : 'DOTTED_LINE']};\n        stroke-width: calc(${BORDER_WIDTH} * 2);\n        stroke-dasharray: 6px, 6px;\n        position: relative;\n        z-index: 1000;\n    `\n);\n\nconst AnimatedTracer = ({ isAnimated, targetElementRef, ...otherProps }) => {\n    const [isResizing, setIsResizing] = useState(true);\n    const [viewBoxDimensions, setViewBoxDimensions] = useState({\n        width: 0,\n        height: 0,\n    });\n\n    useEffect(() => {\n        const measureTracer = () => {\n            if (targetElementRef.current) {\n                const { offsetWidth, offsetHeight } = targetElementRef.current;\n                const { width, height } = viewBoxDimensions;\n\n                if (offsetWidth !== width || offsetHeight !== height) {\n                    setViewBoxDimensions({\n                        width: offsetWidth,\n                        height: offsetHeight,\n                    });\n                }\n            }\n        };\n\n        const timer = setInterval(measureTracer, 100);\n\n        return () => clearInterval(timer);\n    }, [targetElementRef, viewBoxDimensions]);\n\n    useEffect(() => {\n        setIsResizing(true);\n\n        const onComplete = () => setIsResizing(false);\n\n        const timer = setTimeout(onComplete, 100);\n\n        return () => clearTimeout(timer);\n    }, [viewBoxDimensions]);\n\n    return (\n        <TracerSVGElement\n            preserveAspectRatio=\"none\"\n            viewBox={`0 0 ${viewBoxDimensions.width} ${viewBoxDimensions.height}`}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            {...otherProps}\n        >\n            <Tracer\n                width={viewBoxDimensions.width}\n                height={viewBoxDimensions.height}\n                isAnimated={isAnimated}\n                isResizing={isResizing}\n                rx={toInt(BORDER_RADIUS) * 2}\n                x={0}\n                y={0}\n            />\n        </TracerSVGElement>\n    );\n};\n\nexport const GhostButton = ({ children, ...otherProps }) => {\n    const [isAnimated, setIsAnimated] = useState(false);\n\n    const buttonElementRef = useRef(null);\n\n    return (\n        <StyledGhostButton\n            ref={buttonElementRef}\n            onMouseEnter={setIsAnimated.bind(null, true)}\n            onMouseLeave={setIsAnimated.bind(null, false)}\n            {...otherProps}\n        >\n            <AnimatedTracer\n                isAnimated={isAnimated}\n                targetElementRef={buttonElementRef}\n            />\n            {children}\n        </StyledGhostButton>\n    );\n};\n\nexport const ToggleButton = styled(Button).attrs(({ isInverted }) => ({\n    isInverted: !isInverted,\n}))``;\n\nexport default Button;\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, FONTS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: ${FONTS.NORMAL.LINE_HEIGHT};\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${theme.BACKGROUND};\n            color: ${theme.TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: ${FONTS.NORMAL.SIZE};\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        ::placeholder {\n            color: ${theme.PRIMARY};\n            opacity: 1;\n        }\n        ::selection {\n            color: ${theme.HIGH_CONTRAST_TEXT};\n            background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        }\n\n        .markdown {\n            & > * + *,\n            ul > *,\n            ol > * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n\n            h1 {\n                color: ${theme.TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${theme.TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n            }\n\n            * + h1 {\n                margin-top: ${GRID_UNIT};\n            }\n\n            blockquote {\n                border-left: 2px dotted ${theme.TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n\n            code {\n                color: ${theme.PRIMARY};\n                background-color: ${theme.SHADED};\n                display: inline-block;\n                border-radius: 4px;\n                padding: 0 calc(${GRID_UNIT} * 0.25);\n            }\n\n            del {\n                color: ${theme.TEXT_FADED};\n            }\n\n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n\n                // Bullet, centered by line height\n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: calc((${\n                        FONTS.NORMAL.LINE_HEIGHT\n                    } / 2) - (${BULLET_SIZE} / 2));\n                    left: 0;\n                    border: 2px dotted ${theme.TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n\n                li:after {\n                    content: '';\n                    position: absolute;\n                    top: calc(${GRID_UNIT} * -0.5);\n                    bottom: 0;\n                    left: calc((${GRID_UNIT} * -1) + (${BULLET_SIZE} / 2) - 1px);\n                    border-left: 2px solid ${theme.BORDER};\n                    opacity: 0.5;\n                }\n            }\n        }\n    `\n);\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport {\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    UNIFIED_TRANSITION,\n} from './tokens';\n\nconst Transition = styled(FlexBox).attrs({\n    align: 'stretch',\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ isTransitioning }) => `\n        opacity: ${isTransitioning ? 0 : 1};\n        ${UNIFIED_TRANSITION};\n        transition-duration: ${ROUTE_TRANSITION_ANIMATION_DURATION / 2}ms;\n    `\n);\n\nexport default Transition;\n","import { useState } from 'react';\n\nconst useDrag = dataTypes => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        if (\n            ['input', 'textarea'].includes(\n                document.activeElement.tagName.toLowerCase()\n            )\n        ) {\n            evt.preventDefault();\n            return;\n        }\n\n        Object.keys(dataTypes).map(dataType => {\n            evt.dataTransfer.setData(dataType, dataTypes[dataType]);\n            return dataType;\n        });\n\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n\nexport default useDrag;\n","import { useRef, useState } from 'react';\n\nconst useDrop = dataTypeHandlers => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        Object.keys(dataTypeHandlers).map(dataType => {\n            const data = evt.dataTransfer.getData(dataType);\n            const payload =\n                data.length === 0\n                    ? null\n                    : isNaN(data)\n                    ? data\n                    : parseFloat(data);\n\n            if (payload !== null) {\n                const dataTypeHandler = dataTypeHandlers[dataType];\n                dataTypeHandler(payload, evt);\n            }\n\n            return dataType;\n        });\n\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","const INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nexport default isInput;\n","import { useEffect } from 'react';\nimport uniq from 'lodash/uniq';\nimport isInput from '../utils/isInput';\n\nconst keyboardShortcutHandlers = {};\n\nconst standardizeSequence = sequence =>\n    String(sequence)\n        .toLowerCase()\n        .replaceAll(' ', '')\n        .split('+')\n        .sort()\n        .join('+');\n\nconst buildKeySequenceFromEvent = evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    return standardizeSequence(uniq(keysDown).join('+'));\n};\n\nconst registerKeyboardShortcut = (namespace, sequence, handler) => {\n    const tidiedSequence = standardizeSequence(sequence);\n\n    if (keyboardShortcutHandlers[tidiedSequence] === undefined) {\n        keyboardShortcutHandlers[tidiedSequence] = {};\n    }\n\n    keyboardShortcutHandlers[tidiedSequence][namespace] = handler;\n};\n\nconst handleAllKeyPresses = evt => {\n    const currentSequence = buildKeySequenceFromEvent(evt);\n    const handlers = keyboardShortcutHandlers[currentSequence] || {};\n\n    console.log(handlers);\n\n    Object.keys(handlers).forEach(namespace => {\n        handlers[namespace](evt);\n    });\n};\n\nconst useKeyboardShortcut = (\n    namespace,\n    oneOrMoreSequences,\n    handler,\n    scopingElementRef = {}\n) => {\n    if (!namespace.length) {\n        throw new Error(\n            'A namespace must be provided to register keyboard shortcuts'\n        );\n    }\n\n    useEffect(() => {\n        const scopedHandler = scopingElementRef.current\n            ? evt => {\n                  if (document.activeElement === scopingElementRef.current) {\n                      return handler(evt);\n                  }\n              }\n            : evt => {\n                  if (!isInput(evt.target)) {\n                      return handler(evt);\n                  }\n              };\n\n        if (Array.isArray(oneOrMoreSequences)) {\n            oneOrMoreSequences.forEach(sequence => {\n                registerKeyboardShortcut(namespace, sequence, scopedHandler);\n            });\n        } else {\n            registerKeyboardShortcut(\n                namespace,\n                oneOrMoreSequences,\n                scopedHandler\n            );\n        }\n\n        document.addEventListener('keydown', handleAllKeyPresses);\n\n        return () => {\n            document.removeEventListener('keydown', handleAllKeyPresses);\n        };\n    }, [handler, namespace, oneOrMoreSequences, scopingElementRef]);\n};\n\nexport default useKeyboardShortcut;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport Box from './atoms/Box';\nimport { ToggleButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    GRID_UNIT,\n    ICONS,\n    PRIMARY_COLORS,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'flex-end',\n    paddingX: 0.25,\n    paddingY: 0.25,\n})``;\n\nconst StyledWindowShader = styled.div`\n    bottom: 0;\n    left: 0;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1099;\n`;\n\nconst WindowShader = ({ children, ...otherProps }) => {\n    return ReactDOM.createPortal(\n        <StyledWindowShader {...otherProps}>{children}</StyledWindowShader>,\n        document.body\n    );\n};\n\nconst StyledColorPaletteContainer = styled(FlexBox).attrs({\n    isRounded: true,\n    paddingX: 0.5,\n    paddingY: 0.5,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${theme.BACKGROUND};\n        box-shadow: 0 0 10px 10px ${theme.SHADOW};\n        position: fixed;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        z-index: 1100;\n\n        &:before {\n            background-color: ${theme.SHADOW};\n            position: fixed;\n            width: 100vw;\n            height: 100vh;\n        }\n    `\n);\n\nconst ColorPaletteContainer = ({ children, ...otherProps }) => {\n    return ReactDOM.createPortal(\n        <StyledColorPaletteContainer {...otherProps}>\n            {children}\n        </StyledColorPaletteContainer>,\n        document.body\n    );\n};\n\nconst ColorChip = styled(Box).attrs({ isFlexible: true })`\n    border-radius: ${BORDER_RADIUS};\n    height: calc(${GRID_UNIT} * 2);\n    transform: scale(1);\n    width: calc(${GRID_UNIT} * 2);\n    ${UNIFIED_TRANSITION};\n\n    &:hover {\n        transform: scale(1.1);\n    }\n`;\n\nconst ColorPicker = ({ palette, onPickColor, ...otherProps }) => {\n    const [isPickingColor, setIsPickingColor] = useState(false);\n\n    const showPicker = () => {\n        setIsPickingColor(true);\n    };\n\n    const hidePicker = () => {\n        setIsPickingColor(false);\n    };\n\n    return (\n        <Container {...otherProps}>\n            <ToggleButton isInverted={!isPickingColor} onClick={showPicker}>\n                {ICONS.COLOR_PICKER}\n            </ToggleButton>\n            {isPickingColor && (\n                <>\n                    <ColorPaletteContainer>\n                        {PRIMARY_COLORS.map(color => {\n                            return (\n                                <ColorChip\n                                    key={color}\n                                    style={{\n                                        backgroundColor: color,\n                                    }}\n                                    onClick={onPickColor.bind(null, color)}\n                                />\n                            );\n                        })}\n                    </ColorPaletteContainer>\n                    <WindowShader onClick={hidePicker} />\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default styled(ColorPicker)``;\n","const getLineData = ({ text, selectionStart, selectionEnd }) => {\n    const lines = text.split('\\n');\n    const allTextBeforeSelection = text.substring(0, selectionStart);\n    const allTextAfterSelection = text.substring(selectionEnd);\n    const linesBeforeSelection =\n        allTextBeforeSelection.indexOf('\\n') !== -1\n            ? allTextBeforeSelection.split('\\n').slice(0, -1)\n            : [];\n    const linesAfterSelection =\n        allTextAfterSelection.indexOf('\\n') !== -1\n            ? allTextAfterSelection.split('\\n').slice(1)\n            : [];\n    const indexOfFirstSelectedLine = linesBeforeSelection.length\n        ? linesBeforeSelection.join('\\n').length + 1\n        : 0;\n    const relativeCursorPosition = selectionStart - indexOfFirstSelectedLine;\n    const partialLineBeforeSelection = text.substring(\n        indexOfFirstSelectedLine,\n        indexOfFirstSelectedLine + relativeCursorPosition\n    );\n    const linesWithinSelection = lines.slice(\n        linesBeforeSelection.length,\n        lines.length - linesAfterSelection.length\n    );\n    const allTextWithinSelection = text.substring(selectionStart, selectionEnd);\n    const lineData = [];\n\n    lines.forEach((line, lineIndex) => {\n        const indexOfFirstCharacter =\n            lines.slice(0, lineIndex).join('\\n').length +\n            (lineIndex === 0 ? 0 : 1);\n\n        lineData[lineIndex] = {\n            line,\n            indexOfFirstCharacter,\n        };\n    });\n\n    const returnObj = {\n        lines,\n        lineData,\n        selectionData: {\n            allTextBeforeSelection,\n            allTextAfterSelection,\n            allTextWithinSelection,\n            linesAfterSelection,\n            linesBeforeSelection,\n            linesWithinSelection,\n            partialLineBeforeSelection,\n            indexOfFirstSelectedLine,\n            relativeCursorPosition,\n        },\n    };\n\n    return returnObj;\n};\n\nexport default getLineData;\n","import getLineData from './getLineData';\n\nconst extendBulletedListAtCursor = ({\n    text,\n    selectionStart,\n    selectionEnd,\n    bulletCharacters = ['*', '•', '>', '-'],\n}) => {\n    const returnObj = {\n        newText: text,\n        newCursorPosition: selectionStart,\n    };\n\n    const { selectionData } = getLineData({\n        text,\n        selectionStart,\n        selectionEnd,\n    });\n\n    const {\n        allTextBeforeSelection,\n        allTextAfterSelection,\n        linesBeforeSelection,\n        partialLineBeforeSelection,\n    } = selectionData;\n\n    const bulletMatcher = new RegExp(`^\\\\s*[${bulletCharacters.join('')}][ ]`);\n\n    const lineStartsWithBullet = bulletMatcher.test(partialLineBeforeSelection);\n\n    const whiteSpaceAndBullet = lineStartsWithBullet\n        ? partialLineBeforeSelection.match(bulletMatcher)[0]\n        : null;\n\n    const charactersToInsert = lineStartsWithBullet\n        ? partialLineBeforeSelection.match(bulletMatcher)[0]\n        : '';\n\n    const lineIsEmptyListItem =\n        partialLineBeforeSelection === whiteSpaceAndBullet &&\n        (allTextAfterSelection === '' || allTextAfterSelection[0] === '\\n');\n\n    if (lineIsEmptyListItem) {\n        returnObj.newText = `${linesBeforeSelection.join(\n            '\\n'\n        )}\\n\\n${allTextAfterSelection}`;\n\n        returnObj.newCursorPosition =\n            selectionStart - partialLineBeforeSelection.length + 1;\n    } else {\n        returnObj.newText = `${allTextBeforeSelection}\\n${charactersToInsert}${allTextAfterSelection}`;\n\n        returnObj.newCursorPosition =\n            selectionStart + charactersToInsert.length + 1;\n    }\n\n    return returnObj;\n};\n\nexport default extendBulletedListAtCursor;\n","const inputTypes = [\n    window.HTMLInputElement,\n    window.HTMLSelectElement,\n    window.HTMLTextAreaElement,\n];\n\nconst triggerInputChange = (node, value = '') => {\n    // only process the change on elements we know have a value setter in their constructor\n    if (inputTypes.indexOf(node.__proto__.constructor) > -1) {\n        const setValue = Object.getOwnPropertyDescriptor(\n            node.__proto__,\n            'value'\n        ).set;\n        const event = new Event('input', { bubbles: true });\n\n        setValue.call(node, value);\n\n        node.dispatchEvent(event);\n    }\n};\n\nexport default triggerInputChange;\n","import useKeyboardShortcut from './useKeyboardShortcut';\nimport extendBulletedListAtCursor from '../utils/extendBulletedLinesAtCursor';\nimport triggerInputChange from '../utils/triggerInputChange';\nimport isInput from '../utils/isInput';\n\nconst keyboardShortcutNamespace = 'useBulletedLists';\n\nconst useBulletedLists = (\n    elementRef,\n    bulletCharacters = ['*', '•', '>', '-']\n) => {\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        ['enter'],\n        evt => {\n            const targetElement = evt.target;\n\n            if (!isInput(evt.target)) {\n                return true;\n            }\n\n            evt.preventDefault();\n\n            const { newText, newCursorPosition } = extendBulletedListAtCursor({\n                text: targetElement.value,\n                selectionStart: targetElement.selectionStart,\n                selectionEnd: targetElement.selectionEnd,\n                bulletCharacters,\n            });\n\n            triggerInputChange(targetElement, newText);\n            targetElement.selectionStart = newCursorPosition;\n            targetElement.selectionEnd = newCursorPosition;\n        },\n        elementRef\n    );\n};\n\nexport default useBulletedLists;\n","import getLineData from './getLineData';\n\nconst wrapSelectedText = ({\n    insertAfter = '',\n    insertBefore = '',\n    mustHaveSelection = false,\n    selectionEnd,\n    selectionStart,\n    text,\n    wrapAtAnyCursorLocation = false,\n}) => {\n    const returnObj = {\n        newText: text,\n        newSelectionStart: selectionStart,\n        newSelectionEnd: selectionEnd,\n    };\n\n    const { selectionData } = getLineData({\n        text,\n        selectionStart,\n        selectionEnd,\n    });\n\n    const hasSelectedText = selectionStart !== selectionEnd;\n\n    if (mustHaveSelection && !hasSelectedText) {\n        return returnObj;\n    }\n\n    const {\n        allTextBeforeSelection,\n        allTextAfterSelection,\n        allTextWithinSelection,\n    } = selectionData;\n\n    const somethingRightOfCursor = /^\\S/.test(allTextAfterSelection);\n\n    const somethingLeftOfCursor = /\\S$/.test(allTextBeforeSelection);\n\n    if (\n        !wrapAtAnyCursorLocation &&\n        !hasSelectedText &&\n        (somethingLeftOfCursor || somethingRightOfCursor)\n    ) {\n        return returnObj;\n    } else {\n        returnObj.newText = [\n            allTextBeforeSelection,\n            insertBefore,\n            allTextWithinSelection,\n            insertAfter,\n            allTextAfterSelection,\n        ].join('');\n\n        returnObj.newSelectionStart += insertBefore.length;\n        returnObj.newSelectionEnd += insertBefore.length;\n    }\n\n    return returnObj;\n};\n\nexport default wrapSelectedText;\n","import wrapSelectedText from '../utils/wrapSelectedText';\nimport useKeyboardShortcut from './useKeyboardShortcut';\nimport isInput from '../utils/isInput';\nimport triggerInputChange from '../utils/triggerInputChange';\n\nconst KEY_MAP = {\n    '(': {\n        otherKeys: ['shift'],\n        insertBefore: '(',\n        insertAfter: ')',\n    },\n    '[': {\n        otherKeys: [],\n        insertBefore: '[',\n        insertAfter: ']',\n    },\n    '`': {\n        otherKeys: [],\n        insertBefore: '`',\n        insertAfter: '`',\n    },\n    '~': {\n        otherKeys: ['shift'],\n        insertBefore: '```\\n',\n        insertAfter: '\\n```',\n    },\n    \"'\": {\n        otherKeys: [],\n        insertBefore: \"'\",\n        insertAfter: \"'\",\n    },\n    '\"': {\n        otherKeys: ['shift'],\n        insertBefore: '\"',\n        insertAfter: '\"',\n    },\n    '>': {\n        otherKeys: ['shift'],\n        insertBefore: '> ',\n        insertAfter: '',\n    },\n    'b': {\n        otherKeys: ['cmd'],\n        insertBefore: '**',\n        insertAfter: '**',\n        wrapAtAnyCursorLocation: true,\n    },\n    'i': {\n        otherKeys: ['cmd'],\n        insertBefore: '_',\n        insertAfter: '_',\n        wrapAtAnyCursorLocation: true,\n    },\n    'x': {\n        otherKeys: ['shift'],\n        insertBefore: '~',\n        insertAfter: '~',\n        wrapAtAnyCursorLocation: true,\n    },\n};\n\nconst sequencesFromKeyMap = Object.keys(KEY_MAP).map(keyName =>\n    KEY_MAP[keyName].otherKeys.concat(keyName).join(' + ')\n);\n\nconst keyboardShortcutNamespace = 'useMarkdownShortcuts';\n\nconst useMarkdownShortcuts = elementRef => {\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        sequencesFromKeyMap,\n        evt => {\n            const targetElement = evt.target;\n\n            if (!isInput(evt.target)) {\n                return true;\n            }\n\n            const keyMap = KEY_MAP[evt.key.toLowerCase()];\n\n            const { selectionStart, selectionEnd } = targetElement;\n\n            const {\n                insertBefore,\n                insertAfter,\n                mustHaveSelection,\n                wrapAtAnyCursorLocation,\n            } = keyMap;\n\n            const text = targetElement.value;\n\n            const {\n                newText,\n                newSelectionStart,\n                newSelectionEnd,\n            } = wrapSelectedText({\n                insertAfter,\n                insertBefore,\n                mustHaveSelection,\n                selectionEnd,\n                selectionStart,\n                text,\n                wrapAtAnyCursorLocation,\n            });\n\n            if (newText !== text) {\n                evt.preventDefault();\n\n                triggerInputChange(targetElement, newText);\n                targetElement.selectionStart = newSelectionStart;\n                targetElement.selectionEnd = newSelectionEnd;\n            }\n        },\n        elementRef\n    );\n};\n\nexport default useMarkdownShortcuts;\n","import getLineData from './getLineData';\n\nconst mapSelectedLines = ({ text, selectionStart, selectionEnd, modifier }) => {\n    const { lineData, selectionData } = getLineData({\n        text,\n        selectionStart,\n        selectionEnd,\n    });\n\n    const {\n        linesAfterSelection,\n        linesBeforeSelection,\n        linesWithinSelection,\n    } = selectionData;\n\n    const modifiedSelectedLines = linesWithinSelection.map((line, index) => {\n        return modifier({\n            line,\n            index,\n            data: lineData[index],\n            selectionData,\n        });\n    });\n\n    return linesBeforeSelection\n        .concat(modifiedSelectedLines, linesAfterSelection)\n        .join('\\n');\n};\n\nexport default mapSelectedLines;\n","import mapSelectedLines from './mapSelectedLines';\n\nconst indentSelectedLines = ({\n    text,\n    selectionStart,\n    selectionEnd,\n    tabCharacter = '  ',\n    outdent = false,\n}) => {\n    const returnObj = {\n        newText: text,\n        newSelectionStart: selectionStart,\n        newSelectionEnd: selectionEnd,\n    };\n\n    const firstTabCharacter = new RegExp(`^(${tabCharacter}){1}`);\n\n    returnObj.newText = mapSelectedLines({\n        text,\n        selectionStart,\n        selectionEnd,\n        modifier: ({ index, line, selectionData }) => {\n            if (outdent) {\n                const canOutdentLine = firstTabCharacter.test(line);\n                const hasTabBeforeCursor = firstTabCharacter.test(\n                    selectionData.partialLineBeforeSelection\n                );\n\n                if (canOutdentLine) {\n                    if (index === 0 && hasTabBeforeCursor) {\n                        returnObj.newSelectionStart -= tabCharacter.length;\n                    }\n\n                    returnObj.newSelectionEnd -= tabCharacter.length;\n\n                    return line.replace(firstTabCharacter, '');\n                }\n\n                return line;\n            } else {\n                if (index === 0) {\n                    returnObj.newSelectionStart += tabCharacter.length;\n                }\n\n                returnObj.newSelectionEnd += tabCharacter.length;\n\n                return `${tabCharacter}${line}`;\n            }\n        },\n    });\n\n    return returnObj;\n};\n\nexport default indentSelectedLines;\n","import useKeyboardShortcut from './useKeyboardShortcut';\nimport indentSelectedLines from '../utils/indentSelectedLines';\nimport isInput from '../utils/isInput';\nimport triggerInputChange from '../utils/triggerInputChange';\n\nconst keyboardShortcutNamespace = 'useTabIndentation';\n\nconst useTabIndentation = (elementRef, tabCharacter = '  ') => {\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        ['tab', 'shift + tab'],\n        evt => {\n            const targetElement = evt.target;\n\n            if (!isInput(evt.target)) {\n                return true;\n            }\n\n            evt.preventDefault();\n\n            const {\n                newText,\n                newSelectionStart,\n                newSelectionEnd,\n            } = indentSelectedLines({\n                text: targetElement.value,\n                selectionStart: targetElement.selectionStart,\n                selectionEnd: targetElement.selectionEnd,\n                tabCharacter,\n                outdent: evt.shiftKey,\n            });\n\n            triggerInputChange(targetElement, newText);\n            targetElement.selectionStart = newSelectionStart;\n            targetElement.selectionEnd = newSelectionEnd;\n        },\n        elementRef\n    );\n};\n\nexport default useTabIndentation;\n","import React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport useBulletedLists from '../hooks/useBulletedLists';\nimport useKeyboardShortcut from '../hooks/useKeyboardShortcut';\nimport useMarkdownShortcuts from '../hooks/useMarkdownShortcuts';\nimport useTabIndentation from '../hooks/useTabIndentation';\nimport Box from './atoms/Box';\nimport { BORDER_RADIUS, GRID_UNIT, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditable, isEditing, theme, tracerColor }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n\n        // Tracing element\n        &:before {\n            border:\n                ${\n                    isEditing\n                        ? 'none'\n                        : `2px dashed ${tracerColor || theme.DOTTED_LINE}`\n                };\n            box-shadow:\n                ${\n                    isEditing\n                        ? `0 0 0 2px ${tracerColor || theme.PRIMARY}`\n                        : `0 0 0 0 ${tracerColor || theme.PRIMARY}`\n                };\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.25 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.25 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n        }\n\n        &:focus,\n        &:hover {\n            &:before {\n                opacity: ${isEditable ? 1 : 0};\n            }\n        }\n    `\n);\n\nconst StyledTextarea = styled.textarea(\n    ({ theme }) => `\n        display: block;\n        height: 100%;\n        width: 100%;\n\n        ::selection {\n            background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n            color: white;\n        }\n    `\n);\n\nconst Canvas = styled(Box)(\n    ({ isEmpty }) => `\n        opacity: ${isEmpty ? 0.6 : 1};\n    `\n);\n\nconst keyboardShortcutNamespace = 'edit-in-place';\n\nconst EditInPlace = ({\n    canvasStyles = {},\n    doubleClickToEdit = false,\n    isEditable = true,\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    tracerColor = null,\n    value = '',\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const containerElementRef = useRef(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = useCallback(() => {\n        if (isEditable && !isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    }, [isEditable, isEditing, setBufferedValue, setIsEditing, value]);\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [handleClick, isRemotelyActivated]);\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        ['cmd + escape', 'shift + escape'],\n        () => {\n            setBufferedValue(value);\n            setIsEditing(false);\n        },\n        inputRef\n    );\n\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        ['escape', 'cmd + enter', 'shift + enter'],\n        handleBlur,\n        inputRef\n    );\n\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'enter',\n        evt => {\n            if (evt.target === containerElementRef.current) {\n                evt.preventDefault();\n                handleClick();\n            } else if (\n                evt.target.tagName.toLowerCase() === 'textarea' &&\n                isSingleLine\n            ) {\n                evt.preventDefault();\n                onSave(bufferedValue);\n                setIsEditing(false);\n                return false;\n            }\n        },\n        inputRef\n    );\n\n    useTabIndentation(inputRef);\n\n    useBulletedLists(inputRef);\n\n    useMarkdownShortcuts(inputRef);\n\n    return (\n        <Container\n            isEditable={isEditable}\n            isEditing={isEditing}\n            ref={containerElementRef}\n            tabIndex={0}\n            tracerColor={tracerColor}\n            onClick={!doubleClickToEdit ? handleClick : null}\n            onDoubleClick={doubleClickToEdit ? handleClick : null}\n            {...otherProps}\n        >\n            <Canvas isEmpty={isEmpty} style={{ ...canvasStyles }}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <StyledTextarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                height: `${measuringElementHeight}px`,\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Canvas>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React, { useCallback, useRef } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport useKeyboardShortcut from '../hooks/useKeyboardShortcut';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    buildPalette,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    LIST_CARD_HEIGHT,\n    LIST_CARD_SPACING,\n    LIST_CARD_WIDTH,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport ColorPicker from './ColorPicker';\nimport EditInPlace from './EditInPlace';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    direction: 'column',\n    justify: 'flex-start',\n    spacing: 0.5,\n})(\n    ({ isActive, isTargetedForDrop, theme }) => `\n        background-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 2px ${isActive ? theme.SHADED : 'transparent'},\n            0 0 0 4px ${\n                isActive\n                    ? theme[\n                          isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER'\n                      ]\n                    : 'transparent'\n            };\n        color: ${theme.HIGH_CONTRAST_TEXT};\n        cursor: pointer;\n        overflow: hidden;\n        position: relative;\n        transform: scale(${isTargetedForDrop ? 1.1 : 1});\n        width: 100%;\n        height: 100%;\n        ${UNIFIED_TRANSITION};\n\n        &:hover {\n            box-shadow:\n                0 0 0 2px ${theme.SHADED},\n                0 0 0 4px ${\n                    theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER']\n                };\n        }\n\n        &:focus {\n            box-shadow:\n                0 0 0 2px ${theme.SHADED},\n                0 0 0 4px ${theme.TASK_BORDER_ACTIVE};\n        }\n\n        &:active {\n            box-shadow:\n                0 0 0 2px ${theme.SHADED},\n                0 0 0 4px ${theme.TASK_BORDER_ACTIVE};\n        }\n    `\n);\n\nexport const GhostListCard = styled(GhostButton).attrs({\n    align: 'center',\n    justify: 'center',\n})`\n    height: ${LIST_CARD_HEIGHT};\n    margin-bottom: ${LIST_CARD_SPACING};\n    width: ${LIST_CARD_WIDTH};\n`;\n\nexport const ListCardContainer = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n    justify: 'flex-start',\n    padding: 1,\n    spacing: LIST_CARD_SPACING,\n    wrapped: true,\n})(\n    ({ theme }) => `\n        align-content: flex-start;\n        background-color: ${theme.SHADED};\n        height: 100%;\n        overflow: auto;\n        padding-bottom: calc(${GRID_UNIT} * 1.5);\n\n        & > * {\n            height: ${LIST_CARD_HEIGHT};\n            margin-bottom: ${LIST_CARD_SPACING};\n            margin-left: ${LIST_CARD_SPACING};\n            width: ${LIST_CARD_WIDTH};\n\n            :nth-child(3n + 1) {\n                margin-left: 0;\n            }\n        }\n    `\n);\n\nconst keyboardShortcutNamespace = 'list-card';\n\nconst ListCard = ({\n    appActions,\n    appData,\n    listId,\n    isEditable = true,\n    ...otherProps\n}) => {\n    const { onUpdateList, onUpdateTask } = appActions;\n\n    const { isCreatingList, lists, selectedListId, tasks, theme } = appData;\n\n    const list = lists.find(list => list.id === listId);\n\n    const listPalette = buildPalette(theme, list.color_code);\n\n    const tasksInList = tasks.filter(\n        task => task.list_id === listId && !task.isComplete\n    );\n\n    const isActive = listId === selectedListId;\n\n    const listCardElementRef = useRef(null);\n\n    const [dragProps] = useDrag({ 'list-id': listId });\n\n    const [dropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const targetListId = toInt(evt.currentTarget.dataset.listId);\n            if (targetListId) {\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    list_id: targetListId,\n                });\n            }\n        },\n    });\n\n    const triggerClick = useCallback(evt => {\n        evt.preventDefault();\n        evt.target.click();\n    }, []);\n\n    const setListColor = colorCode =>\n        onUpdateList(listId, { color_code: colorCode });\n\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        [('enter', 'space')],\n        triggerClick\n    );\n\n    return (\n        <ThemeProvider theme={listPalette}>\n            <Container\n                data-list-id={listId}\n                isActive={isActive}\n                ref={listCardElementRef}\n                tabIndex={0}\n                title={COPY.TIPS.MOVE_BETWEEN_LISTS}\n                {...dragProps}\n                {...dropProps}\n                {...otherProps}\n            >\n                <EditInPlace\n                    isEditable={isEditable}\n                    isRemotelyActivated={\n                        isCreatingList && selectedListId === listId\n                    }\n                    marginX={0.75}\n                    marginTop={0.5}\n                    style={{\n                        alignSelf: 'stretch',\n                        flexGrow: 0,\n                        flexShrink: 0,\n                    }}\n                    tracerColor={listPalette.HIGH_CONTRAST_TEXT}\n                    value={list.label}\n                    onSave={newLabel => {\n                        onUpdateList(listId, { label: newLabel });\n                    }}\n                />\n                <FlexBox\n                    direction=\"column\"\n                    isFlexible\n                    isScrollable\n                    spacing={0.25}\n                >\n                    {tasksInList.map(task => (\n                        <FlexBox\n                            key={task.id}\n                            align=\"flex-start\"\n                            paddingX={0.25}\n                            spacing={0.25}\n                            style={{\n                                fontSize: `calc(${FONTS.NORMAL.SIZE} / 2)`,\n                            }}\n                        >\n                            <span>{task.icon}</span>\n                            <span>{task.label}</span>\n                        </FlexBox>\n                    ))}\n                </FlexBox>\n                <ColorPicker listId={listId} onPickColor={setListColor} />\n            </Container>\n        </ThemeProvider>\n    );\n};\n\nexport default ListCard;\n","import React from 'react';\nimport { COPY } from './atoms/tokens';\nimport ListCard, { GhostListCard, ListCardContainer } from './ListCard';\n\nconst ListManager = ({ appActions, appData, lists }) => {\n    const { onCreateList, onSelectList } = appActions;\n\n    return (\n        <ListCardContainer>\n            <GhostListCard onClick={() => onCreateList()}>\n                {COPY.CREATE_LIST_LABEL}\n            </GhostListCard>\n            {lists.map(list => (\n                <ListCard\n                    key={list.id}\n                    appActions={appActions}\n                    appData={appData}\n                    listId={list.id}\n                    onClick={() => onSelectList(list.id)}\n                />\n            ))}\n        </ListCardContainer>\n    );\n};\n\nexport default ListManager;\n","import React from 'react';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\n\nconst TaskListToggleButton = ({ isSidebarOpen, onChangeIsSidebarOpen }) => (\n    <ToggleButton\n        isActive={isSidebarOpen}\n        title={COPY.TIPS.TOGGLE_TASK_LIST}\n        onClick={() => onChangeIsSidebarOpen(!isSidebarOpen)}\n    >\n        {isSidebarOpen ? ICONS.LEFT : ICONS.RIGHT}\n    </ToggleButton>\n);\n\nexport default TaskListToggleButton;\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs(({ isCollapsed = false }) => ({\n    align: 'center',\n    justify: isCollapsed ? 'center' : 'space-between',\n    paddingX: isCollapsed ? 0 : 0.5,\n    spacing: 0.5,\n}))(\n    ({ theme }) => `\n        background-color: ${theme.BACKGROUND};\n        color: ${theme.TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${theme.TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React, { useEffect, useState } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport { SecondaryAppColumn } from './AppColumn';\nimport { ToggleButton } from './atoms/Button';\nimport { COPY, ICONS } from './atoms/tokens';\nimport SidebarToggleButton from './TaskListToggleButton';\nimport ToolBar from './ToolBar';\n\nconst Sidebar = ({ appActions, appData, children, ...otherProps }) => {\n    const { onChangeIsSidebarOpen, onChangeTheme, onUpdateTask } = appActions;\n\n    const {\n        isShowingTrashContents,\n        isSidebarOpen,\n        lists,\n        selectedListId,\n        theme,\n    } = appData;\n\n    const [isTaskListForcedOpen, setIsTaskListForcedOpen] = useState(false);\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const [sidebarDropProps] = useDrop({\n        'task-id': taskId => {\n            onUpdateTask(taskId, {\n                list_id: selectedListId,\n                scheduled: false,\n            });\n        },\n    });\n\n    useEffect(() => {\n        if (!isSidebarOpen && sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(true);\n            onChangeIsSidebarOpen(true);\n            return;\n        }\n\n        if (isTaskListForcedOpen && !sidebarDropProps.isTargetedForDrop) {\n            setIsTaskListForcedOpen(false);\n            onChangeIsSidebarOpen(false);\n        }\n    }, [\n        sidebarDropProps.isTargetedForDrop,\n        isTaskListForcedOpen,\n        isSidebarOpen,\n        setIsTaskListForcedOpen,\n        onChangeIsSidebarOpen,\n    ]);\n\n    return (\n        <SecondaryAppColumn\n            label={\n                !isSidebarOpen\n                    ? ''\n                    : isShowingTrashContents\n                    ? COPY.LABEL_FOR_TRASHED_TASKS\n                    : selectedList.label\n            }\n            {...sidebarDropProps}\n            {...otherProps}\n        >\n            {!isSidebarOpen ? (\n                <ToolBar isCollapsed>\n                    <SidebarToggleButton\n                        isSidebarOpen={isSidebarOpen}\n                        onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                    />\n                </ToolBar>\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={COPY.TIPS.TOGGLE_DARK_MODE}\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT'\n                                ? ICONS.DARK_MODE\n                                : ICONS.LIGHT_MODE}\n                        </ToggleButton>\n                        <SidebarToggleButton\n                            isSidebarOpen={isSidebarOpen}\n                            onChangeIsSidebarOpen={onChangeIsSidebarOpen}\n                        />\n                    </ToolBar>\n\n                    {children}\n                </>\n            )}\n        </SecondaryAppColumn>\n    );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected, theme }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0.75};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n     \n        &:hover {\n            border-color: ${theme.HIGH_CONTRAST_BACKGROUND};\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map((option, optionIndex) => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(\n                              renderOption(option, optionIndex),\n                              optionIndex\n                          )\n                        : renderOption(option, optionIndex)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COPY,\n    ICONS,\n    DURATION_OPTIONS,\n    FONTS,\n    BORDER_WIDTH,\n} from './atoms/tokens';\n\nconst TaskHeader = styled(FlexBox).attrs({\n    forwardedAs: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${theme.SHADED};\n        font-size: ${FONTS.LARGE.SIZE};\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    align-self: center;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst DurationOptionBar = styled(OptionBar)(\n    ({ theme }) => `\n        background-color: ${theme.SHADED};\n        border-top: ${BORDER_WIDTH} solid ${theme.BACKGROUND};\n    `\n);\n\nconst TaskDetails = ({ appActions = {}, appData = {} }) => {\n    const { onUpdateTask } = appActions;\n    const { isCreatingTask, selectedTaskId, tasks } = appData;\n    const activeTask = tasks.find(task => task.id === selectedTaskId) || {};\n    const { icon, id, label, notes, scheduled_minutes } = activeTask;\n    const isEmpty = !activeTask.id;\n\n    const handleUpdateTask = useCallback(\n        (field, value) => onUpdateTask(id, { [field]: value }),\n        [id, onUpdateTask]\n    );\n\n    const handleSaveDuration = useCallback(\n        newDuration => handleUpdateTask('scheduled_minutes', newDuration),\n        [handleUpdateTask]\n    );\n\n    const handleSaveIcon = useCallback(\n        newNotes => handleUpdateTask('icon', newNotes),\n        [handleUpdateTask]\n    );\n\n    const handleSaveLabel = useCallback(\n        newLabel => handleUpdateTask('label', newLabel),\n        [handleUpdateTask]\n    );\n\n    const handleSaveNotes = useCallback(\n        newNotes => handleUpdateTask('notes', newNotes),\n        [handleUpdateTask]\n    );\n\n    return (\n        !isEmpty && (\n            <>\n                <TaskHeader>\n                    <TaskHeaderLabel>\n                        <EditInPlace\n                            isRemotelyActivated={isCreatingTask}\n                            placeholder={COPY.EMPTY_LABEL}\n                            value={label}\n                            onSave={handleSaveLabel}\n                        />\n                    </TaskHeaderLabel>\n                    <TaskHeaderIcon>\n                        <EditInPlace\n                            placeholder={ICONS.TASK_DEFAULT}\n                            value={icon}\n                            onSave={handleSaveIcon}\n                        />\n                    </TaskHeaderIcon>\n                </TaskHeader>\n\n                <EditInPlace\n                    isFlexible\n                    isMultiLine\n                    margin={1}\n                    placeholder={COPY.EMPTY_NOTES}\n                    render={rawNotes => (\n                        <div\n                            className=\"markdown\"\n                            dangerouslySetInnerHTML={{\n                                __html: marked(rawNotes),\n                            }}\n                        />\n                    )}\n                    canvasStyles={{\n                        bottom: 0,\n                        fontSize: FONTS.LARGE.SIZE,\n                        left: 0,\n                        overflow: 'auto',\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                    }}\n                    value={notes}\n                    onSave={handleSaveNotes}\n                />\n\n                <DurationOptionBar\n                    options={DURATION_OPTIONS}\n                    renderSelectedOption={option => <span>{option} mins</span>}\n                    selectedOption={scheduled_minutes}\n                    title={COPY.TIPS.SETTING_DURATION}\n                    onChange={handleSaveDuration}\n                />\n            </>\n        )\n    );\n};\n\nexport default TaskDetails;\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","import React, { memo, useState } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    buildPalette,\n    COPY,\n    FONTS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, theme }) => `\n        background-color: ${theme.BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow:\n            0 0 0 ${isActive ? 2 : 1}px\n            ${theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER']};\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        width: 100%;\n        z-index: ${isActive ? 100 : 10};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n            \n        & ::selection {\n            color: ${theme.HIGH_CONTRAST_BACKGROUND};\n            background-color: ${theme.HIGH_CONTRAST_TEXT};\n        }\n\n        &:before {\n            background-color: ${theme.PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${\n                theme[isActive ? 'TASK_BORDER_ACTIVE' : 'TASK_BORDER_HOVER']\n            };\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${theme.TASK_BORDER_ACTIVE};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${theme.TASK_BORDER_ACTIVE} inset;\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'flex-start',\n    isFlexible: true,\n})(\n    ({ duration, isActive, isMouseOver, theme }) => `\n        color: ${theme[isActive || isMouseOver ? 'TEXT' : 'TEXT_FADED']};\n        min-height: ${minutesToHeight(Math.min(30, duration))};\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ duration }) => `\n        font-size: ${duration <= 15 ? FONTS.NORMAL.SIZE : FONTS.LARGE.SIZE};\n        height: ${minutesToHeight(Math.min(30, duration))};\n        width: auto;\n    `\n);\n\nexport const TaskCardContainer = styled(FlexBox).attrs({\n    isFlexible: true,\n    justify: 'flex-start',\n    direction: 'column',\n    spacing: 0.5,\n    padding: 1,\n})`\n    height: 100%;\n`;\n\nconst TaskCard = ({ appActions, appData, task, ...otherProps }) => {\n    const [isMouseOver, setIsMouseOver] = useState(false);\n\n    const { onImmediatelySelectTask, onTransitionToTask } = appActions;\n\n    const { isShowingListManager, lists, selectedTaskId, theme } = appData;\n\n    const { icon, id, label, list_id, scheduled_minutes } = task;\n\n    const listColorCode = lists.find(list => list.id === list_id).color_code;\n\n    const cardPalette = buildPalette(theme, listColorCode);\n\n    const isActive = task.id === selectedTaskId;\n\n    const [dragProps] = useDrag({ 'task-id': id });\n\n    const handleClick = () => {\n        if (isShowingListManager) {\n            onImmediatelySelectTask(id);\n            return;\n        }\n\n        onTransitionToTask(id);\n    };\n\n    const toggleIsMouseOver = () => setIsMouseOver(!isMouseOver);\n\n    return (\n        <ThemeProvider theme={cardPalette}>\n            <Container\n                data-task-id={id}\n                duration={scheduled_minutes}\n                isActive={isActive}\n                tabIndex={0}\n                title={COPY.TIPS.MOVE_TASK_BETWEEN_TASK_LIST_AND_TIMELINE}\n                onClick={handleClick}\n                onMouseEnter={toggleIsMouseOver}\n                onMouseLeave={toggleIsMouseOver}\n                {...dragProps}\n                {...otherProps}\n            >\n                <CardLabel\n                    duration={scheduled_minutes}\n                    isActive={isActive}\n                    isMouseOver={isMouseOver}\n                >\n                    {label}\n                </CardLabel>\n                <CardIcon duration={scheduled_minutes}>{icon}</CardIcon>\n            </Container>\n        </ThemeProvider>\n    );\n};\n\nexport default memo(TaskCard);\n","import React, { memo } from 'react';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport { GhostButton } from './atoms/Button';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\n\nconst TaskList = ({ appActions, appData, ...otherProps }) => {\n    const { onChangeTaskPosition, onCreateTask } = appActions;\n\n    const { incompleteTasks, lists, selectedListId } = appData;\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const unscheduledTasks = incompleteTasks.filter(\n        task =>\n            !task.scheduled &&\n            task.list_id === selectedListId &&\n            !selectedList.isArchived\n    );\n\n    const [taskCardDropProps] = useDrop({\n        'task-id': (taskId, evt) => {\n            const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n            const droppedOnTaskIndex = appData.tasks.findIndex(\n                task => task.id === droppedOnTaskId\n            );\n            onChangeTaskPosition(taskId, droppedOnTaskIndex);\n        },\n    });\n\n    return (\n        <TaskCardContainer {...otherProps}>\n            <GhostButton\n                style={{\n                    height: minutesToHeight(30),\n                }}\n                title={COPY.TIPS.CREATE_NEW_TASK}\n                onClick={() => onCreateTask()}\n            >\n                {COPY.CREATE_TASK_LABEL}\n            </GhostButton>\n            {unscheduledTasks.map(task => (\n                <TaskCard\n                    key={task.id}\n                    appActions={appActions}\n                    appData={appData}\n                    task={task}\n                    {...taskCardDropProps}\n                />\n            ))}\n        </TaskCardContainer>\n    );\n};\n\nexport default memo(TaskList);\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${isTargetedForDrop ? `4px dotted ${theme.PRIMARY}` : ''};\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop({\n            'task-id': taskId =>\n                onUpdateTask(taskId, {\n                    isComplete: false,\n                    scheduled: true,\n                    scheduled_time: newTime,\n                }),\n        });\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COPY, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: COPY.LABEL_FOR_TIMELINE,\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${theme.TASK_BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, theme.TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${theme.BORDER};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            opacity: ${isFaded ? 0.5 : 1};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop({ 'task-id': () => {} });\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            appData={appData}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY, GRID_UNIT, ICONS, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst DROP_ZONE_SIZE = `calc(${GRID_UNIT} * 4)`;\n\nconst pulsingAnimation = ({ from, to }) => keyframes`\n    0% {\n        transform: scale(${from});\n    }\n    100% {\n        transform: scale(${to});\n    }\n`;\n\nconst AnimatedContainer = styled(FlexBox)(\n    ({ isDraggingTask, isTargetedForDrop }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop\n            ? pulsingAnimation({ from: 1.6, to: 2.4 })\n            : isDraggingTask\n            ? pulsingAnimation({ from: 1, to: 1.6 })\n            : 'unset'};\n        animation-timing-function: ease-in-out;\n        bottom: 0;\n        height: ${DROP_ZONE_SIZE};\n        position: fixed;\n        right: 0;\n        transform-origin: bottom right;\n        transform: scale(${isDraggingTask ? 1.5 : 1});\n        width: ${DROP_ZONE_SIZE};\n        z-index: 1000;\n        ${UNIFIED_TRANSITION};\n    `\n);\n\nconst TrashDropZone = styled(AnimatedContainer)(\n    ({ isDraggingTask }) => `\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n    `\n);\n\nconst TrashIconContainer = styled(AnimatedContainer).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 1,\n})(\n    ({ isDraggingTask, isShowingTrashContents, isTargetedForDrop, theme }) => `\n        color: ${\n            isTargetedForDrop\n                ? '#FF0000'\n                : theme[\n                      isDraggingTask || isShowingTrashContents\n                          ? 'PRIMARY'\n                          : 'TEXT_FADED'\n                  ]\n        };\n        cursor: pointer;\n        font-size: 3rem;\n        opacity: ${!isTargetedForDrop && !isDraggingTask ? 0.6 : 1};\n        \n        &:hover {\n            color: ${theme.PRIMARY};\n        }\n    `\n);\n\nconst Trash = ({ appActions, appData, ...otherProps }) => {\n    const {\n        onChangeIsShowingTrashContents,\n        deleteTask,\n        onSelectList,\n        onUpdateList,\n    } = appActions;\n\n    const {\n        isDraggingTask,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n    } = appData;\n\n    const [dropProps] = useDrop({\n        'list-id': listId => {\n            if (selectedListId === listId) {\n                const firstUnarchivedList = lists.find(\n                    list => list.id !== listId && !list.isArchived\n                );\n\n                if (firstUnarchivedList) {\n                    onSelectList(firstUnarchivedList.id);\n                }\n            }\n\n            onUpdateList(listId, {\n                isArchived: true,\n            });\n        },\n        'task-id': deleteTask,\n    });\n\n    const handleClick = () =>\n        onChangeIsShowingTrashContents(!isShowingTrashContents);\n\n    return (\n        <>\n            <TrashIconContainer\n                isDraggingTask={isDraggingTask}\n                isShowingTrashContents={isShowingTrashContents}\n                isTargetedForDrop={dropProps.isTargetedForDrop}\n                title={COPY.TIPS.DELETE_TASK}\n                onClick={handleClick}\n            >\n                {ICONS.END_ZONE}\n            </TrashIconContainer>\n            <TrashDropZone\n                isDraggingTask={isDraggingTask}\n                {...dropProps}\n                {...otherProps}\n            />\n        </>\n    );\n};\n\nexport default Trash;\n","import random from 'lodash/random';\nimport React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport Icon from './atoms/Icon';\nimport { GRID_UNIT } from './atoms/tokens';\n\nconst animation = ({ minOpacity, translationDistance }) => keyframes`\n    0% {\n        transform: translateY(-${translationDistance}px);\n        opacity: ${minOpacity};\n    }\n    100% {\n        transform: translateY(${translationDistance}px);\n        opacity: 1;\n    }\n`;\n\nconst Container = styled.div(\n    () => css`\n        animation-direction: alternate;\n        animation-duration: ${random(300, 400)}ms;\n        animation-iteration-count: infinite;\n        animation-name: ${animation({\n            translationDistance: random(0.5, 2),\n            minOpacity: random(0.75, 0.9),\n        })};\n        animation-timing-function: ease-in-out;\n        position: relative;\n\n        & > * {\n            width: 100%;\n        }\n    `\n);\n\nconst RestoreButton = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n    padding: 0.25,\n})(\n    ({ theme }) => `\n        background-color: ${theme.NEUTRAL_BACKGROUND};\n        border: 2px solid ${theme.NEUTRAL_FOREGROUND};\n        border-radius: 100px;\n        color: ${theme.NEUTRAL_FOREGROUND};\n        cursor: pointer;\n        height: calc(${GRID_UNIT});\n        position: absolute;\n        right: 0;\n        top: 0;\n        transform: translate(50%, -50%);\n        width: calc(${GRID_UNIT});\n        z-index: 1000;\n        \n        &:hover {\n            background-color: ${theme.NEUTRAL_FOREGROUND};\n            border-color: ${theme.NEUTRAL_BACKGROUND};\n            color: ${theme.NEUTRAL_BACKGROUND};\n        }\n    `\n);\n\nconst TrashedCard = ({\n    children,\n    restoreButtonTitle,\n    onRestore,\n    ...otherProps\n}) => (\n    <Container {...otherProps}>\n        <RestoreButton title={restoreButtonTitle} onClick={onRestore}>\n            <Icon iconName=\"reply\" />\n        </RestoreButton>\n        {children}\n    </Container>\n);\n\nexport default TrashedCard;\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY, LIST_CARD_WIDTH } from './atoms/tokens';\nimport ListCard, { ListCardContainer } from './ListCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedLists = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateList } = appActions;\n\n    const { lists } = appData;\n\n    const deletedLists = lists.filter(list => list.isArchived);\n\n    const hasDeletedLists = deletedLists.length;\n\n    const handleRestoreList = listId =>\n        onUpdateList(listId, { isArchived: false });\n\n    return (\n        <>\n            {!hasDeletedLists && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_LISTS}\n                </FlexBox>\n            )}\n            {!!hasDeletedLists && (\n                <ListCardContainer {...otherProps}>\n                    {deletedLists.map(list => (\n                        <TrashedCard\n                            key={list.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_LIST}\n                            style={{ width: LIST_CARD_WIDTH }}\n                            onRestore={handleRestoreList.bind(this, list.id)}\n                        >\n                            <ListCard\n                                appActions={appActions}\n                                appData={appData}\n                                isEditable={false}\n                                listId={list.id}\n                                style={{ marginLeft: 0 }}\n                            />\n                        </TrashedCard>\n                    ))}\n                </ListCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedLists);\n","import React, { memo } from 'react';\nimport FlexBox from './atoms/FlexBox';\nimport { COPY } from './atoms/tokens';\nimport TaskCard, { TaskCardContainer } from './TaskCard';\nimport TrashedCard from './TrashedCard';\n\nconst TrashedTasks = ({ appActions, appData, ...otherProps }) => {\n    const { onUpdateTask } = appData;\n\n    const { tasks } = appData;\n\n    const deletedTasks = tasks.filter(task => task.isComplete);\n\n    const hasDeletedTasks = deletedTasks.length;\n\n    const handleRestoreTask = taskId =>\n        onUpdateTask(taskId, { isComplete: false });\n\n    return (\n        <>\n            {!hasDeletedTasks && (\n                <FlexBox\n                    align=\"center\"\n                    isFlexible\n                    justify=\"center\"\n                    style={{ opacity: 0.6 }}\n                >\n                    {COPY.EMPTY_TRASHED_TASKS}\n                </FlexBox>\n            )}\n            {!!hasDeletedTasks && (\n                <TaskCardContainer {...otherProps}>\n                    {deletedTasks.map(task => (\n                        <TrashedCard\n                            key={task.id}\n                            restoreButtonTitle={COPY.LABEL_FOR_RESTORING_TASK}\n                            style={{ width: '100%' }}\n                            onRestore={handleRestoreTask.bind(this, task.id)}\n                        >\n                            <TaskCard\n                                appActions={appActions}\n                                appData={appData}\n                                isActive\n                                task={task}\n                            />\n                        </TrashedCard>\n                    ))}\n                </TaskCardContainer>\n            )}\n        </>\n    );\n};\n\nexport default memo(TrashedTasks);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                ![null, 'undefined'].includes(savedState)\n                    ? JSON.parse(savedState)\n                    : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import sample from 'lodash/sample';\nimport sortBy from 'lodash/sortBy';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { StyleSheetManager, ThemeProvider } from 'styled-components';\nimport { PrimaryAppColumn } from './components/AppColumn';\nimport { ToggleButton } from './components/atoms/Button';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport {\n    buildPalette,\n    COPY,\n    GRID_UNIT,\n    ICONS,\n    INITIAL_LISTS,\n    INITIAL_SELECTED_LIST_ID,\n    INITIAL_SELECTED_TASK_ID,\n    INITIAL_TASKS,\n    PRIMARY_COLORS,\n    ROUTE_TRANSITION_ANIMATION_DURATION,\n    SIDEBAR_DEFAULT_WIDTH,\n    SIDEBAR_EXTENDED_WIDTH,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\nimport Transition from './components/atoms/Transition';\nimport ListManager from './components/ListManager';\nimport Sidebar from './components/Sidebar';\nimport TaskDetails from './components/TaskDetails';\nimport TaskList from './components/TaskList';\nimport Timeline from './components/Timeline';\nimport ToolBar from './components/ToolBar';\nimport Trash from './components/Trash';\nimport TrashedLists from './components/TrashedLists';\nimport TrashedTasks from './components/TrashedTasks';\nimport useKeyboardShortcut from './hooks/useKeyboardShortcut';\nimport usePersistentState from './hooks/usePersistentState';\n\nconst withPreventDefault = func => e => {\n    e.preventDefault();\n    func(e);\n};\n\nconst keyboardShortcutNamespace = 'global';\n\nfunction App() {\n    const [isShowingSidebar, setIsShowingSidebar] = usePersistentState(\n        'is-showing-sidebar',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        INITIAL_SELECTED_LIST_ID\n    );\n    const [isShowingListManager, setIsShowingListManager] = usePersistentState(\n        'is-showing-list-manager',\n        true\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        INITIAL_SELECTED_TASK_ID\n    );\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingList, setIsCreatingList] = useState(false);\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const [isShowingTrashContents, setIsShowingTrashContents] = useState(false);\n    const [isTransitioning, setIsTransitioning] = useState(false);\n    const unarchivedLists = useMemo(\n        () =>\n            sortBy(\n                lists.filter(list => !list.isArchived),\n                [list => list.label]\n            ),\n        [lists]\n    );\n\n    const currentListIndex = unarchivedLists.findIndex(\n        list => list.id === selectedListId\n    );\n\n    const selectedList = lists.find(list => list.id === selectedListId);\n\n    const primaryColorCode = selectedList.color_code\n        ? selectedList.color_code\n        : PRIMARY_COLORS[0]\n        ? PRIMARY_COLORS[0]\n        : '#FF0000';\n\n    const palette = buildPalette(themeName, primaryColorCode);\n\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n\n    const hasUnarchivedList = lists.filter(list => !list.isArchived).length;\n\n    const isSidebarOpen = hasUnarchivedList && isShowingSidebar;\n\n    useEffect(() => {\n        const handleDragOver = () => setIsDraggingTask(true);\n        const handleDragEnd = () => setIsDraggingTask(false);\n        document.addEventListener('dragover', handleDragOver);\n        document.addEventListener('dragend', handleDragEnd);\n        document.addEventListener('drop', handleDragEnd);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n            document.removeEventListener('dragend', handleDragEnd);\n            document.removeEventListener('drop', handleDragEnd);\n        };\n    }, []);\n\n    const onCreateList = useCallback(\n        (overrides = {}) => {\n            const newListId = Date.now();\n            const randomColorCode = sample(PRIMARY_COLORS);\n\n            setLists(currentLists =>\n                currentLists.concat([\n                    {\n                        id: newListId,\n                        color_code: randomColorCode,\n                        isArchived: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_LIST_LABEL\n                        }`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedListId(newListId);\n\n            setIsCreatingList(true);\n\n            setTimeout(() => setIsCreatingList(false), 1000);\n        },\n        [setSelectedListId, setLists]\n    );\n\n    const onUpdateList = useCallback(\n        (listId, updates) => {\n            setLists(prevLists =>\n                prevLists.map(list => {\n                    if (list.id === listId) {\n                        return {\n                            ...list,\n                            ...updates,\n                        };\n                    }\n                    return list;\n                })\n            );\n        },\n        [setLists]\n    );\n\n    const onSelectList = useCallback(\n        listId => {\n            setSelectedListId(listId);\n            const firstTaskIdInList = incompleteTasks.find(\n                task => task.list_id === listId\n            );\n            if (firstTaskIdInList) {\n                setSelectedTaskId(firstTaskIdInList.id);\n            }\n            setIsShowingSidebar(true);\n            setIsShowingTrashContents(false);\n            setIsShowingListManager(true);\n\n            document.querySelector(`[data-list-id=\"${listId}\"]`).focus();\n        },\n        [\n            incompleteTasks,\n            setSelectedListId,\n            setSelectedTaskId,\n            setIsShowingSidebar,\n            setIsShowingTrashContents,\n            setIsShowingListManager,\n        ]\n    );\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                [\n                    {\n                        icon: ICONS.TASK_DEFAULT,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.MOTIVATIONAL_DESCRIPTORS)} ${\n                            COPY.NEW_TASK_LABEL\n                        }`,\n                        notes: COPY.NEW_TASK_NOTES,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ].concat(currentTasks)\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            // This remotely activates the EditInPlace\n            setIsCreatingTask(true);\n\n            setIsShowingListManager(false);\n        },\n        [selectedListId, setIsShowingListManager, setSelectedTaskId, setTasks]\n    );\n\n    useEffect(() => {\n        if (isCreatingTask) {\n            setIsShowingListManager(false);\n            const timer = setTimeout(() => setIsCreatingTask(false), 100);\n            return () => clearTimeout(timer);\n        }\n    }, [isCreatingTask, setIsCreatingTask, setIsShowingListManager]);\n\n    const onSelectTask = useCallback(\n        taskId => {\n            const task = tasks.find(task => task.id === taskId);\n\n            setSelectedListId(task.list_id);\n\n            if (isShowingListManager) {\n                setIsShowingListManager(false);\n            }\n\n            setSelectedTaskId(taskId);\n\n            document.querySelector(`[data-task-id=\"${taskId}\"]`).focus();\n        },\n        [\n            isShowingListManager,\n            tasks,\n            setIsShowingListManager,\n            setSelectedTaskId,\n            setSelectedListId,\n        ]\n    );\n\n    const selectTaskByRelativeIndex = useCallback(\n        relativeIndex => {\n            const tasksInList = tasks.filter(\n                task =>\n                    task.list_id === selectedListId &&\n                    !task.isComplete &&\n                    !task.scheduled\n            );\n\n            const numTasksInList = tasksInList.length;\n\n            const indexOfCurrentTask = tasksInList.findIndex(\n                task => task.id === selectedTaskId\n            );\n\n            const totalSteps =\n                relativeIndex >= 0\n                    ? relativeIndex\n                    : Math.abs(relativeIndex) * (numTasksInList - 1);\n\n            const targetIndex =\n                (indexOfCurrentTask + totalSteps) % numTasksInList;\n\n            const taskAtRelativeIndex = tasksInList[targetIndex];\n\n            if (taskAtRelativeIndex) {\n                onSelectTask(taskAtRelativeIndex.id);\n            }\n        },\n        [onSelectTask, selectedListId, selectedTaskId, tasks]\n    );\n\n    const selectListByRelativeIndex = useCallback(\n        relativeIndex => {\n            const numLists = unarchivedLists.length;\n\n            const totalSteps =\n                relativeIndex >= 0\n                    ? relativeIndex\n                    : Math.abs(relativeIndex) * (numLists - 1);\n\n            const targetIndex = (currentListIndex + totalSteps) % numLists;\n\n            const listAtRelativeIndex = unarchivedLists[targetIndex];\n\n            if (listAtRelativeIndex) {\n                onSelectList(listAtRelativeIndex.id);\n            }\n        },\n        [currentListIndex, onSelectList, unarchivedLists]\n    );\n\n    const selectByRelativeIndex = useCallback(\n        (relativeIndex, isVertical = false) => {\n            const elementWithFocus = document.activeElement;\n            const isListCard = !!elementWithFocus.dataset.listId;\n\n            const selectionFunc = isListCard\n                ? selectListByRelativeIndex\n                : selectTaskByRelativeIndex;\n\n            const offset =\n                isVertical && isListCard\n                    ? relativeIndex >= 0\n                        ? 3\n                        : -3\n                    : relativeIndex;\n\n            selectionFunc(offset);\n        },\n        [selectListByRelativeIndex, selectTaskByRelativeIndex]\n    );\n\n    const transition = useCallback(\n        callback => {\n            setIsTransitioning(true);\n            setTimeout(() => {\n                callback();\n                setIsTransitioning(false);\n            }, ROUTE_TRANSITION_ANIMATION_DURATION / 2);\n        },\n        [setIsTransitioning]\n    );\n\n    const onImmediatelySelectTask = useCallback(\n        taskId => {\n            onSelectTask(taskId);\n        },\n        [onSelectTask]\n    );\n\n    const onTransitionToTask = useCallback(\n        taskId => {\n            transition(() => onSelectTask(taskId));\n        },\n        [onSelectTask, transition]\n    );\n\n    const onChangeIsSidebarOpen = setIsShowingSidebar;\n\n    const onChangeIsShowingListManager = useCallback(\n        newIsShowingListManager => {\n            transition(() => {\n                setIsShowingListManager(newIsShowingListManager);\n\n                if (newIsShowingListManager) {\n                    setIsShowingSidebar(true);\n                }\n\n                setIsShowingTrashContents(false);\n            });\n        },\n        [\n            setIsShowingSidebar,\n            setIsShowingListManager,\n            setIsShowingTrashContents,\n            transition,\n        ]\n    );\n\n    const onChangeIsShowingTrashContents = useCallback(() => {\n        if (!isShowingSidebar) {\n            setIsShowingSidebar(true);\n        }\n        if (!isShowingListManager) {\n            setIsShowingListManager(true);\n        }\n        setIsShowingTrashContents(!isShowingTrashContents);\n    }, [\n        isShowingListManager,\n        isShowingSidebar,\n        isShowingTrashContents,\n        setIsShowingListManager,\n        setIsShowingSidebar,\n        setIsShowingTrashContents,\n    ]);\n\n    const deleteTask = useCallback(\n        taskId => {\n            if (selectedTaskId === taskId) {\n                const firstUnarchivedTask = tasks.find(\n                    task =>\n                        task.id !== taskId &&\n                        task.list_id === selectedListId &&\n                        !task.isComplete\n                );\n\n                if (firstUnarchivedTask) {\n                    onImmediatelySelectTask(firstUnarchivedTask.id);\n                } else {\n                    onChangeIsShowingListManager(true);\n                }\n            }\n\n            onUpdateTask(taskId, {\n                isComplete: true,\n            });\n        },\n        [\n            onChangeIsShowingListManager,\n            onImmediatelySelectTask,\n            onUpdateTask,\n            selectedListId,\n            tasks,\n            selectedTaskId,\n        ]\n    );\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const moveTaskToTimeline = useCallback(() => {\n        onUpdateTask(selectedTaskId, {\n            scheduled: true,\n        });\n    }, [onUpdateTask, selectedTaskId]);\n\n    const moveTaskToTaskList = useCallback(() => {\n        onUpdateTask(selectedTaskId, {\n            scheduled: false,\n        });\n    }, [onUpdateTask, selectedTaskId]);\n\n    const setTaskDuration = useCallback(\n        duration => {\n            onUpdateTask(selectedTaskId, {\n                scheduled_minutes: duration,\n            });\n        },\n        [onUpdateTask, selectedTaskId]\n    );\n\n    const toggleTaskListVisibility = useCallback(() => {\n        if (isShowingSidebar) {\n            setIsShowingTrashContents(false);\n        }\n\n        onChangeIsSidebarOpen(!isShowingSidebar);\n    }, [isShowingSidebar, onChangeIsSidebarOpen]);\n\n    const toggleDarkMode = useCallback(() => {\n        onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n    }, [onChangeTheme, themeName]);\n\n    const toggleIsEditingCurrentTask = useCallback(() => {\n        setIsCreatingTask(true);\n    }, [setIsCreatingTask]);\n\n    const toggleIsShowingListManager = useCallback(() => {\n        onChangeIsShowingListManager(!isShowingListManager);\n    }, [isShowingListManager, onChangeIsShowingListManager]);\n\n    const createNewTask = useCallback(() => {\n        onCreateTask();\n    }, [onCreateTask]);\n\n    const deleteCurrentTask = useCallback(() => {\n        deleteTask(selectedTaskId);\n    }, [deleteTask, selectedTaskId]);\n\n    const goBack = useCallback(() => {\n        setIsShowingTrashContents(current => {\n            if (current) {\n                return false;\n            }\n        });\n\n        setIsShowingListManager(current => !current);\n    }, [setIsShowingListManager, setIsShowingTrashContents]);\n\n    useKeyboardShortcut(keyboardShortcutNamespace, [1, 2, 3, 4, 5, 6], evt => {\n        const durations = [15, 30, 45, 60, 90, 120];\n        const desiredDurationIndex = Number(evt.key) - 1;\n        setTaskDuration(durations[desiredDurationIndex]);\n    });\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'cmd + arrowRight',\n        withPreventDefault(moveTaskToTimeline)\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'cmd + arrowLeft',\n        withPreventDefault(moveTaskToTaskList)\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        ['arrowRight', 'cmd + shift + arrowRight', 'cmd + shift + ]'],\n        withPreventDefault(() => selectListByRelativeIndex(1))\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        ['arrowLeft', 'cmd + shift + arrowLeft', 'cmd + shift + ['],\n        withPreventDefault(() => selectListByRelativeIndex(-1))\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'b',\n        withPreventDefault(toggleTaskListVisibility)\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'd',\n        withPreventDefault(toggleDarkMode)\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'e',\n        withPreventDefault(toggleIsEditingCurrentTask)\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'escape',\n        withPreventDefault(goBack)\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'l',\n        withPreventDefault(toggleIsShowingListManager)\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'n',\n        withPreventDefault(createNewTask)\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        't',\n        withPreventDefault(deleteCurrentTask)\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'arrowUp',\n        withPreventDefault(() => selectByRelativeIndex(-1, true))\n    );\n    useKeyboardShortcut(\n        keyboardShortcutNamespace,\n        'arrowDown',\n        withPreventDefault(() => selectByRelativeIndex(1, true))\n    );\n\n    const appActions = {\n        onChangeIsSidebarOpen,\n        onChangeTaskPosition,\n        onChangeIsShowingListManager,\n        onChangeIsShowingTrashContents,\n        onChangeTheme,\n        onCreateList,\n        onCreateTask,\n        deleteTask,\n        onSelectList,\n        onImmediatelySelectTask,\n        onTransitionToTask,\n        onUpdateList,\n        onUpdateTask,\n    };\n\n    const appData = {\n        incompleteTasks,\n        isSidebarOpen,\n        isCreatingList,\n        isCreatingTask,\n        isDraggingTask,\n        isShowingListManager,\n        isShowingTrashContents,\n        lists,\n        selectedListId,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    const columnWidths = isSidebarOpen\n        ? {\n              sidebar: SIDEBAR_DEFAULT_WIDTH,\n              listManager: '40vw',\n              taskDetails: '40vw',\n              timeline: SIDEBAR_DEFAULT_WIDTH,\n          }\n        : {\n              sidebar: `calc(${GRID_UNIT} * 2)`,\n              listManager: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              taskDetails: `calc((100vw - ${SIDEBAR_EXTENDED_WIDTH}) - ${GRID_UNIT} * 2)`,\n              timeline: SIDEBAR_EXTENDED_WIDTH,\n          };\n\n    return (\n        <StyleSheetManager disableVendorPrefixes>\n            <ThemeProvider theme={palette}>\n                <GlobalStyle />\n                <Trash appActions={appActions} appData={appData} />\n                <FlexBox align=\"stretch\" poop=\"poop\">\n                    <Sidebar\n                        appActions={appActions}\n                        appData={appData}\n                        style={{\n                            width: columnWidths.sidebar,\n                        }}\n                    >\n                        {isShowingTrashContents ? (\n                            <TrashedTasks\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        ) : (\n                            <TaskList\n                                appActions={appActions}\n                                appData={appData}\n                            />\n                        )}\n                    </Sidebar>\n\n                    <PrimaryAppColumn\n                        label={\n                            isShowingTrashContents\n                                ? COPY.LABEL_FOR_TRASHED_LISTS\n                                : isShowingListManager\n                                ? COPY.LABEL_FOR_LIST_MANAGER\n                                : COPY.LABEL_FOR_TASK_DETAILS\n                        }\n                        style={{\n                            width: isShowingListManager\n                                ? columnWidths.listManager\n                                : columnWidths.taskDetails,\n                        }}\n                    >\n                        <ToolBar>\n                            <ToggleButton\n                                isActive={isShowingListManager}\n                                title={COPY.TIPS.TOGGLE_LIST_MANAGER}\n                                onClick={() =>\n                                    onChangeIsShowingListManager(\n                                        !isShowingListManager\n                                    )\n                                }\n                            >\n                                {isShowingListManager ? (\n                                    <FlexBox spacing={0.25}>\n                                        {ICONS.TASK_DETAILS}\n                                        <span>\n                                            {COPY.LABEL_FOR_TASK_DETAILS}\n                                        </span>\n                                    </FlexBox>\n                                ) : (\n                                    <FlexBox spacing={0.25}>\n                                        {ICONS.LIST_MANAGER}\n                                        <span>\n                                            {COPY.LABEL_FOR_LIST_MANAGER}\n                                        </span>\n                                    </FlexBox>\n                                )}\n                            </ToggleButton>\n                        </ToolBar>\n                        <Transition\n                            isTransitioning={isTransitioning}\n                            style={{ height: '100%' }}\n                        >\n                            {isShowingTrashContents ? (\n                                <TrashedLists\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            ) : isShowingListManager ? (\n                                <ListManager\n                                    appActions={appActions}\n                                    appData={appData}\n                                    lists={unarchivedLists}\n                                />\n                            ) : (\n                                <TaskDetails\n                                    appActions={appActions}\n                                    appData={appData}\n                                />\n                            )}\n                        </Transition>\n                    </PrimaryAppColumn>\n\n                    <Timeline\n                        appActions={appActions}\n                        appData={appData}\n                        selectedTaskId={selectedTaskId}\n                        from={TIMELINE_FROM}\n                        style={{\n                            width: columnWidths.timeline,\n                        }}\n                        tasks={incompleteTasks}\n                        to={TIMELINE_TO}\n                    />\n                </FlexBox>\n            </ThemeProvider>\n        </StyleSheetManager>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}