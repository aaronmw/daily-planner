{"version":3,"sources":["hooks/useDrop.js","components/atoms/tokens.js","utils/minutesToHeight.js","utils/toInt.js","components/atoms/Box.js","components/atoms/FlexBox.js","components/AppColumn.js","components/atoms/Button.js","components/ToolBar.js","components/OptionBar.js","components/TaskCard.js","hooks/useDrag.js","components/Backlog.js","components/CompletedTasksDropZone.js","hooks/useKeyboardShortcuts.js","components/EditInPlace.js","components/TaskDetails.js","utils/strToHoursAndMinutes.js","components/TimelineDropZone.js","utils/minutesToTime.js","components/Timeline.js","components/atoms/GlobalStyles.js","hooks/usePersistentState.js","index.js"],"names":["useDrop","type","callback","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","isTargetedForDrop","setIsTargetedForDrop","targetedElement","useRef","droppable","onDragEnter","evt","preventDefault","current","target","onDragOver","onDragLeave","onDrop","payload","dataTransfer","getData","isNaN","parseFloat","DEFAULT_TASK_ICON","DURATION_OPTIONS","GRID_UNIT","INITIAL_LISTS","id","label","INITIAL_TASKS","MIN_SLOT_HEIGHT","TIMELINE_FROM","TIMELINE_TO","UNIFIED_TRANSITION","COPY","DARK","HIGH_CONTRAST_BACKGROUND","PRIMARY","HIGH_CONTRAST_TEXT","BACKGROUND","BORDER_HOVER","setLightness","BORDER_IDLE","SHADED","lighten","TEXT","TEXT_FADED","BORDER_NEUTRAL","LIGHT","rgba","COLORS","minutesToHeight","minutes","concat","toInt","str","parseInt","styled","div","_ref","_ref$border","border","_ref$isFlexible","isFlexible","_ref$margin","margin","_ref$marginX","marginX","_ref$marginY","marginY","_ref$padding","padding","_ref$paddingX","paddingX","_ref$paddingY","paddingY","theme","name","Box","_ref$align","align","_ref$direction","direction","_ref$justify","justify","_ref$spacing","spacing","Container","FlexBox","attrs","ContentContainer","_ref2","ColumnHeader","_ref3","AppColumn","_ref4","children","otherProps","objectWithoutProperties","react_default","a","createElement","Button","as","GhostButton","ToggleButton","isActive","ToolBar","OptionButton","isSelected","OptionBar","options","_ref2$renderOption","renderOption","option","_ref2$renderSelectedO","renderSelectedOption","selectedOption","onChange","components_ToolBar","map","key","onClick","duration","isDragging","CardLabel","Math","min","CardIcon","memo","appActions","task","onSelectTask","icon","scheduled_minutes","_useDrag","setIsDragging","draggable","onDragEnd","onDragStart","setData","useDrag","dragProps","TaskCard_Container","assign","data-task-id","tabIndex","hasTasks","BacklogDropZone","BacklogToggleButton","isBacklogVisibleOrDraggingTask","onChangeBacklogVisibility","title","backlog_hide","backlog_show","CreateFirstTaskTip","_templateObject","appData","selectedTaskId","tasks","onClickTask","onChangeTaskPosition","onChangeTheme","onCreateTask","onUpdateTask","_useDrop","taskId","scheduled","backlogDropProps","_useDrop3","droppedOnTaskId","currentTarget","dataset","droppedOnTaskIndex","findIndex","taskCardDropProps","unscheduledTasks","filter","Backlog_Container","Fragment","toggle_light_mode","toggle_dark_mode","Backlog_BacklogToggleButton","style","bottom","left","overflow","position","right","top","width","role","aria-label","height","components_TaskCard","pulsingAnimation","keyframes","CompletedTasksDropZone_templateObject","isDraggingTask","css","_templateObject2","transparentize","CompletedTaskDropZone","isComplete","currentSelectedTaskId","dropProps","CompletedTasksDropZone_Container","INPUT_TAG_NAMES","isInput","node","tagName","toLowerCase","includes","useGlobalKeyboardShortcuts","keyMap","targetElementRef","useEffect","onKeyDown","scopedToElementRef","keysDown","ctrlKey","push","shiftKey","metaKey","currentKeySequence","uniq","keyDown","sort","join","mapKeys","handler","sequence","shortcutKeySequence","split","trim","scopedElement","scopedToAnInput","elementWithFocusIsAnInput","document","activeElement","stopPropagation","buildKeyboardShortcutHandler","addEventListener","removeEventListener","isEditing","isEmpty","_ref2$isMultiLine","isMultiLine","_ref2$isRemotelyActiv","isRemotelyActivated","_ref2$placeholder","placeholder","_ref2$render","render","value","_ref2$value","_ref2$wrapperStyles","wrapperStyles","_ref2$onSave","onSave","setIsEditing","_useState3","_useState4","bufferedValue","setBufferedValue","_useState5","_useState6","measuringElementHeight","setMeasuringElementHeight","inputRef","measuringElementRef","isSingleLine","handleClick","select","focus","el","offsetHeight","saveAndClose","close","useMemo","cmd + escape","shift + escape","cmd + enter","shift + enter","escape","enter","EditInPlace_Container","ref","pointerEvents","opacity","outline","whiteSpace","disabled","rows","display","onBlur","isLoading","ANIMATION_DURATION","TaskHeader","TaskHeaderLabel","TaskDetails_templateObject","TaskHeaderIcon","TaskDetails_templateObject2","TaskDetails","_ref3$appActions","_ref3$isCreatingTask","isCreatingTask","_ref3$task","setIsLoading","notes","handleUpdateTask","field","[object Object]","useLayoutEffect","newTimer","setTimeout","clearTimeout","TaskDetails_Container","components_OptionBar","newDuration","components_EditInPlace","empty_label","newLabel","newNotes","empty_notes","rawNotes","className","dangerouslySetInnerHTML","__html","marked","strToHoursAndMinutes","val","TimelineDropZone_templateObject","StyledTimelineDropTarget","TimelineDropTarget","quarterInMinutes","_strToHoursAndMinutes","_strToHoursAndMinutes2","fromHours","fromMinutes","newTime","floor","scheduled_time","TimelineDropZone","totalMinutes","TimelineDropZone_Container","range","Timeline_templateObject","TimelineContainer","HalfHourRow","Timeline_templateObject2","HalfHourLabel","hideLabel","isFaded","ScheduledTaskCard","TaskCard","isAnotherTaskBeingDragged","offsetMinutes","CurrentTimeMarker","_ref5","from","to","timelineDropProps","currentTime","setCurrentTime","currentHour","currentMinute","_strToHoursAndMinutes3","_strToHoursAndMinutes4","fromHour","isLoaded","setIsLoaded","scheduledTasks","_strToHoursAndMinutes5","_strToHoursAndMinutes6","toHour","toMinutes","totalHours","currentTimeMarkerRef","timelineContainerRef","updateTime","now","Date","getHours","getMinutes","timer","setInterval","clearInterval","scrollTo","offsetTop","Timeline_Container","_strToHoursAndMinutes7","_strToHoursAndMinutes8","components_TimelineDropZone","hour","react","createGlobalStyle","usePersistentState","initialState","state","setState","savedState","window","localStorage","getItem","JSON","parse","setItem","stringify","App","_usePersistentState","_usePersistentState2","isBacklogVisible","setIsBacklogVisible","_usePersistentState3","_usePersistentState4","lists","_usePersistentState5","_usePersistentState6","selectedListId","_usePersistentState7","_usePersistentState8","setSelectedTaskId","_usePersistentState9","_usePersistentState10","setTasks","_usePersistentState11","_usePersistentState12","themeName","setThemeName","setIsCreatingTask","setIsDraggingTask","selectedTask","find","list","incompleteTasks","hasIncompleteTasks","handleDragEnd","useCallback","updates","prevTasks","objectSpread2","overrides","newTaskId","currentTasks","list_id","sample","motivational_descriptors","new_task_label","new_task_notes","newIndex","tasksMinusTarget","slice","cmd + arrowRight","cmd + arrowLeft","cmd + b","cmd + d","getTaskById","console","log","columnWidths","backlog","taskDetails","timeline","styled_components_browser_esm","GlobalStyles","CompletedTasksDropZone","components_Timeline","components_TaskDetails","components_Backlog","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.83d0c182.chunk.js","sourcesContent":["import { useRef, useState } from 'react';\n\nconst useDrop = (type, callback = () => {}) => {\n    const [isTargetedForDrop, setIsTargetedForDrop] = useState(false);\n    const targetedElement = useRef(null);\n\n    const onDragEnter = evt => {\n        evt.preventDefault();\n        targetedElement.current = evt.target;\n        if (!isTargetedForDrop) {\n            setIsTargetedForDrop(true);\n        }\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n    };\n\n    const onDragLeave = evt => {\n        if (evt.target === targetedElement.current) {\n            setIsTargetedForDrop(false);\n        }\n    };\n\n    const onDrop = evt => {\n        const payload = evt.dataTransfer.getData(type);\n        if (payload) {\n            callback(isNaN(payload) ? payload : parseFloat(payload), evt);\n        }\n        setIsTargetedForDrop(false);\n    };\n\n    const dropProps = {\n        isTargetedForDrop,\n        droppable: true,\n        onDragEnter,\n        onDragOver,\n        onDragLeave,\n        onDrop,\n    };\n\n    return [dropProps];\n};\n\nexport default useDrop;\n","import sample from 'lodash/sample';\nimport { lighten, rgba, setLightness } from 'polished';\n\nexport const BORDER_RADIUS = '3px';\nexport const BULLET_SIZE = '10px';\nexport const DEFAULT_TASK_ICON = '📌';\nexport const END_ZONE_ICON = '🗑';\nexport const DURATION_OPTIONS = [15, 30, 45, 60, 90, 120];\nexport const GRID_UNIT = '30px';\nexport const HOURS_PER_SCREEN = 8;\nexport const INITIAL_LISTS = [\n    {\n        id: 1,\n        label: 'Default List',\n    },\n];\nexport const INITIAL_TASKS = [];\nexport const MIN_SLOT_HEIGHT = GRID_UNIT;\nexport const TIMELINE_FROM = '7:00';\nexport const TIMELINE_TO = '24:00';\nexport const UNIFIED_TRANSITION = 'transition: all 0.15s ease-in-out';\n\nconst COPY = {};\nCOPY.motivational_descriptors = [\n    'Adorable',\n    'Adventurous',\n    'Amazing',\n    'Ambitious',\n    'Awesome',\n    'Beautiful',\n    'Bold',\n    'Bright',\n    'Charming',\n    'Clean',\n    'Colourful',\n    'Cute',\n    'Dashing',\n    'Elegant',\n    'Excellent',\n    'Exciting',\n    'Fabulous',\n    'Fantastic',\n    'Fresh',\n    'Gorgeous',\n    'Happy',\n    'Important',\n    'Incredible',\n    'Neat',\n    'Outstanding',\n    'Scrappy',\n    'Sleek',\n    'Special',\n    'Splendid',\n    'Super',\n    'Thoughtful',\n    'Wonderful',\n];\nCOPY.backlog_hide = 'Hide Backlog';\nCOPY.backlog_show = 'Show Backlog';\nCOPY.empty_label = '...label?';\nCOPY.empty_notes = '...notes?';\nCOPY.new_task_label = `New Task`;\nCOPY.new_task_notes = '';\nCOPY.toggle_dark_mode = 'Switch to Dark Mode (⌘D)';\nCOPY.toggle_light_mode = 'Turn off Dark Mode (⌘D)';\n\nexport { COPY };\n\nconst PRIMARY = '#0094FF';\n\nconst DARK = {};\nDARK.PRIMARY = PRIMARY;\nDARK.BACKGROUND = '#000209';\nDARK.HIGH_CONTRAST_BACKGROUND = DARK.PRIMARY;\nDARK.HIGH_CONTRAST_TEXT = DARK.BACKGROUND;\nDARK.BORDER_HOVER = setLightness(0.5, PRIMARY);\nDARK.BORDER_IDLE = setLightness(0.3, PRIMARY);\nDARK.SHADED = lighten(0.1, DARK.BACKGROUND);\nDARK.TEXT = setLightness(0.85, DARK.PRIMARY);\nDARK.TEXT_FADED = setLightness(0.4, DARK.TEXT);\nDARK.BORDER_NEUTRAL = setLightness(0.15, DARK.TEXT);\n\nconst LIGHT = {};\nLIGHT.PRIMARY = PRIMARY;\nLIGHT.BACKGROUND = 'white';\nLIGHT.HIGH_CONTRAST_BACKGROUND = LIGHT.PRIMARY;\nLIGHT.HIGH_CONTRAST_TEXT = LIGHT.BACKGROUND;\nLIGHT.BORDER_HOVER = rgba('#0094FF', 0.5);\nLIGHT.BORDER_IDLE = rgba('#0094FF', 0.3);\nLIGHT.BORDER_NEUTRAL = setLightness(0.75, LIGHT.BACKGROUND);\nLIGHT.SHADED = setLightness(0.95, LIGHT.PRIMARY);\nLIGHT.TEXT = setLightness(0.15, LIGHT.PRIMARY);\nLIGHT.TEXT_FADED = LIGHT.BORDER_NEUTRAL;\n\nexport const COLORS = {\n    DARK,\n    LIGHT,\n};\n","import {\n    GRID_UNIT,\n    HOURS_PER_SCREEN,\n    MIN_SLOT_HEIGHT,\n} from '../components/atoms/tokens';\n\nexport default minutes => `\n    max(\n        (100vh - ${GRID_UNIT}) / (${HOURS_PER_SCREEN} * 60) * ${minutes},\n        ${MIN_SLOT_HEIGHT} * 2 * ${minutes} / 60\n    )\n`;\n","export default str => parseInt(str, 10);\n","import styled from 'styled-components';\nimport { COLORS, GRID_UNIT } from './tokens';\n\nexport default styled.div(\n    ({\n        border = false,\n        isFlexible = false,\n        margin = 0,\n        marginX = 0,\n        marginY = 0,\n        padding = 0,\n        paddingX = 0,\n        paddingY = 0,\n        theme,\n    }) => `\n        box-shadow: ${\n            border ? `0 0 0 1px ${COLORS[theme.name].BORDER_NEUTRAL}` : 'none'\n        };\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        ${\n            marginX\n                ? `\n                    margin-left: calc(${marginX} * ${GRID_UNIT});\n                    margin-right: calc(${marginX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            marginY\n                ? `\n                    margin-top: calc(${marginY} * ${GRID_UNIT});\n                    margin-bottom: calc(${marginY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            margin\n                ? `\n                    margin: calc(${margin} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingX\n                ? `\n                    padding-left: calc(${paddingX} * ${GRID_UNIT});\n                    padding-right: calc(${paddingX} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            paddingY\n                ? `\n                    padding-top: calc(${paddingY} * ${GRID_UNIT});\n                    padding-bottom: calc(${paddingY} * ${GRID_UNIT});\n                `\n                : ''\n        }\n        ${\n            padding\n                ? `\n                    padding: calc(${padding} * ${GRID_UNIT});\n                `\n                : ''\n        }\n    `\n);\n","import styled from 'styled-components';\nimport { GRID_UNIT } from './tokens';\nimport Box from './Box';\n\nexport default styled(Box)(\n    ({\n        align = 'center',\n        direction = 'row',\n        isFlexible = false,\n        justify = 'stretch',\n        spacing = 0,\n    }) => `\n        align-items: ${align};\n        display: flex;\n        flex-direction: ${direction};\n        flex-grow: ${isFlexible ? 1 : 0};\n        flex-shrink: ${isFlexible ? 1 : 0};\n        justify-content: ${justify};\n        width: 100%;\n        \n        ${\n            spacing\n                ? `\n                    & > * + * {\n                        margin-${\n                            direction === 'row' ? 'left' : 'top'\n                        }: calc(${spacing} * ${GRID_UNIT});\n                    }\n                `\n                : ''\n        }\n    `\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst Container = styled(FlexBox).attrs({\n    direction: 'column',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n    `\n);\n\nconst ContentContainer = styled(FlexBox).attrs({\n    direction: 'column',\n})(\n    ({ theme }) => `\n        height: calc(100vh - ${GRID_UNIT});\n        overflow: auto;\n        position: relative;\n        ${UNIFIED_TRANSITION};\n        \n        & > * {\n            align-self: stretch;\n        }\n    `\n);\n\nconst ColumnHeader = styled(FlexBox).attrs({\n    justify: 'center',\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        border-bottom: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        font-size: 0.75rem;\n        height: ${GRID_UNIT};\n        position: sticky;\n        text-transform: uppercase;\n        top: 0;\n        z-index: 100;\n    `\n);\n\nconst AppColumn = ({ children, label, ...otherProps }) => (\n    <Container>\n        <ColumnHeader>{label}</ColumnHeader>\n        <ContentContainer {...otherProps}>{children}</ContentContainer>\n    </Container>\n);\n\nexport default AppColumn;\n","import styled from 'styled-components';\nimport FlexBox from './FlexBox';\nimport { BORDER_RADIUS, COLORS, UNIFIED_TRANSITION } from './tokens';\n\nconst Button = styled(FlexBox).attrs({\n    as: 'button',\n    justify: 'center',\n    paddingX: 0.5,\n    paddingY: 0.25,\n})(\n    ({ theme }) => `\n        background: ${COLORS[theme.name].PRIMARY};\n        border-radius: ${BORDER_RADIUS};\n        color: ${COLORS[theme.name].TEXT};\n        cursor: pointer;\n        transform: scale(1);\n        ${UNIFIED_TRANSITION};\n        \n        &:focus,\n        &:hover {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY};\n        }\n        &:active {\n            transform: scale(0.9);\n            filter: hue-rotate(20deg);\n        }\n    `\n);\n\nexport const GhostButton = styled(Button)(\n    ({ theme }) => `\n        background: unset; \n        border: 2px dashed ${COLORS[theme.name].BORDER_IDLE};\n        width: 100%;\n        \n        &:focus,\n        &:hover {\n            border-color: ${COLORS[theme.name].BORDER_HOVER};\n        }\n    `\n);\n\nexport const ToggleButton = styled(Button)(\n    ({ isActive, theme }) => `\n        background: unset;\n        width: auto;\n    `\n);\n\nexport default Button;\n","import styled from 'styled-components';\nimport FlexBox from './atoms/FlexBox';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst ToolBar = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'space-between',\n    paddingX: 0.5,\n    spacing: 0.5,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        color: ${COLORS[theme.name].TEXT_FADED};\n        height: calc(${GRID_UNIT} * 1.5);\n        width: 100%;\n        z-index: 10;\n        \n        &:focus-within,\n        &:hover {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nexport default ToolBar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './atoms/Button';\nimport { UNIFIED_TRANSITION } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst OptionButton = styled(Button)(\n    ({ isSelected }) => `\n        background: transparent;\n        color: inherit;\n        font-weight: ${isSelected ? 900 : 100};\n        opacity: ${isSelected ? 1 : 0};\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${ToolBar}:focus-within > &,\n        ${ToolBar}:hover > & {\n            opacity: 1;\n        }\n    `\n);\n\nconst OptionBar = ({\n    options,\n    renderOption = option => option,\n    renderSelectedOption = option => option,\n    selectedOption,\n    onChange,\n    ...otherProps\n}) => (\n    <ToolBar {...otherProps}>\n        {options.map(option => {\n            const isSelected = option === selectedOption;\n\n            return (\n                <OptionButton\n                    key={option}\n                    isSelected={isSelected}\n                    onClick={() => onChange(option)}\n                >\n                    {isSelected\n                        ? renderSelectedOption(renderOption(option))\n                        : renderOption(option)}\n                </OptionButton>\n            );\n        })}\n    </ToolBar>\n);\n\nexport default OptionBar;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrag from '../hooks/useDrag';\nimport useDrop from '../hooks/useDrop';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\n\nconst LABEL_STRIP_WIDTH = '5px';\n\nconst Container = styled(FlexBox).attrs({\n    align: 'flex-start',\n    justify: 'space-between',\n    spacing: 0.5,\n    paddingX: 0.5,\n})(\n    ({ duration, isActive, isDragging, theme }) => `\n        background-color: ${COLORS[theme.name].BACKGROUND};\n        border-radius: ${BORDER_RADIUS};\n        box-shadow: 0 0 0 2px ${\n            COLORS[theme.name][isActive ? 'PRIMARY' : 'BORDER_IDLE']\n        };\n        cursor: pointer;\n        height: ${minutesToHeight(duration)};\n        opacity: ${isDragging ? 0 : 1};\n        overflow: hidden;\n        padding-left: calc(${GRID_UNIT} * 0.5 + ${LABEL_STRIP_WIDTH});\n        position: relative;\n        transition-property: opacity, top;\n        width: 100%;\n        z-index: ${isActive ? 10 : 'initial'};\n        ${UNIFIED_TRANSITION};\n        transition-property:\n            background-color,\n            box-shadow,\n            height,\n            min-height,\n            opacity,\n            width;\n\n        &:before {\n            background-color: ${COLORS[theme.name].PRIMARY};\n            border-bottom-left-radius: ${BORDER_RADIUS};\n            border-top-left-radius: ${BORDER_RADIUS};\n            bottom: 1px;\n            content: '';\n            left: 1px;\n            opacity: ${isActive ? 1 : 0.5};\n            position: absolute;\n            top: 1px;\n            width: ${LABEL_STRIP_WIDTH};\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:hover {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].BORDER_HOVER};\n        }\n        \n        &:focus {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY};\n        }\n        \n        &:active {\n            box-shadow: 0 0 0 2px ${COLORS[theme.name].PRIMARY} inset;\n        }\n        \n        ${CardLabel} {\n            color: ${COLORS[theme.name][isActive ? 'TEXT' : 'TEXT_FADED']};\n            min-height: ${minutesToHeight(Math.min(30, duration))};\n        }\n\n        ${CardIcon} {\n            height: ${minutesToHeight(Math.min(30, duration))};\n        }\n    `\n);\n\nconst CardLabel = styled(FlexBox).attrs({\n    align: 'center',\n    isFlexible: true,\n})(\n    ({ theme }) => `\n        position: relative;\n        width: auto;\n        ${UNIFIED_TRANSITION};\n        \n        ${Container}:hover > & {\n            color: ${COLORS[theme.name].TEXT};\n        }\n    `\n);\n\nconst CardIcon = styled(FlexBox).attrs({\n    align: 'center',\n    justify: 'center',\n})(\n    ({ theme }) => `\n        width: auto;\n    `\n);\n\nconst TaskCard = ({ appActions, isActive, task, ...otherProps }) => {\n    const { onSelectTask } = appActions;\n    const { icon, id, label, scheduled_minutes } = task;\n    const [dragProps] = useDrag('task-id', id);\n\n    const handleClick = () => onSelectTask(id);\n\n    return (\n        <Container\n            data-task-id={id}\n            duration={scheduled_minutes}\n            isActive={isActive}\n            tabIndex={0}\n            onClick={handleClick}\n            {...dragProps}\n            {...otherProps}\n        >\n            <CardLabel>{label}</CardLabel>\n            <CardIcon>{icon}</CardIcon>\n        </Container>\n    );\n};\n\nexport default memo(TaskCard);\n","import { useRef, useState } from 'react';\n\nexport default (type, payload) => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const onDragEnd = () => {\n        setIsDragging(false);\n    };\n\n    const onDragStart = evt => {\n        evt.dataTransfer.setData(type, payload);\n        setIsDragging(true);\n    };\n\n    const dragProps = {\n        draggable: true,\n        isDragging,\n        onDragEnd,\n        onDragStart,\n    };\n\n    return [dragProps];\n};\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport toInt from '../utils/toInt';\nimport AppColumn from './AppColumn';\nimport Box from './atoms/Box';\nimport { GhostButton, ToggleButton } from './atoms/Button';\nimport FlexBox from './atoms/FlexBox';\nimport OptionBar from './OptionBar';\nimport TaskCard from './TaskCard';\nimport { COLORS, COPY, DEFAULT_TASK_ICON, GRID_UNIT } from './atoms/tokens';\nimport ToolBar from './ToolBar';\n\nconst Container = styled(AppColumn).attrs({\n    label: 'Backlog',\n})(\n    ({ hasTasks, theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        flex-grow: 1;\n        overflow: ${hasTasks ? 'auto' : 'visible'};\n    `\n);\n\nconst BacklogDropZone = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isTargetedForDrop, theme }) => `\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].BORDER_HOVER} inset`\n                : 'initial'\n        };\n        position: relative;\n    `\n);\n\nconst BacklogToggleButton = ({\n    isBacklogVisibleOrDraggingTask,\n    onChangeBacklogVisibility,\n}) => (\n    <ToggleButton\n        isActive={isBacklogVisibleOrDraggingTask}\n        title={\n            isBacklogVisibleOrDraggingTask\n                ? COPY.backlog_hide\n                : COPY.backlog_show\n        }\n        onClick={() =>\n            onChangeBacklogVisibility(!isBacklogVisibleOrDraggingTask)\n        }\n    >\n        {isBacklogVisibleOrDraggingTask ? '👈' : '👉'}\n    </ToggleButton>\n);\n\nconst CreateFirstTaskTip = styled(Box)`\n    position: absolute;\n    left: calc(100% + ${GRID_UNIT} * 2);\n    top: 50%;\n    transform: translateY(-50%);\n    white-space: nowrap;\n`;\n\nconst Backlog = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    tasks,\n    onClickTask,\n    ...otherProps\n}) => {\n    const {\n        onChangeBacklogVisibility,\n        onChangeTaskPosition,\n        onChangeTheme,\n        onCreateTask,\n        onUpdateTask,\n    } = appActions;\n    const { isBacklogVisibleOrDraggingTask, theme } = appData;\n    const [backlogDropProps] = useDrop('task-id', (taskId, evt) => {\n        onUpdateTask(taskId, {\n            scheduled: false,\n        });\n    });\n    const [taskCardDropProps] = useDrop('task-id', (taskId, evt) => {\n        const droppedOnTaskId = toInt(evt.currentTarget.dataset.taskId);\n        const droppedOnTaskIndex = appData.tasks.findIndex(\n            task => task.id === droppedOnTaskId\n        );\n        onChangeTaskPosition(taskId, droppedOnTaskIndex);\n    });\n    const unscheduledTasks = tasks.filter(task => !task.scheduled);\n    const hasTasks = tasks.length;\n\n    const handleClickNewTask = () => onCreateTask();\n\n    return (\n        <Container {...otherProps}>\n            {!isBacklogVisibleOrDraggingTask ? (\n                <BacklogToggleButton\n                    isBacklogVisibleOrDraggingTask={\n                        isBacklogVisibleOrDraggingTask\n                    }\n                    onChangeBacklogVisibility={onChangeBacklogVisibility}\n                />\n            ) : (\n                <>\n                    <ToolBar>\n                        <ToggleButton\n                            isActive={theme === 'DARK'}\n                            title={\n                                theme === 'DARK'\n                                    ? COPY.toggle_light_mode\n                                    : COPY.toggle_dark_mode\n                            }\n                            onClick={() =>\n                                onChangeTheme(\n                                    theme === 'LIGHT' ? 'DARK' : 'LIGHT'\n                                )\n                            }\n                        >\n                            {theme === 'LIGHT' ? '🌚' : '🌞'}\n                        </ToggleButton>\n                        <BacklogToggleButton\n                            isBacklogVisibleOrDraggingTask={\n                                isBacklogVisibleOrDraggingTask\n                            }\n                            onChangeBacklogVisibility={\n                                onChangeBacklogVisibility\n                            }\n                        />\n                    </ToolBar>\n                    <BacklogDropZone {...backlogDropProps}>\n                        <FlexBox\n                            justify=\"flex-start\"\n                            direction=\"column\"\n                            spacing={1}\n                            padding={1}\n                            style={{\n                                bottom: 0,\n                                left: 0,\n                                overflow: hasTasks ? 'auto' : 'visible',\n                                position: 'absolute',\n                                right: 0,\n                                top: 0,\n                            }}\n                        >\n                            <div\n                                style={{ position: 'relative', width: '100%' }}\n                            >\n                                {!hasTasks && (\n                                    <CreateFirstTaskTip>\n                                        <span\n                                            role=\"img\"\n                                            aria-label=\"left-pointing hand\"\n                                        >\n                                            👈\n                                        </span>{' '}\n                                        Create your first task\n                                    </CreateFirstTaskTip>\n                                )}\n                                <GhostButton\n                                    style={{\n                                        height: minutesToHeight(30),\n                                    }}\n                                    onClick={handleClickNewTask}\n                                >\n                                    New Task\n                                </GhostButton>\n                            </div>\n                            {unscheduledTasks.map(task => (\n                                <TaskCard\n                                    key={task.id}\n                                    appActions={appActions}\n                                    appData={appData}\n                                    isActive={selectedTaskId === task.id}\n                                    task={task}\n                                    {...taskCardDropProps}\n                                />\n                            ))}\n                        </FlexBox>\n                    </BacklogDropZone>\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default memo(Backlog);\n","import React from 'react';\nimport { transparentize } from 'polished';\nimport styled, { css, keyframes } from 'styled-components';\nimport useDrop from '../hooks/useDrop';\nimport { COLORS, END_ZONE_ICON, UNIFIED_TRANSITION } from './atoms/tokens';\n\nconst DROP_ZONE_RADIUS = '20vw';\n\nconst pulsingAnimation = ({ theme }) => keyframes`\n    0% {\n        box-shadow: 0 0 0 0 ${COLORS[theme.name].PRIMARY};\n        transform: scale(1);\n    }\n    100% {\n        box-shadow: 0 0 50px 0 ${COLORS[theme.name].PRIMARY};\n        transform: scale(1.2);\n    }\n`;\n\nconst Container = styled.div(\n    ({ isDraggingTask, isTargetedForDrop, theme }) => css`\n        animation-direction: alternate;\n        animation-duration: 300ms;\n        animation-iteration-count: infinite;\n        animation-name: ${isTargetedForDrop ? pulsingAnimation : 'unset'};\n        animation-timing-function: ease-in-out;\n        background: ${transparentize(\n            isTargetedForDrop ? 0 : isDraggingTask ? 0.35 : 0.8,\n            COLORS[theme.name].PRIMARY\n        )};\n        bottom: calc(${DROP_ZONE_RADIUS} * -1);\n        border-radius: calc(${DROP_ZONE_RADIUS} * 2);\n        height: calc(${DROP_ZONE_RADIUS} * 2);\n        pointer-events: ${isDraggingTask ? 'all' : 'none'};\n        position: fixed;\n        right: calc(${DROP_ZONE_RADIUS} * -1);\n        transform: scale(${isDraggingTask ? 0.5 : 0.25});\n        width: calc(${DROP_ZONE_RADIUS} * 2);\n        z-index: 100;\n        ${UNIFIED_TRANSITION};\n\n        &:before {\n            align-items: center;\n            content: '${END_ZONE_ICON}';\n            display: flex;\n            font-size: 8rem;\n            justify-content: center;\n            height: calc(${DROP_ZONE_RADIUS} * 1.25);\n            left: 0;\n            position: absolute;\n            top: 0;\n            width: calc(${DROP_ZONE_RADIUS} * 1.25);\n        }\n    `\n);\n\nconst CompletedTaskDropZone = ({ appActions, appData, ...otherProps }) => {\n    const { onSelectTask, onUpdateTask } = appActions;\n    const { isDraggingTask } = appData;\n    const [dropProps] = useDrop('task-id', taskId => {\n        onUpdateTask(taskId, {\n            isComplete: true,\n        });\n        onSelectTask(currentSelectedTaskId => {\n            return currentSelectedTaskId === taskId\n                ? null\n                : currentSelectedTaskId;\n        });\n    });\n\n    return (\n        <Container\n            isDraggingTask={isDraggingTask}\n            {...dropProps}\n            {...otherProps}\n        />\n    );\n};\n\nexport default CompletedTaskDropZone;\n","import { useEffect, useState } from 'react';\nimport mapKeys from 'lodash/mapKeys';\nimport uniq from 'lodash/uniq';\n\nconst INPUT_TAG_NAMES = ['input', 'textarea'];\n\nconst isInput = node =>\n    node.tagName &&\n    INPUT_TAG_NAMES.map(tagName => tagName.toLowerCase()).includes(\n        node.tagName.toLowerCase()\n    );\n\nconst buildKeyboardShortcutHandler = (keyMap, scopedToElementRef) => evt => {\n    const keysDown = [];\n\n    if (evt.ctrlKey) {\n        keysDown.push('control');\n    }\n\n    if (evt.shiftKey) {\n        keysDown.push('shift');\n    }\n\n    if (evt.metaKey) {\n        keysDown.push('cmd');\n    }\n\n    keysDown.push(evt.key);\n\n    const currentKeySequence = uniq(keysDown)\n        .map(keyDown => keyDown.toLowerCase())\n        .sort()\n        .join('+');\n\n    mapKeys(keyMap, (handler, sequence) => {\n        const shortcutKeySequence = sequence\n            .split('+')\n            .map(key => key.trim().toLowerCase())\n            .sort()\n            .join('+');\n\n        if (currentKeySequence === shortcutKeySequence) {\n            const scopedElement = scopedToElementRef.current;\n            const scopedToAnInput = scopedElement && isInput(scopedElement);\n            const elementWithFocusIsAnInput = isInput(document.activeElement);\n\n            if (scopedToAnInput) {\n                evt.stopPropagation();\n            }\n\n            if (!scopedToAnInput && elementWithFocusIsAnInput) {\n                return false;\n            }\n\n            return handler(evt);\n        }\n    });\n};\n\nconst useGlobalKeyboardShortcuts = (\n    keyMap,\n    targetElementRef = { current: null }\n) => {\n    useEffect(() => {\n        const onKeyDown = buildKeyboardShortcutHandler(\n            keyMap,\n            targetElementRef\n        );\n\n        document.addEventListener('keydown', onKeyDown);\n\n        return () => document.removeEventListener('keydown', onKeyDown);\n    }, [keyMap]);\n};\n\nexport default useGlobalKeyboardShortcuts;\n","import React, {\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport styled from 'styled-components';\nimport useGlobalKeyboardShortcuts from '../hooks/useKeyboardShortcuts';\nimport Box from './atoms/Box';\nimport {\n    BORDER_RADIUS,\n    COLORS,\n    GRID_UNIT,\n    UNIFIED_TRANSITION,\n} from './atoms/tokens';\n\nconst Container = styled(Box).attrs({\n    isFlexible: true,\n})(\n    ({ isEditing, isEmpty, theme }) => `\n        cursor: ${isEditing ? 'text' : 'pointer'};\n        position: relative;\n        opacity: ${isEmpty ? 0.5 : 1};\n        user-select: ${isEditing ? 'text' : 'none'};\n        width: auto;\n        height: auto;\n    \n        // Tracing element\n        &:before {\n            border: 2px dashed ${COLORS[theme.name].BORDER_HOVER};\n            border-radius: ${BORDER_RADIUS};\n            content: '';\n            opacity: ${isEditing ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            top: calc(${GRID_UNIT} * 0.5 * -1);\n            right: calc(${GRID_UNIT} * 0.5 * -1);\n            bottom: calc(${GRID_UNIT} * 0.5 * -1);\n            left: calc(${GRID_UNIT} * 0.5 * -1);\n            ${UNIFIED_TRANSITION};\n        }\n        \n        &:focus,\n        &:hover {\n            &:before {\n                opacity: 1;\n            }\n        }\n    `\n);\n\nconst EditInPlace = ({\n    isMultiLine = false,\n    isRemotelyActivated = false,\n    placeholder = 'Empty',\n    render = value => value,\n    value = '',\n    wrapperStyles = {},\n    onSave = () => {},\n    ...otherProps\n}) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [bufferedValue, setBufferedValue] = useState(value);\n    const [measuringElementHeight, setMeasuringElementHeight] = useState(null);\n    const inputRef = useRef(null);\n    const measuringElementRef = useRef(null);\n    const isEmpty = bufferedValue.trim() === '';\n    const isSingleLine = !isMultiLine;\n\n    useEffect(() => {\n        if (isRemotelyActivated === true) {\n            handleClick();\n        }\n    }, [isRemotelyActivated]);\n\n    useEffect(() => {\n        setBufferedValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current.select();\n            inputRef.current.focus();\n        }\n    }, [inputRef, isEditing]);\n\n    useEffect(() => {\n        const el = measuringElementRef.current;\n        if (el) {\n            setMeasuringElementHeight(el.offsetHeight);\n        }\n    }, [bufferedValue, isEditing, measuringElementRef]);\n\n    const handleClick = () => {\n        if (!isEditing) {\n            setBufferedValue(value);\n            setIsEditing(true);\n        }\n    };\n\n    const handleBlur = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const handleChange = evt => {\n        setBufferedValue(evt.target.value);\n    };\n\n    const saveAndClose = () => {\n        onSave(bufferedValue);\n        setIsEditing(false);\n    };\n\n    const close = () => {\n        setBufferedValue(value);\n        setIsEditing(false);\n    };\n\n    const keyMap = useMemo(\n        () => ({\n            'cmd + escape': close,\n            'shift + escape': close,\n            'cmd + enter': saveAndClose,\n            'shift + enter': saveAndClose,\n            escape: saveAndClose,\n            enter: evt => {\n                if (isSingleLine) {\n                    saveAndClose();\n                    evt.preventDefault();\n                    return false;\n                }\n            },\n        }),\n        [close, isSingleLine, saveAndClose]\n    );\n\n    useGlobalKeyboardShortcuts(keyMap, inputRef);\n\n    return (\n        <Container\n            isEditing={isEditing}\n            isEmpty={isEmpty}\n            tabIndex={0}\n            onClick={handleClick}\n            {...otherProps}\n        >\n            <Box style={wrapperStyles}>\n                {isEditing ? (\n                    <>\n                        <div\n                            ref={measuringElementRef}\n                            style={{\n                                position: 'absolute',\n                                pointerEvents: 'none',\n                                opacity: 0,\n                                outline: '2px dotted red',\n                                whiteSpace: 'pre-wrap',\n                                width: '100%',\n                            }}\n                        >\n                            {bufferedValue}.\n                        </div>\n                        <textarea\n                            disabled={!isEditing}\n                            ref={inputRef}\n                            rows={1}\n                            style={{\n                                display: 'block',\n                                height: `${measuringElementHeight}px`,\n                                width: '100%',\n                            }}\n                            value={bufferedValue}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                    </>\n                ) : (\n                    render(isEmpty ? placeholder : value)\n                )}\n            </Box>\n        </Container>\n    );\n};\n\nexport default memo(EditInPlace);\n","import React, { useLayoutEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport marked from 'marked';\nimport AppColumn from './AppColumn';\nimport EditInPlace from './EditInPlace';\nimport OptionBar from './OptionBar';\nimport Box from './atoms/Box';\nimport FlexBox from './atoms/FlexBox';\nimport {\n    COLORS,\n    COPY,\n    DEFAULT_TASK_ICON,\n    DURATION_OPTIONS,\n} from './atoms/tokens';\n\nconst ANIMATION_DURATION = 200;\n\nconst Container = styled(AppColumn)(\n    ({ isLoading, theme }) => `\n        box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1);\n        border-left: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        border-right: 2px solid ${COLORS[theme.name].BORDER_NEUTRAL};\n        overflow: unset;\n        z-index: 11;\n        \n        // Blackout curtain\n        &:before {\n            background-color: ${COLORS[theme.name].BACKGROUND};\n            bottom: 0;\n            content: '';\n            left: 0;\n            opacity: ${isLoading ? 1 : 0};\n            pointer-events: none;\n            position: absolute;\n            right: 0;\n            top: 0;\n            transition: opacity ${ANIMATION_DURATION / 2 / 1000}s ease-in-out;\n            z-index: 10;\n        }\n    `\n);\n\nconst TaskHeader = styled(FlexBox).attrs({\n    as: 'h1',\n    align: 'center',\n    spacing: 1.5,\n    paddingX: 1,\n    paddingY: 0.75,\n})(\n    ({ theme }) => `\n        background-color: ${COLORS[theme.name].SHADED};\n        font-size: 1.4rem;\n        font-weight: 900;\n        position: relative;\n    `\n);\n\nconst TaskHeaderLabel = styled(Box)`\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-self: stretch;\n`;\n\nconst TaskHeaderIcon = styled(Box).attrs({\n    role: 'img',\n})`\n    align-self: flex-start;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: 3rem;\n    line-height: 1.4rem;\n    width: 3rem;\n`;\n\nconst TaskDetails = ({\n    appActions = {},\n    appData = {},\n    isCreatingTask = false,\n    task = {},\n    ...otherProps\n}) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const { onUpdateTask } = appActions;\n    const { icon, id, label, notes, scheduled_minutes } = task;\n    const isEmpty = !task.id;\n\n    const handleUpdateTask = (field, value) =>\n        onUpdateTask(id, { [field]: value });\n\n    const handleSaveDuration = newDuration =>\n        handleUpdateTask('scheduled_minutes', newDuration);\n\n    const handleSaveIcon = newNotes => handleUpdateTask('icon', newNotes);\n\n    const handleSaveLabel = newLabel => handleUpdateTask('label', newLabel);\n\n    const handleSaveNotes = newNotes => handleUpdateTask('notes', newNotes);\n\n    useLayoutEffect(() => {\n        setIsLoading(true);\n        const newTimer = setTimeout(\n            () => setIsLoading(false),\n            ANIMATION_DURATION / 2\n        );\n        return () => clearTimeout(newTimer);\n    }, [task.id]);\n\n    return (\n        <Container\n            isLoading={isLoading}\n            label=\"Selected Task Details\"\n            {...otherProps}\n        >\n            {!isEmpty && !isLoading && (\n                <>\n                    <OptionBar\n                        renderSelectedOption={option => `${option} mins`}\n                        selectedOption={scheduled_minutes}\n                        options={DURATION_OPTIONS}\n                        onChange={handleSaveDuration}\n                    />\n\n                    <TaskHeader>\n                        <TaskHeaderLabel>\n                            <EditInPlace\n                                isRemotelyActivated={isCreatingTask}\n                                placeholder={COPY.empty_label}\n                                value={label}\n                                onSave={handleSaveLabel}\n                            />\n                        </TaskHeaderLabel>\n                        <TaskHeaderIcon>\n                            <EditInPlace\n                                placeholder={DEFAULT_TASK_ICON}\n                                value={icon}\n                                onSave={handleSaveIcon}\n                            />\n                        </TaskHeaderIcon>\n                    </TaskHeader>\n\n                    <EditInPlace\n                        isFlexible\n                        isMultiLine\n                        margin={1}\n                        placeholder={COPY.empty_notes}\n                        render={rawNotes => (\n                            <div\n                                className=\"markdown\"\n                                dangerouslySetInnerHTML={{\n                                    __html: marked(rawNotes),\n                                }}\n                            />\n                        )}\n                        wrapperStyles={{\n                            bottom: 0,\n                            left: 0,\n                            overflow: 'auto',\n                            position: 'absolute',\n                            right: 0,\n                            top: 0,\n                        }}\n                        value={notes}\n                        onSave={handleSaveNotes}\n                    />\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default TaskDetails;\n","import toInt from './toInt';\n\nexport default str => (str ? str.split(':').map(val => toInt(val)) : [0, 0]);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport range from 'lodash/range';\nimport { COLORS, TIMELINE_FROM } from './atoms/tokens';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport useDrop from '../hooks/useDrop';\n\nconst Container = styled.div`\n    bottom: 0;\n    height: 100%;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n`;\n\nconst StyledTimelineDropTarget = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        position: relative;\n        width: 100%;\n        height: ${minutesToHeight(15)};\n        z-index: 1;\n        border-top: ${\n            isTargetedForDrop ? `4px dotted ${COLORS[theme.name].PRIMARY}` : ''\n        };\n    `\n);\n\nconst TimelineDropTarget = memo(\n    ({ appActions, quarterInMinutes, ...otherProps }) => {\n        const { onUpdateTask } = appActions;\n        const [fromHours, fromMinutes] = strToHoursAndMinutes(TIMELINE_FROM);\n        const newOffsetMinutes =\n            fromHours * 60 + fromMinutes + quarterInMinutes * 15;\n        const newTime = minutesToTime(newOffsetMinutes);\n        const [dropProps] = useDrop('task-id', taskId =>\n            onUpdateTask(taskId, {\n                scheduled: true,\n                scheduled_time: newTime,\n            })\n        );\n\n        return <StyledTimelineDropTarget {...dropProps} {...otherProps} />;\n    }\n);\n\nconst TimelineDropZone = memo(({ appActions, totalMinutes, ...otherProps }) => (\n    <Container {...otherProps}>\n        {range(totalMinutes / 15).map(quarterInMinutes => (\n            <TimelineDropTarget\n                key={quarterInMinutes}\n                appActions={appActions}\n                quarterInMinutes={quarterInMinutes}\n            />\n        ))}\n    </Container>\n));\n\nexport default TimelineDropZone;\n","export default minutes => `${Math.floor(minutes / 60)}:${minutes % 60}`;\n","import React, { Fragment, memo, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport range from 'lodash/range';\nimport useDrop from '../hooks/useDrop';\nimport minutesToTime from '../utils/minutesToTime';\nimport strToMinutes from '../utils/strToMinutes';\nimport toInt from '../utils/toInt';\nimport AppColumn from './AppColumn';\nimport TaskCard from './TaskCard';\nimport TimelineDropZone from './TimelineDropZone';\nimport strToHoursAndMinutes from '../utils/strToHoursAndMinutes';\nimport minutesToHeight from '../utils/minutesToHeight';\nimport { COLORS, GRID_UNIT } from './atoms/tokens';\n\nconst LINE_LABEL_WIDTH = '80px';\n\nconst Container = styled(AppColumn).attrs({\n    label: \"Today's Plan\",\n})``;\n\nconst TimelineContainer = styled.div(\n    ({ isTargetedForDrop, theme }) => `\n        bottom: 0;\n        box-shadow: ${\n            isTargetedForDrop\n                ? `0 0 0 5px ${COLORS[theme.name].BORDER_HOVER} inset`\n                : 'initial'\n        };\n        left: 0;\n        overflow: auto;\n        position: absolute;\n        right: 0;\n        top: 0;\n        user-select: none;\n    `\n);\n\nconst HalfHourRow = styled.div`\n    position: relative;\n    height: ${minutesToHeight(30)};\n`;\n\nconst HalfHourLabel = styled.div(\n    ({ hideLabel, isFaded, theme }) => `\n        color: ${\n            hideLabel\n                ? 'transparent'\n                : transparentize(isFaded ? 1 : 0, COLORS[theme.name].TEXT_FADED)\n        };\n        padding-right: calc(100% - ${LINE_LABEL_WIDTH} + (${GRID_UNIT} * 0.5));\n        position: absolute;\n        text-align: right;\n        top: 0;\n        transform: translateY(-50%);\n        width: 100%;\n\n        &:before {\n            background-color: ${transparentize(\n                isFaded ? 0.8 : 0.5,\n                COLORS[theme.name].BORDER_NEUTRAL\n            )};\n            content: '';\n            height: 1px;\n            left: ${LINE_LABEL_WIDTH};\n            position: absolute;\n            right: 0;\n            top: 50%;\n        }\n    `\n);\n\nconst ScheduledTaskCard = styled(TaskCard)(\n    ({ isAnotherTaskBeingDragged, offsetMinutes }) => `\n        left: calc(${GRID_UNIT} * 3);\n        pointer-events: ${isAnotherTaskBeingDragged ? 'none' : 'all'};\n        position: absolute;\n        right: ${GRID_UNIT};\n        top: ${minutesToHeight(offsetMinutes)};\n        width: auto;\n        z-index: 2;\n    `\n);\n\nconst CurrentTimeMarker = styled.div(\n    ({ offsetMinutes }) => `\n        background-color: red;\n        height: 1px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: ${minutesToHeight(offsetMinutes)};\n        z-index: 10;\n    `\n);\n\nconst Timeline = ({\n    appActions,\n    appData,\n    selectedTaskId,\n    from,\n    tasks,\n    to,\n    onClickTask,\n    ...otherProps\n}) => {\n    const [timelineDropProps] = useDrop('task-id', () => {});\n    const [currentTime, setCurrentTime] = useState(null);\n    const [currentHour, currentMinute] = strToHoursAndMinutes(currentTime);\n    const [fromHour, fromMinutes] = strToHoursAndMinutes(from);\n    const { isDraggingTask } = appData;\n    const [isLoaded, setIsLoaded] = useState(false);\n    const scheduledTasks = tasks.filter(task => task.scheduled);\n    const [toHour, toMinutes] = strToHoursAndMinutes(to);\n    const totalHours = toHour - fromHour;\n    const totalMinutes =\n        toHour * 60 + toMinutes - (fromHour * 60 + fromMinutes);\n    const currentTimeMarkerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            setCurrentTime(`${now.getHours()}:${now.getMinutes()}`);\n            setIsLoaded(true);\n        };\n        updateTime();\n        const timer = setInterval(updateTime, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    useEffect(() => {\n        if (\n            isLoaded &&\n            currentTimeMarkerRef.current &&\n            timelineContainerRef.current\n        ) {\n            timelineContainerRef.current.scrollTo(\n                0,\n                currentTimeMarkerRef.current.offsetTop - 150\n            );\n        }\n    }, [isLoaded, currentTimeMarkerRef, timelineContainerRef]);\n\n    return (\n        <Container {...otherProps}>\n            <TimelineContainer\n                ref={timelineContainerRef}\n                {...timelineDropProps}\n            >\n                {scheduledTasks.map(task => {\n                    const [hours, mins] = strToHoursAndMinutes(\n                        task.scheduled_time\n                    );\n                    const offsetMinutes =\n                        hours * 60 + mins - (fromHour * 60 + fromMinutes);\n\n                    return (\n                        <ScheduledTaskCard\n                            key={task.id}\n                            appActions={appActions}\n                            isAnotherTaskBeingDragged={isDraggingTask}\n                            isActive={selectedTaskId === task.id}\n                            offsetMinutes={offsetMinutes}\n                            task={task}\n                        />\n                    );\n                })}\n                <CurrentTimeMarker\n                    ref={currentTimeMarkerRef}\n                    offsetMinutes={\n                        currentHour * 60 +\n                        currentMinute -\n                        (fromHour * 60 + fromMinutes)\n                    }\n                />\n                <TimelineDropZone\n                    appActions={appActions}\n                    totalMinutes={totalMinutes}\n                />\n                {range(totalHours).map(hour => (\n                    <Fragment key={hour}>\n                        <HalfHourRow>\n                            <HalfHourLabel hideLabel={hour === 0}>\n                                {(fromHour + hour) % 12 || 12}:00\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                        <HalfHourRow>\n                            <HalfHourLabel isFaded>\n                                {(fromHour + hour) % 12 || 12}:30\n                            </HalfHourLabel>\n                        </HalfHourRow>\n                    </Fragment>\n                ))}\n            </TimelineContainer>\n        </Container>\n    );\n};\n\nexport default memo(Timeline);\n","import { createGlobalStyle } from 'styled-components';\nimport { BULLET_SIZE, COLORS, GRID_UNIT } from './tokens';\n\nexport default createGlobalStyle(\n    ({ theme }) => `\n        * {\n            background: unset;\n            border: unset;\n            box-sizing: border-box;\n            color: unset;\n            font: unset;\n            font-size: inherit;\n            line-height: 1.4em;\n            list-style-type: none;\n            margin: 0;\n            outline: unset;\n            padding: 0;\n        }\n        :root {\n            background: ${COLORS[theme.name].BACKGROUND};\n            color: ${COLORS[theme.name].TEXT};\n            font-family: 'Operator Mono', monospace;\n            font-size: 15px;\n            font-weight: 300;\n            height: 100%;\n            overflow: hidden;\n        }\n        strong {\n            font-weight: 900;\n        }\n        em {\n            font-style: italic;\n        }\n        \n        .markdown {\n            * + * {\n                margin-top: calc(${GRID_UNIT} * 0.5);\n            }\n            \n            h1 {\n                color: ${COLORS[theme.name].TEXT_FADED};\n                font-size: 1.4rem;\n                font-weight: 500;\n                border-bottom: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                padding-bottom: calc(${GRID_UNIT} * 0.25);\n                \n                & + * {\n                    margin-top: ${GRID_UNIT};\n                } \n            }\n        \n            blockquote {\n                border-left: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                font-style: italic;\n                padding: calc(${GRID_UNIT} * 0.5) ${GRID_UNIT};\n            }\n        \n            li {\n                padding-left: ${GRID_UNIT};\n                position: relative;\n        \n                &:before {\n                    content: '';\n                    box-sizing: border-box;\n                    position: absolute;\n                    top: 5px;\n                    left: 0;\n                    border: 2px dotted ${COLORS[theme.name].TEXT_FADED};\n                    border-radius: 100px;\n                    width: ${BULLET_SIZE};\n                    height: ${BULLET_SIZE};\n                }\n            }\n        }\n    `\n);\n","import { useEffect, useState } from 'react';\n\nexport default (key, initialState) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            const savedState = window.localStorage.getItem(key);\n            setState(\n                savedState !== null ? JSON.parse(savedState) : initialState\n            );\n            setIsLoaded(true);\n        }\n    }, [key, initialState, isLoaded]);\n\n    useEffect(() => {\n        if (isLoaded) {\n            window.localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [isLoaded, key, state]);\n\n    return [state, setState];\n};\n","import React, {\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport sample from 'lodash/sample';\nimport Backlog from './components/Backlog';\nimport CompletedTasksDropZone from './components/CompletedTasksDropZone';\nimport TaskDetails from './components/TaskDetails';\nimport Timeline from './components/Timeline';\nimport FlexBox from './components/atoms/FlexBox';\nimport GlobalStyle from './components/atoms/GlobalStyles';\nimport useGlobalKeyboardShortcuts from './hooks/useKeyboardShortcuts';\nimport usePersistentState from './hooks/usePersistentState';\nimport {\n    COPY,\n    DEFAULT_TASK_ICON,\n    GRID_UNIT,\n    INITIAL_LISTS,\n    INITIAL_TASKS,\n    TIMELINE_FROM,\n    TIMELINE_TO,\n} from './components/atoms/tokens';\n\n/*\n    activeListId: 123,\n    lists: [\n        {\n            id: 123,\n            label: 'Default List',\n        }\n    ],\n    tasks: [\n        {\n            id: 1,\n            list_id: 123,\n            icon: '🧺',\n            isComplete: false,\n            label: 'Take out the laundry',\n            notes:\n                'This is a note. **This is bold, I think?**\\n\\nWith two lines!\\n\\n- And a list\\n\\n- Of things\\n\\n- Like this!\\n\\n> Look, a blockquote! Oooh',\n            scheduled: false,\n            scheduled_minutes: 30,\n            scheduled_time: '14:00',\n        },\n    ],\n*/\n\nfunction App() {\n    const [isBacklogVisible, setIsBacklogVisible] = usePersistentState(\n        'is-backlog-visible',\n        true\n    );\n    const [lists, setLists] = usePersistentState('lists', INITIAL_LISTS);\n    const [selectedListId, setSelectedListId] = usePersistentState(\n        'selected-list-id',\n        1\n    );\n    const [selectedTaskId, setSelectedTaskId] = usePersistentState(\n        'selected-task-id',\n        null\n    );\n    const [tasks, setTasks] = usePersistentState('tasks', INITIAL_TASKS);\n    const [themeName, setThemeName] = usePersistentState('theme-name', 'DARK');\n    const [isCreatingTask, setIsCreatingTask] = useState(false);\n    const [isDraggingTask, setIsDraggingTask] = useState(false);\n    const isBacklogVisibleOrDraggingTask = isBacklogVisible || isDraggingTask;\n    const selectedList = useMemo(\n        () => lists.find(list => list.id === selectedListId),\n        [lists, selectedListId]\n    );\n    const selectedTask = useMemo(\n        () => tasks.find(task => task.id === selectedTaskId),\n        [tasks, selectedTaskId]\n    );\n    const incompleteTasks = useMemo(\n        () => tasks.filter(task => !task.isComplete),\n        [tasks]\n    );\n    const hasIncompleteTasks = incompleteTasks.length;\n\n    const handleDragOver = () => setIsDraggingTask(true);\n\n    const handleDragEnd = () => setIsDraggingTask(false);\n\n    useEffect(() => {\n        handleDragEnd();\n    }, [tasks]);\n\n    const getTaskById = taskId => tasks.find(task => task.id === taskId);\n\n    const onUpdateTask = useCallback(\n        (taskId, updates) => {\n            setTasks(prevTasks =>\n                prevTasks.map(task => {\n                    if (task.id === taskId) {\n                        return {\n                            ...task,\n                            ...updates,\n                        };\n                    }\n                    return task;\n                })\n            );\n        },\n        [setTasks]\n    );\n\n    const onCreateTask = useCallback(\n        (overrides = {}) => {\n            const newTaskId = Date.now();\n            const now = new Date();\n            const currentHour = now.getHours();\n            const currentMinute = now.getMinutes();\n\n            setTasks(currentTasks =>\n                currentTasks.concat([\n                    {\n                        icon: DEFAULT_TASK_ICON,\n                        id: newTaskId,\n                        list_id: selectedListId,\n                        isComplete: false,\n                        label: `${sample(COPY.motivational_descriptors)} ${\n                            COPY.new_task_label\n                        }`,\n                        notes: COPY.new_task_notes,\n                        scheduled: false,\n                        scheduled_minutes: 30,\n                        scheduled_time: `${currentHour}:${currentMinute}`,\n                        ...overrides,\n                    },\n                ])\n            );\n\n            setSelectedTaskId(newTaskId);\n\n            setIsCreatingTask(true);\n\n            setTimeout(() => setIsCreatingTask(false), 1000);\n        },\n        [selectedListId, setSelectedTaskId, setTasks]\n    );\n\n    const onSelectTask = setSelectedTaskId;\n\n    const onChangeBacklogVisibility = setIsBacklogVisible;\n\n    const onChangeTheme = setThemeName;\n\n    const onChangeTaskPosition = useCallback(\n        (taskId, newIndex) => {\n            setTasks(prevTasks => {\n                const tasksMinusTarget = prevTasks.filter(\n                    task => task.id !== taskId\n                );\n                const task = prevTasks.find(task => task.id === taskId);\n\n                return [].concat(\n                    tasksMinusTarget.slice(0, newIndex),\n                    [task],\n                    tasksMinusTarget.slice(newIndex)\n                );\n            });\n        },\n        [setTasks]\n    );\n\n    const keyMap = useMemo(\n        () => ({\n            'cmd + arrowRight': evt => {\n                evt.preventDefault();\n                onUpdateTask(selectedTaskId, {\n                    scheduled: true,\n                });\n            },\n            'cmd + arrowLeft': evt => {\n                evt.preventDefault();\n                onUpdateTask(selectedTaskId, {\n                    scheduled: false,\n                });\n            },\n            'cmd + b': evt => {\n                evt.preventDefault();\n                onChangeBacklogVisibility(!isBacklogVisible);\n            },\n            'cmd + d': evt => {\n                evt.preventDefault();\n                onChangeTheme(themeName === 'LIGHT' ? 'DARK' : 'LIGHT');\n            },\n        }),\n        [isBacklogVisible, selectedTaskId, themeName]\n    );\n\n    useGlobalKeyboardShortcuts(keyMap);\n\n    const appActions = {\n        getTaskById,\n        onChangeBacklogVisibility,\n        onChangeTaskPosition,\n        onChangeTheme,\n        onCreateTask,\n        onSelectTask,\n        onUpdateTask,\n    };\n\n    const appData = {\n        isBacklogVisibleOrDraggingTask,\n        isDraggingTask,\n        selectedTaskId,\n        tasks,\n        theme: themeName,\n    };\n\n    console.log({\n        isBacklogVisible,\n        isDraggingTask,\n        isBacklogVisibleOrDraggingTask,\n    });\n\n    const columnWidths = isBacklogVisibleOrDraggingTask\n        ? {\n              backlog: '30vw',\n              taskDetails: '40vw',\n              timeline: '30vw',\n          }\n        : {\n              backlog: `calc(${GRID_UNIT} * 2)`,\n              taskDetails: `calc(60vw - ${GRID_UNIT} * 2)`,\n              timeline: '40vw',\n          };\n\n    return (\n        <ThemeProvider theme={{ name: themeName }}>\n            <GlobalStyle />\n            <CompletedTasksDropZone appActions={appActions} appData={appData} />\n            <FlexBox\n                align=\"stretch\"\n                direction=\"row-reverse\"\n                onDragOver={handleDragOver}\n                onDragEnd={handleDragEnd}\n            >\n                <Timeline\n                    appActions={appActions}\n                    appData={appData}\n                    selectedTaskId={selectedTaskId}\n                    from={TIMELINE_FROM}\n                    style={{\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                        width: columnWidths.timeline,\n                        pointerEvents: hasIncompleteTasks ? 'all' : 'none',\n                    }}\n                    tasks={incompleteTasks}\n                    to={TIMELINE_TO}\n                />\n                <TaskDetails\n                    appActions={appActions}\n                    appData={appData}\n                    task={selectedTask}\n                    isCreatingTask={isCreatingTask}\n                    style={{\n                        width: columnWidths.taskDetails,\n                        opacity: hasIncompleteTasks ? 1 : 0.25,\n                    }}\n                />\n                <Backlog\n                    appActions={appActions}\n                    appData={appData}\n                    selectedTaskId={selectedTaskId}\n                    style={{\n                        width: columnWidths.backlog,\n                    }}\n                    tasks={incompleteTasks}\n                />\n            </FlexBox>\n        </ThemeProvider>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}